# Yacker grammer for (Sh)ape (Ex)pressions (C)ompact language
# 
# http://www.w3.org/2005/01/yacker/uploads/ShEx2bnf
# 
# changes:
#   restored valueClass
#   split node type options by sensible accompanying parameters
#   added XS facets
#   added annotations (e.g. '; rdfs:label "foo" ; skos:definition ; "bar"')

#   initial lowercase for all productions (for ANTLR)
#   migrated '@' shapeLabel | shapeDefinition interchangable
#   made REPEAT_RANGE a terminal
#   'EXTRA' takes predicate+
#   senseFlags order-independent
#   renaming to match AS <http://w3c.github.io/data-shapes/semantics/#Simple_shape_expression_schemas>
#   + someOfShape
#   + groupShapeConstr
#   renamed: label->shapeLabel, typeSpec->shapeDefinition, choiceExpr->oneOfShape, sequenceExpr->groupShape, unaryExpr->unaryShape, repeatCount->cardinality

# Notation:
#   in-line terminals in ""s are case-insensitive

[1]     shexDoc               ::= directive* ((shape | start | CODE+) statement*)? # leading CODE
[2]     statement             ::= directive | start | shape
[3]     directive             ::= baseDecl | prefixDecl
[5s]    baseDecl              ::= "BASE" IRIREF
[6s]    prefixDecl            ::= "PREFIX" PNAME_NS IRIREF
[4]     start                 ::= 'start' '=' ( shapeLabel | shapeDefinition CODE* )
[5]     shape                 ::= "VIRTUAL"? shapeLabel shapeDefinition CODE*
[6]     shapeDefinition       ::= (include | inclPropertySet | "CLOSED")* '{' oneOfShape? '}'
[7]     include               ::= '&' shapeLabel
[8]     inclPropertySet       ::= "EXTRA" predicate+
[9]     oneOfShape            ::= someOfShape ( '|' someOfShape )*
[10]    someOfShape           ::= groupShape ( '||' groupShape )*
[11]    groupShape            ::= unaryShape ( ',' unaryShape )* ','?
[12]    unaryShape            ::= id? ( tripleConstraint | include | '(' oneOfShape ')' cardinality? CODE* )
[13]    id                    ::= '$' shapeLabel
[14]    shapeLabel            ::= iri | blankNode
[15]    tripleConstraint      ::= senseFlags? predicate valueClass annotation* cardinality? CODE*
[16]    senseFlags            ::= '!' '^'? | '^' '!'?
[17]    predicate             ::= RDF_TYPE | iri
[18]    valueClass            ::= "LITERAL" xsFacet*
                                | ("IRI" | "NONLITERAL") groupShapeConstr? ("PATTERN" string)?
                                | "BNODE" groupShapeConstr?
                                | datatype | groupShapeConstr | valueSet | '.'
[19]    groupShapeConstr      ::= shapeOrRef (("AND" | "OR") shapeOrRef)*
[20]    shapeOrRef            ::= '@' shapeLabel | shapeDefinition
[21]    xsFacet               ::= ("PATTERN" | '~') string
                                | ("MININCLUSIVE" | "MINEXCLUSIVE" | "MAXINCLUSIVE" | "MAXEXCLUSIVE") INTEGER
                                | ("LENGTH" | "MINLENGTH" | "MAXLENGTH") INTEGER
                                | ("TOTALDIGITS" | "FRACTIONDIGITS") INTEGER
[22]    datatype              ::= iri
[23]    annotation            ::= ';' iri (iri | literal)
[24]    cardinality           ::= '*' | '+' | '?' | REPEAT_RANGE
[25]    valueSet              ::= '(' value* ')'
[26]    value                 ::= iriRange | literal
[27]    iriRange              ::= iri ('~' exclusion*)? | '.' exclusion+
[28]    exclusion             ::= '-' iri '~'?
[13t]   literal               ::= rdfLiteral | numericLiteral | booleanLiteral
[16t]   numericLiteral        ::= INTEGER | DECIMAL | DOUBLE
[129s]  rdfLiteral            ::= string (LANGTAG | '^^' iri)?
[134s]  booleanLiteral        ::= 'true' | 'false'
[135s]  string                ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
[136s]  iri                   ::= IRIREF | prefixedName
[137s]  prefixedName          ::= PNAME_LN | PNAME_NS
[138s]  blankNode             ::= BLANK_NODE_LABEL | ANON

@terminals

[29]    CODE                  ::= '%' ([a-zA-Z+#_][a-zA-Z0-9+#_]*)? '{' ([^%\\] | '\\' '%')* '%' '}'
[30]    REPEAT_RANGE          ::= '{' INTEGER (',' INTEGER?)? '}'
[3y]    RDF_TYPE              ::= 'a'
[18t]   IRIREF                ::= '<' ([^#x00-#x20<>\"{}|^`\\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
[140s]  PNAME_NS              ::= PN_PREFIX? ':'
[141s]  PNAME_LN              ::= PNAME_NS PN_LOCAL
[142s]  BLANK_NODE_LABEL      ::= '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
[145s]  LANGTAG               ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
[19t]   INTEGER               ::= [+-]? [0-9]+
[20t]   DECIMAL               ::= [+-]? [0-9]* '.' [0-9]+
[21t]   DOUBLE                ::= [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.'? [0-9]+ EXPONENT)
[155s]  EXPONENT              ::= [eE] [+-]? [0-9]+
[156s]  STRING_LITERAL1       ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
[157s]  STRING_LITERAL2       ::= '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
[158s]  STRING_LITERAL_LONG1  ::= "'''" (("'" | "''")? ([^\'\\] | ECHAR | UCHAR))* "'''"
[159s]  STRING_LITERAL_LONG2  ::= '"""' (('"' | '""')? ([^\"\\] | ECHAR | UCHAR))* '"""'
[26t]   UCHAR                 ::= '\\u' HEX HEX HEX HEX | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
[160s]  ECHAR                 ::= '\\' [tbnrf\\\"\']
[162s]  WS                    ::= #x20 | #x9 | #xD | #xA /* #x20=space #x9=character tabulation #xD=carriage return #xA=new line */
[163s]  ANON                  ::= '[' WS* ']'
[164s]  PN_CHARS_BASE         ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
[165s]  PN_CHARS_U            ::= PN_CHARS_BASE | '_'
[167s]  PN_CHARS              ::= PN_CHARS_U | '-' | [0-9] | [#x00B7] | [#x0300-#x036F] | [#x203F-#x2040]
[168s]  PN_PREFIX             ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
[169s]  PN_LOCAL              ::= (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
[170s]  PLX                   ::= PERCENT | PN_LOCAL_ESC
[171s]  PERCENT               ::= '%' HEX HEX
[172s]  HEX                   ::= [0-9] | [A-F] | [a-f]
[173s]  PN_LOCAL_ESC          ::= '\\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')

@pass ::= [ \t\r\n]+
 | "#" [^\r\n]* 

