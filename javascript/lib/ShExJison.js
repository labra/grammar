/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_C":8,"start":9,"shape":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"IT_BASE":17,"IRIREF":18,"IT_PREFIX":19,"PNAME_NS":20,"IT_start":21,"=":22,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QsemanticActions_E_C":23,"shapeLabel":24,"shapeDefinition":25,"semanticActions":26,"IT_VIRTUAL":27,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":28,"{":29,"QoneOfShape_E_Opt":30,"}":31,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":32,"includeSet":33,"inclPropertySet":34,"IT_CLOSED":35,"oneOfShape":36,"&":37,"QshapeLabel_E_Plus":38,"IT_EXTRA":39,"Qpredicate_E_Plus":40,"predicate":41,"someOfShape":42,"Q_O_QGT_PIPE_E_S_QsomeOfShape_E_C_E_Star":43,"O_QGT_PIPE_E_S_QsomeOfShape_E_C":44,"|":45,"groupShape":46,"Q_O_QGT_OR_E_S_QgroupShape_E_C_E_Star":47,"O_QGT_OR_E_S_QgroupShape_E_C":48,"||":49,"unaryShape":50,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Star":51,"QGT_COMMA_E_Opt":52,"O_QGT_COMMA_E_S_QunaryShape_E_C":53,",":54,"unaryShape_right":55,"id":56,"Qcardinality_E_Opt":57,"cardinality":58,"tripleConstraint":59,"include":60,"(":61,")":62,"$":63,"iri":64,"blankNode":65,"valueClass":66,"Qannotation_E_Star":67,"senseFlags":68,"annotation":69,"^":70,"!":71,"IT_LITERAL":72,"QxsFacet_E_Star":73,"O_QIT_IRI_E_Or_QIT_BNODE_E_Or_QIT_NONLITERAL_E_C":74,"QstringFacet_E_Plus":75,"groupShapeConstr":76,"valueSet":77,".":78,"xsFacet":79,"IT_IRI":80,"IT_BNODE":81,"IT_NONLITERAL":82,"stringFacet":83,"shapeOrRef":84,"Q_O_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":85,"O_QIT_OR_E_S_QshapeOrRef_E_C":86,"IT_OR":87,"ATPNAME_LN":88,"ATPNAME_NS":89,"@":90,"numericFacet":91,"IT_PATTERN":92,"string":93,"~":94,"stringLength":95,"INTEGER":96,"IT_LENGTH":97,"IT_MINLENGTH":98,"IT_MAXLENGTH":99,"numericRange":100,"numericLength":101,"IT_MININCLUSIVE":102,"IT_MINEXCLUSIVE":103,"IT_MAXINCLUSIVE":104,"IT_MAXEXCLUSIVE":105,"IT_TOTALDIGITS":106,"IT_FRACTIONDIGITS":107,";":108,"O_Qiri_E_Or_Qliteral_E_C":109,"literal":110,"*":111,"+":112,"?":113,"REPEAT_RANGE":114,"Qvalue_E_Star":115,"value":116,"iriRange":117,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":118,"Qexclusion_E_Plus":119,"Qexclusion_E_Star":120,"exclusion":121,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":122,"-":123,"LANGTAG":124,"^^":125,"DECIMAL":126,"DOUBLE":127,"IT_true":128,"IT_false":129,"STRING_LITERAL1":130,"STRING_LITERAL2":131,"STRING_LITERAL_LONG1":132,"STRING_LITERAL_LONG2":133,"PNAME_LN":134,"a":135,"BLANK_NODE_LABEL":136,"codeDecl":137,"%":138,"CODE":139,"QcodeDecl_E_Plus":140,"QcodeDecl_E_Star":141,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",17:"IT_BASE",18:"IRIREF",19:"IT_PREFIX",20:"PNAME_NS",21:"IT_start",22:"=",27:"IT_VIRTUAL",29:"{",31:"}",35:"IT_CLOSED",37:"&",39:"IT_EXTRA",45:"|",49:"||",54:",",61:"(",62:")",63:"$",70:"^",71:"!",72:"IT_LITERAL",78:".",80:"IT_IRI",81:"IT_BNODE",82:"IT_NONLITERAL",87:"IT_OR",88:"ATPNAME_LN",89:"ATPNAME_NS",90:"@",92:"IT_PATTERN",94:"~",96:"INTEGER",97:"IT_LENGTH",98:"IT_MINLENGTH",99:"IT_MAXLENGTH",102:"IT_MININCLUSIVE",103:"IT_MINEXCLUSIVE",104:"IT_MAXINCLUSIVE",105:"IT_MAXEXCLUSIVE",106:"IT_TOTALDIGITS",107:"IT_FRACTIONDIGITS",108:";",111:"*",112:"+",113:"?",114:"REPEAT_RANGE",123:"-",124:"LANGTAG",125:"^^",126:"DECIMAL",127:"DOUBLE",128:"IT_true",129:"IT_false",130:"STRING_LITERAL1",131:"STRING_LITERAL2",132:"STRING_LITERAL_LONG1",133:"STRING_LITERAL_LONG2",134:"PNAME_LN",135:"a",136:"BLANK_NODE_LABEL",138:"%",139:"CODE"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,1],[8,1],[12,0],[12,2],[14,2],[5,0],[5,1],[13,1],[13,1],[13,1],[7,1],[7,1],[15,2],[16,3],[9,3],[23,1],[23,2],[10,3],[10,4],[25,4],[32,1],[32,1],[32,1],[28,0],[28,2],[30,0],[30,1],[33,2],[38,1],[38,2],[34,2],[40,1],[40,2],[36,2],[44,2],[43,0],[43,2],[42,2],[48,2],[47,0],[47,2],[46,3],[53,2],[51,0],[51,2],[52,0],[52,1],[50,1],[50,2],[57,0],[57,1],[55,1],[55,1],[55,5],[60,2],[56,2],[24,1],[24,1],[59,5],[59,6],[67,0],[67,2],[68,1],[68,2],[68,1],[68,2],[41,1],[66,2],[66,1],[66,2],[66,2],[66,3],[66,1],[66,1],[66,1],[66,1],[73,0],[73,2],[74,1],[74,1],[74,1],[75,1],[75,2],[76,2],[86,2],[85,0],[85,2],[84,1],[84,1],[84,2],[84,1],[79,1],[79,1],[83,2],[83,2],[83,2],[95,1],[95,1],[95,1],[91,2],[91,2],[100,1],[100,1],[100,1],[100,1],[101,1],[101,1],[69,3],[109,1],[109,1],[58,1],[58,1],[58,1],[58,1],[77,3],[115,0],[115,2],[116,1],[116,1],[117,2],[117,2],[120,0],[120,2],[122,2],[118,0],[118,1],[119,1],[119,2],[121,2],[121,3],[110,1],[110,2],[110,3],[110,1],[110,1],[110,1],[110,1],[110,1],[93,1],[93,1],[93,1],[93,1],[64,1],[64,1],[64,1],[64,1],[65,1],[137,2],[137,3],[11,1],[140,1],[140,2],[26,1],[141,0],[141,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        var startObj = Parser.start ? { start: Parser.start } : {};           // Build return object from
        var startAct = Parser.startAct ? { startAct: Parser.startAct } : {};
        var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, // components in parser state
                         startAct, startObj,                                  // maintaining intuitve order.
                         {shapes: Parser.shapes});
        Parser.prefixes = Parser.shapes = Parser.start = Parser.startAct = null; // Reset state.
        base = basePath = baseRoot = '';
        return ret;
      
break;
case 17:
        base = resolveIRI($$[$0])
        basePath = base.replace(/[^\/]*$/, '');
        baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      
break;
case 18: // t: ShExParser-test.js/with pre-defined prefixes
        if (!Parser.prefixes) Parser.prefixes = {};
        $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
        $$[$0] = resolveIRI($$[$0]);
        Parser.prefixes[$$[$0-1]] = $$[$0];
      
break;
case 19:
        Parser.start = $$[$0]; // t: startInline
      
break;
case 21: // t: startInline
        if (!Parser.shapes) Parser.shapes = {};
        this.$ = blank();
        // $$[$0]: t: startInline
        Parser.shapes[this.$] = extend($$[$0-1], $$[$0]);
    
break;
case 22: // t: 1dot
        if (!Parser.shapes) Parser.shapes = {};
        // $$[$0]: t: 1dotShapeCode1
        Parser.shapes[$$[$0-2]] = extend($$[$0-1], $$[$0]);
    
break;
case 23: // t: 1dotVirtual
        if (!Parser.shapes) Parser.shapes = {};
        // $$[$0]: t: 1dotVirtualShapeCode1
        Parser.shapes[$$[$0-2]] = extend({type: null, virtual: true}, $$[$0-1], $$[$0]); // sneak 'virtual' in after 'type'
                                                                         // Type will be overwritten.
    
break;
case 24: // t: 1dotInherit3
        this.$ = extend({ type: "shape", expression: $$[$0-1]}, $$[$0-3]);
      
break;
case 25:this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 26:this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 27:this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 28:this.$ = {};
break;
case 29:
      if ($$[$0][0] === 'closed')
        $$[$0-1]['closed'] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 32:this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 33:this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 34:this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 35:this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 36:this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 37:this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 38:this.$ = $$[$0].length ? { type: "oneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2oneOfdot;
break;
case 39:this.$ = $$[$0] // t: 2oneOfdot;
break;
case 40:this.$ = [] //  t: 2oneOfdot;
break;
case 41:this.$ = appendTo($$[$0-1], $$[$0]) //  t: 2oneOfdot;
break;
case 42:this.$ = $$[$0].length ? { type: "someOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2someOfdot;
break;
case 43:this.$ = $$[$0] // t: 2someOfdot;
break;
case 44:this.$ = [] // t: 2someOfdot;
break;
case 45:this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 46:this.$ = $$[$0-1].length ? { type: "group", expressions: unionAll([$$[$0-2]], $$[$0-1]) } : $$[$0-2] // t: 2groupOfdot;
break;
case 47:this.$ = $$[$0] // t: 2groupOfdot;
break;
case 48:this.$ = [] // t: 2groupOfdot;
break;
case 49:this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 53:this.$ = extend({ id: $$[$0-1] }, $$[$0]);
break;
case 54:this.$ = {} // t: 1dot;
break;
case 58:
        var hasCard = Object.keys($$[$0-1]).length;
        if ($$[$0-3].type === 'group') {
          if (hasCard && ('min' in $$[$0-3] || 'max' in $$[$0-3])
              || $$[$0] && 'semAct' in $$[$0-3]) {
            this.$ = extend({ type: "group" }, $$[$0-1], { expressions: [$$[$0-3]] }, $$[$0]); // t: openopen1dotcloseCode1closeCode2
          } else {
            this.$ = extend($$[$0-3], $$[$0-1], $$[$0]); // t: open3groupdotclose
          }
        } else if (hasCard || $$[$0]) {
          this.$ = extend({ type: "group" }, $$[$0-1], { expressions: [$$[$0-3]] }, $$[$0]); // t: open1dotcloseCode1
        } else {
          this.$ = $$[$0-3]; // t: open1dotclose
        }
      
break;
case 59:this.$ = { type: "include", "include": $$[$0] } // t: 2groupInclude1;
break;
case 60:this.$ = $$[$0] // t: 1iddot;
break;
case 63:
        // $$[$0]: t: 1dotCode1
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1], $$[$0]); // t: 1dot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1dotAnnot3
      
break;
case 64:
        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "tripleConstraint" }, $$[$0-5], { predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1inversedotAnnot3
      
break;
case 65:this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 66:this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 67:this.$ = { inverse: true } // t: 1inversedot;
break;
case 68:this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 69:this.$ = { negated: true } // t: 1negateddot;
break;
case 70:this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 72:this.$ = extend({ type: "valueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 73:this.$ = { type: "valueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 74:this.$ = extend({ type: "valueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 75:this.$ = { type: "valueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t: 1iriRef1;
break;
case 76:this.$ = extend({ type: "valueClass", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0]) // t: 1iriRefLength1;
break;
case 77:this.$ = { type: "valueClass", datatype: $$[$0] } // t: 1datatype;
break;
case 78:this.$ = { type: "valueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 79:this.$ = { type: "valueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 80:this.$ = { type: "valueClass" } // t: 1dot;
break;
case 81:this.$ = {} // t: 1literalPattern;
break;
case 82:this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 83:this.$ = 'iri' // t: 1iriPattern;
break;
case 84:this.$ = 'bnode' // t: 1bnodeLength;
break;
case 85:this.$ = 'nonliteral' // t: 1nonliteralLength;
break;
case 87:this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 88:this.$ = $$[$0].length ? { type: "or", conjuncts: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 1dotRefOr3/1dotRef1;
break;
case 89:this.$ = $$[$0] // t: 1dotRefOr3;
break;
case 90:this.$ = [] // t: 1dotRefOr3;
break;
case 91:this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotRefOr3;
break;
case 92: // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      
break;
case 93: // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
      
break;
case 94: this.$ = $$[$0]; 
break;
case 95: // t: 1dotInline1
        if (!Parser.shapes) Parser.shapes = {};
        this.$ = blank();
        Parser.shapes[this.$] = $$[$0];
      
break;
case 98:this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 99:this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 100:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 101:this.$ = "length" // t: 1literalLength;
break;
case 102:this.$ = "minlength" // t: 1literalMinlength;
break;
case 103:this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 104:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 105:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalTotaldigits;
break;
case 106:this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 107:this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 108:this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 109:this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 110:this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 111:this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 112:this.$ = [$$[$0-1], $$[$0]];
break;
case 115:this.$ = { min:0 } // t: 1cardStar;
break;
case 116:this.$ = { min:1 } // t: 1cardPlus;
break;
case 117:this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 118:
        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
      
break;
case 119:this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 120:this.$ = [] // t: 1val1IRIREF;
break;
case 121:this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 124:
        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 125:this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 126:this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 127:this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 128:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 131:this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 132:this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 133:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 134:this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 136:this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 137:this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 138:this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 139:this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 140:this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 141:this.$ = XSD_TRUE // t: 1val1true;
break;
case 142:this.$ = XSD_FALSE // t: 1val1false;
break;
case 143:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 144:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 145:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 146:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 147:this.$ = resolveIRI($$[$0]) // t: 1dot;
break;
case 148: // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 149: // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 150:this.$ = RDF_TYPE // t: 1AvalA;
break;
case 152:this.$ = keyString('', $$[$0].substr(1, $$[$0].length - 3)) // t: 1dotUnlabeledCode1;
break;
case 153:this.$ = keyString($$[$0-1], $$[$0].substr(1, $$[$0].length - 3)) // t: 1dotCode1;
break;
case 154:
        Parser.startAct = $$[$0]; // t: startCode1
      
break;
case 156:this.$ = extend($$[$0-1], $$[$0]) // t: startCode3;
break;
case 157:this.$ = Object.keys($$[$0]).length ? { semAct: $$[$0] } : null;;
break;
case 158:this.$ = {};
break;
case 159:this.$ = extend($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
}
},
table: [{3:1,4:2,6:[2,2],17:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],27:[2,2],134:[2,2],135:[2,2],136:[2,2],138:[2,2]},{1:[3]},{5:3,6:[2,10],7:4,8:8,9:11,10:12,11:13,14:5,15:6,16:7,17:[1,9],18:[1,21],19:[1,10],20:[1,23],21:[1,14],24:15,27:[1,16],64:18,65:19,134:[1,22],135:[1,24],136:[1,25],137:20,138:[1,26],140:17},{6:[1,27]},{6:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],21:[2,3],27:[2,3],134:[2,3],135:[2,3],136:[2,3],138:[2,3]},{6:[2,11]},{6:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],27:[2,15],134:[2,15],135:[2,15],136:[2,15],138:[2,15]},{6:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],27:[2,16],134:[2,16],135:[2,16],136:[2,16],138:[2,16]},{6:[2,7],12:28,17:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],27:[2,7],134:[2,7],135:[2,7],136:[2,7]},{18:[1,29]},{20:[1,30]},{6:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],27:[2,4],134:[2,4],135:[2,4],136:[2,4]},{6:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],27:[2,5],134:[2,5],135:[2,5],136:[2,5]},{6:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],27:[2,6],134:[2,6],135:[2,6],136:[2,6]},{22:[1,31]},{25:32,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28]},{18:[1,21],20:[1,23],24:34,64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{6:[2,154],17:[2,154],18:[2,154],19:[2,154],20:[2,154],21:[2,154],27:[2,154],134:[2,154],135:[2,154],136:[2,154],137:35,138:[1,26]},{6:[2,61],17:[2,61],18:[2,61],19:[2,61],20:[2,61],21:[2,61],27:[2,61],29:[2,61],31:[2,61],35:[2,61],37:[2,61],39:[2,61],45:[2,61],49:[2,61],54:[2,61],61:[2,61],62:[2,61],70:[2,61],71:[2,61],87:[2,61],92:[2,61],94:[2,61],97:[2,61],98:[2,61],99:[2,61],108:[2,61],111:[2,61],112:[2,61],113:[2,61],114:[2,61],134:[2,61],135:[2,61],136:[2,61],138:[2,61]},{6:[2,62],17:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],27:[2,62],29:[2,62],31:[2,62],35:[2,62],37:[2,62],39:[2,62],45:[2,62],49:[2,62],54:[2,62],61:[2,62],62:[2,62],70:[2,62],71:[2,62],87:[2,62],92:[2,62],94:[2,62],97:[2,62],98:[2,62],99:[2,62],108:[2,62],111:[2,62],112:[2,62],113:[2,62],114:[2,62],134:[2,62],135:[2,62],136:[2,62],138:[2,62]},{6:[2,155],17:[2,155],18:[2,155],19:[2,155],20:[2,155],21:[2,155],27:[2,155],134:[2,155],135:[2,155],136:[2,155],138:[2,155]},{6:[2,147],17:[2,147],18:[2,147],19:[2,147],20:[2,147],21:[2,147],27:[2,147],29:[2,147],31:[2,147],35:[2,147],37:[2,147],39:[2,147],45:[2,147],49:[2,147],54:[2,147],61:[2,147],62:[2,147],70:[2,147],71:[2,147],72:[2,147],78:[2,147],80:[2,147],81:[2,147],82:[2,147],87:[2,147],88:[2,147],89:[2,147],90:[2,147],92:[2,147],94:[2,147],96:[2,147],97:[2,147],98:[2,147],99:[2,147],108:[2,147],111:[2,147],112:[2,147],113:[2,147],114:[2,147],123:[2,147],126:[2,147],127:[2,147],128:[2,147],129:[2,147],130:[2,147],131:[2,147],132:[2,147],133:[2,147],134:[2,147],135:[2,147],136:[2,147],138:[2,147],139:[2,147]},{6:[2,148],17:[2,148],18:[2,148],19:[2,148],20:[2,148],21:[2,148],27:[2,148],29:[2,148],31:[2,148],35:[2,148],37:[2,148],39:[2,148],45:[2,148],49:[2,148],54:[2,148],61:[2,148],62:[2,148],70:[2,148],71:[2,148],72:[2,148],78:[2,148],80:[2,148],81:[2,148],82:[2,148],87:[2,148],88:[2,148],89:[2,148],90:[2,148],92:[2,148],94:[2,148],96:[2,148],97:[2,148],98:[2,148],99:[2,148],108:[2,148],111:[2,148],112:[2,148],113:[2,148],114:[2,148],123:[2,148],126:[2,148],127:[2,148],128:[2,148],129:[2,148],130:[2,148],131:[2,148],132:[2,148],133:[2,148],134:[2,148],135:[2,148],136:[2,148],138:[2,148],139:[2,148]},{6:[2,149],17:[2,149],18:[2,149],19:[2,149],20:[2,149],21:[2,149],27:[2,149],29:[2,149],31:[2,149],35:[2,149],37:[2,149],39:[2,149],45:[2,149],49:[2,149],54:[2,149],61:[2,149],62:[2,149],70:[2,149],71:[2,149],72:[2,149],78:[2,149],80:[2,149],81:[2,149],82:[2,149],87:[2,149],88:[2,149],89:[2,149],90:[2,149],92:[2,149],94:[2,149],96:[2,149],97:[2,149],98:[2,149],99:[2,149],108:[2,149],111:[2,149],112:[2,149],113:[2,149],114:[2,149],123:[2,149],126:[2,149],127:[2,149],128:[2,149],129:[2,149],130:[2,149],131:[2,149],132:[2,149],133:[2,149],134:[2,149],135:[2,149],136:[2,149],138:[2,149],139:[2,149]},{6:[2,150],17:[2,150],18:[2,150],19:[2,150],20:[2,150],21:[2,150],27:[2,150],29:[2,150],31:[2,150],35:[2,150],37:[2,150],39:[2,150],45:[2,150],49:[2,150],54:[2,150],61:[2,150],62:[2,150],70:[2,150],71:[2,150],72:[2,150],78:[2,150],80:[2,150],81:[2,150],82:[2,150],87:[2,150],88:[2,150],89:[2,150],90:[2,150],92:[2,150],94:[2,150],96:[2,150],97:[2,150],98:[2,150],99:[2,150],108:[2,150],111:[2,150],112:[2,150],113:[2,150],114:[2,150],123:[2,150],126:[2,150],127:[2,150],128:[2,150],129:[2,150],130:[2,150],131:[2,150],132:[2,150],133:[2,150],134:[2,150],135:[2,150],136:[2,150],138:[2,150],139:[2,150]},{6:[2,151],17:[2,151],18:[2,151],19:[2,151],20:[2,151],21:[2,151],27:[2,151],29:[2,151],31:[2,151],35:[2,151],37:[2,151],39:[2,151],45:[2,151],49:[2,151],54:[2,151],61:[2,151],62:[2,151],70:[2,151],71:[2,151],87:[2,151],92:[2,151],94:[2,151],97:[2,151],98:[2,151],99:[2,151],108:[2,151],111:[2,151],112:[2,151],113:[2,151],114:[2,151],134:[2,151],135:[2,151],136:[2,151],138:[2,151]},{18:[1,21],20:[1,23],64:37,134:[1,22],135:[1,24],139:[1,36]},{1:[2,1]},{6:[2,9],7:39,9:40,10:41,13:38,15:6,16:7,17:[1,9],18:[1,21],19:[1,10],20:[1,23],21:[1,14],24:15,27:[1,16],64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{6:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],27:[2,17],134:[2,17],135:[2,17],136:[2,17],138:[2,17]},{18:[1,42]},{18:[1,21],20:[1,23],23:43,24:44,25:45,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28],64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{6:[2,158],17:[2,158],18:[2,158],19:[2,158],20:[2,158],21:[2,158],26:46,27:[2,158],134:[2,158],135:[2,158],136:[2,158],138:[2,158],141:47},{29:[1,48],32:49,33:50,34:51,35:[1,52],37:[1,53],39:[1,54]},{25:55,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28]},{6:[2,156],17:[2,156],18:[2,156],19:[2,156],20:[2,156],21:[2,156],27:[2,156],134:[2,156],135:[2,156],136:[2,156],138:[2,156]},{6:[2,152],17:[2,152],18:[2,152],19:[2,152],20:[2,152],21:[2,152],27:[2,152],31:[2,152],45:[2,152],49:[2,152],54:[2,152],62:[2,152],134:[2,152],135:[2,152],136:[2,152],138:[2,152]},{139:[1,56]},{6:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],21:[2,8],27:[2,8],134:[2,8],135:[2,8],136:[2,8]},{6:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],27:[2,12],134:[2,12],135:[2,12],136:[2,12]},{6:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],21:[2,13],27:[2,13],134:[2,13],135:[2,13],136:[2,13]},{6:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],27:[2,14],134:[2,14],135:[2,14],136:[2,14]},{6:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],27:[2,18],134:[2,18],135:[2,18],136:[2,18],138:[2,18]},{6:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],27:[2,19],134:[2,19],135:[2,19],136:[2,19]},{6:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],27:[2,20],134:[2,20],135:[2,20],136:[2,20]},{6:[2,158],17:[2,158],18:[2,158],19:[2,158],20:[2,158],21:[2,158],26:57,27:[2,158],134:[2,158],135:[2,158],136:[2,158],138:[2,158],141:47},{6:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],27:[2,22],134:[2,22],135:[2,22],136:[2,22]},{6:[2,157],17:[2,157],18:[2,157],19:[2,157],20:[2,157],21:[2,157],27:[2,157],31:[2,157],45:[2,157],49:[2,157],54:[2,157],62:[2,157],134:[2,157],135:[2,157],136:[2,157],137:58,138:[1,26]},{18:[1,21],20:[1,23],30:59,31:[2,30],36:60,37:[1,72],41:70,42:61,46:62,50:63,55:64,56:65,59:66,60:67,61:[1,68],63:[1,69],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{29:[2,29],35:[2,29],37:[2,29],39:[2,29]},{29:[2,25],35:[2,25],37:[2,25],39:[2,25]},{29:[2,26],35:[2,26],37:[2,26],39:[2,26]},{29:[2,27],35:[2,27],37:[2,27],39:[2,27]},{18:[1,21],20:[1,23],24:77,38:76,64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{18:[1,21],20:[1,23],40:78,41:79,64:73,134:[1,22],135:[1,24]},{6:[2,158],17:[2,158],18:[2,158],19:[2,158],20:[2,158],21:[2,158],26:80,27:[2,158],134:[2,158],135:[2,158],136:[2,158],138:[2,158],141:47},{6:[2,153],17:[2,153],18:[2,153],19:[2,153],20:[2,153],21:[2,153],27:[2,153],31:[2,153],45:[2,153],49:[2,153],54:[2,153],62:[2,153],134:[2,153],135:[2,153],136:[2,153],138:[2,153]},{6:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],27:[2,21],134:[2,21],135:[2,21],136:[2,21]},{6:[2,159],17:[2,159],18:[2,159],19:[2,159],20:[2,159],21:[2,159],27:[2,159],31:[2,159],45:[2,159],49:[2,159],54:[2,159],62:[2,159],134:[2,159],135:[2,159],136:[2,159],138:[2,159]},{31:[1,81]},{31:[2,31]},{31:[2,40],43:82,45:[2,40],62:[2,40]},{31:[2,44],45:[2,44],47:83,49:[2,44],62:[2,44]},{31:[2,48],45:[2,48],49:[2,48],51:84,54:[2,48],62:[2,48]},{31:[2,52],45:[2,52],49:[2,52],54:[2,52],62:[2,52]},{18:[1,21],20:[1,23],37:[1,72],41:70,55:85,59:66,60:67,61:[1,68],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{31:[2,56],45:[2,56],49:[2,56],54:[2,56],62:[2,56]},{31:[2,57],45:[2,57],49:[2,57],54:[2,57],62:[2,57]},{18:[1,21],20:[1,23],36:86,37:[1,72],41:70,42:61,46:62,50:63,55:64,56:65,59:66,60:67,61:[1,68],63:[1,69],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{18:[1,21],20:[1,23],24:87,64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{18:[1,21],20:[1,23],25:103,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28],61:[1,99],64:91,66:88,72:[1,89],74:90,76:92,77:93,78:[1,94],80:[1,95],81:[1,96],82:[1,97],84:98,88:[1,100],89:[1,101],90:[1,102],134:[1,22],135:[1,24]},{18:[1,21],20:[1,23],41:104,64:73,134:[1,22],135:[1,24]},{18:[1,21],20:[1,23],24:105,64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{18:[2,71],20:[2,71],29:[2,71],35:[2,71],37:[2,71],39:[2,71],61:[2,71],72:[2,71],78:[2,71],80:[2,71],81:[2,71],82:[2,71],88:[2,71],89:[2,71],90:[2,71],134:[2,71],135:[2,71]},{18:[2,67],20:[2,67],71:[1,106],134:[2,67],135:[2,67]},{18:[2,69],20:[2,69],70:[1,107],134:[2,69],135:[2,69]},{18:[1,21],20:[1,23],24:108,29:[2,32],35:[2,32],37:[2,32],39:[2,32],64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{18:[2,33],20:[2,33],29:[2,33],35:[2,33],37:[2,33],39:[2,33],134:[2,33],135:[2,33],136:[2,33]},{18:[1,21],20:[1,23],29:[2,35],35:[2,35],37:[2,35],39:[2,35],41:109,64:73,134:[1,22],135:[1,24]},{18:[2,36],20:[2,36],29:[2,36],35:[2,36],37:[2,36],39:[2,36],134:[2,36],135:[2,36]},{6:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],27:[2,23],134:[2,23],135:[2,23],136:[2,23]},{6:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],27:[2,24],31:[2,24],45:[2,24],49:[2,24],54:[2,24],62:[2,24],87:[2,24],92:[2,24],94:[2,24],97:[2,24],98:[2,24],99:[2,24],108:[2,24],111:[2,24],112:[2,24],113:[2,24],114:[2,24],134:[2,24],135:[2,24],136:[2,24],138:[2,24]},{31:[2,38],44:110,45:[1,111],62:[2,38]},{31:[2,42],45:[2,42],48:112,49:[1,113],62:[2,42]},{31:[2,50],45:[2,50],49:[2,50],52:114,53:115,54:[1,116],62:[2,50]},{31:[2,53],45:[2,53],49:[2,53],54:[2,53],62:[2,53]},{62:[1,117]},{18:[2,60],20:[2,60],37:[2,60],61:[2,60],70:[2,60],71:[2,60],134:[2,60],135:[2,60]},{31:[2,65],45:[2,65],49:[2,65],54:[2,65],62:[2,65],67:118,108:[2,65],111:[2,65],112:[2,65],113:[2,65],114:[2,65],138:[2,65]},{31:[2,81],45:[2,81],49:[2,81],54:[2,81],62:[2,81],73:119,92:[2,81],94:[2,81],97:[2,81],98:[2,81],99:[2,81],102:[2,81],103:[2,81],104:[2,81],105:[2,81],106:[2,81],107:[2,81],108:[2,81],111:[2,81],112:[2,81],113:[2,81],114:[2,81],138:[2,81]},{25:103,28:33,29:[2,28],31:[2,73],35:[2,28],37:[2,28],39:[2,28],45:[2,73],49:[2,73],54:[2,73],62:[2,73],75:120,76:121,83:122,84:98,88:[1,100],89:[1,101],90:[1,102],92:[1,123],94:[1,124],95:125,97:[1,126],98:[1,127],99:[1,128],108:[2,73],111:[2,73],112:[2,73],113:[2,73],114:[2,73],138:[2,73]},{31:[2,77],45:[2,77],49:[2,77],54:[2,77],62:[2,77],108:[2,77],111:[2,77],112:[2,77],113:[2,77],114:[2,77],138:[2,77]},{31:[2,78],45:[2,78],49:[2,78],54:[2,78],62:[2,78],108:[2,78],111:[2,78],112:[2,78],113:[2,78],114:[2,78],138:[2,78]},{31:[2,79],45:[2,79],49:[2,79],54:[2,79],62:[2,79],108:[2,79],111:[2,79],112:[2,79],113:[2,79],114:[2,79],138:[2,79]},{31:[2,80],45:[2,80],49:[2,80],54:[2,80],62:[2,80],108:[2,80],111:[2,80],112:[2,80],113:[2,80],114:[2,80],138:[2,80]},{29:[2,83],31:[2,83],35:[2,83],37:[2,83],39:[2,83],45:[2,83],49:[2,83],54:[2,83],62:[2,83],88:[2,83],89:[2,83],90:[2,83],92:[2,83],94:[2,83],97:[2,83],98:[2,83],99:[2,83],108:[2,83],111:[2,83],112:[2,83],113:[2,83],114:[2,83],138:[2,83]},{29:[2,84],31:[2,84],35:[2,84],37:[2,84],39:[2,84],45:[2,84],49:[2,84],54:[2,84],62:[2,84],88:[2,84],89:[2,84],90:[2,84],92:[2,84],94:[2,84],97:[2,84],98:[2,84],99:[2,84],108:[2,84],111:[2,84],112:[2,84],113:[2,84],114:[2,84],138:[2,84]},{29:[2,85],31:[2,85],35:[2,85],37:[2,85],39:[2,85],45:[2,85],49:[2,85],54:[2,85],62:[2,85],88:[2,85],89:[2,85],90:[2,85],92:[2,85],94:[2,85],97:[2,85],98:[2,85],99:[2,85],108:[2,85],111:[2,85],112:[2,85],113:[2,85],114:[2,85],138:[2,85]},{31:[2,90],45:[2,90],49:[2,90],54:[2,90],62:[2,90],85:129,87:[2,90],92:[2,90],94:[2,90],97:[2,90],98:[2,90],99:[2,90],108:[2,90],111:[2,90],112:[2,90],113:[2,90],114:[2,90],138:[2,90]},{18:[2,120],20:[2,120],62:[2,120],78:[2,120],96:[2,120],115:130,126:[2,120],127:[2,120],128:[2,120],129:[2,120],130:[2,120],131:[2,120],132:[2,120],133:[2,120],134:[2,120],135:[2,120]},{31:[2,92],45:[2,92],49:[2,92],54:[2,92],62:[2,92],87:[2,92],92:[2,92],94:[2,92],97:[2,92],98:[2,92],99:[2,92],108:[2,92],111:[2,92],112:[2,92],113:[2,92],114:[2,92],138:[2,92]},{31:[2,93],45:[2,93],49:[2,93],54:[2,93],62:[2,93],87:[2,93],92:[2,93],94:[2,93],97:[2,93],98:[2,93],99:[2,93],108:[2,93],111:[2,93],112:[2,93],113:[2,93],114:[2,93],138:[2,93]},{18:[1,21],20:[1,23],24:131,64:18,65:19,134:[1,22],135:[1,24],136:[1,25]},{31:[2,95],45:[2,95],49:[2,95],54:[2,95],62:[2,95],87:[2,95],92:[2,95],94:[2,95],97:[2,95],98:[2,95],99:[2,95],108:[2,95],111:[2,95],112:[2,95],113:[2,95],114:[2,95],138:[2,95]},{18:[1,21],20:[1,23],25:103,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28],61:[1,99],64:91,66:132,72:[1,89],74:90,76:92,77:93,78:[1,94],80:[1,95],81:[1,96],82:[1,97],84:98,88:[1,100],89:[1,101],90:[1,102],134:[1,22],135:[1,24]},{31:[2,59],45:[2,59],49:[2,59],54:[2,59],62:[2,59]},{18:[2,68],20:[2,68],134:[2,68],135:[2,68]},{18:[2,70],20:[2,70],134:[2,70],135:[2,70]},{18:[2,34],20:[2,34],29:[2,34],35:[2,34],37:[2,34],39:[2,34],134:[2,34],135:[2,34],136:[2,34]},{18:[2,37],20:[2,37],29:[2,37],35:[2,37],37:[2,37],39:[2,37],134:[2,37],135:[2,37]},{31:[2,41],45:[2,41],62:[2,41]},{18:[1,21],20:[1,23],37:[1,72],41:70,42:133,46:62,50:63,55:64,56:65,59:66,60:67,61:[1,68],63:[1,69],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{31:[2,45],45:[2,45],49:[2,45],62:[2,45]},{18:[1,21],20:[1,23],37:[1,72],41:70,46:134,50:63,55:64,56:65,59:66,60:67,61:[1,68],63:[1,69],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{31:[2,46],45:[2,46],49:[2,46],62:[2,46]},{31:[2,49],45:[2,49],49:[2,49],54:[2,49],62:[2,49]},{18:[1,21],20:[1,23],31:[2,51],37:[1,72],41:70,45:[2,51],49:[2,51],50:135,55:64,56:65,59:66,60:67,61:[1,68],62:[2,51],63:[1,69],64:73,68:71,70:[1,74],71:[1,75],134:[1,22],135:[1,24]},{31:[2,54],45:[2,54],49:[2,54],54:[2,54],57:136,58:137,62:[2,54],111:[1,138],112:[1,139],113:[1,140],114:[1,141],138:[2,54]},{31:[2,54],45:[2,54],49:[2,54],54:[2,54],57:142,58:137,62:[2,54],69:143,108:[1,144],111:[1,138],112:[1,139],113:[1,140],114:[1,141],138:[2,54]},{31:[2,72],45:[2,72],49:[2,72],54:[2,72],62:[2,72],79:145,83:146,91:147,92:[1,123],94:[1,124],95:125,97:[1,126],98:[1,127],99:[1,128],100:148,101:149,102:[1,150],103:[1,151],104:[1,152],105:[1,153],106:[1,154],107:[1,155],108:[2,72],111:[2,72],112:[2,72],113:[2,72],114:[2,72],138:[2,72]},{31:[2,74],45:[2,74],49:[2,74],54:[2,74],62:[2,74],83:156,92:[1,123],94:[1,124],95:125,97:[1,126],98:[1,127],99:[1,128],108:[2,74],111:[2,74],112:[2,74],113:[2,74],114:[2,74],138:[2,74]},{31:[2,75],45:[2,75],49:[2,75],54:[2,75],62:[2,75],75:157,83:122,92:[1,123],94:[1,124],95:125,97:[1,126],98:[1,127],99:[1,128],108:[2,75],111:[2,75],112:[2,75],113:[2,75],114:[2,75],138:[2,75]},{31:[2,86],45:[2,86],49:[2,86],54:[2,86],62:[2,86],92:[2,86],94:[2,86],97:[2,86],98:[2,86],99:[2,86],108:[2,86],111:[2,86],112:[2,86],113:[2,86],114:[2,86],138:[2,86]},{93:158,130:[1,159],131:[1,160],132:[1,161],133:[1,162]},{93:163,130:[1,159],131:[1,160],132:[1,161],133:[1,162]},{96:[1,164]},{96:[2,101]},{96:[2,102]},{96:[2,103]},{31:[2,88],45:[2,88],49:[2,88],54:[2,88],62:[2,88],86:165,87:[1,166],92:[2,88],94:[2,88],97:[2,88],98:[2,88],99:[2,88],108:[2,88],111:[2,88],112:[2,88],113:[2,88],114:[2,88],138:[2,88]},{18:[1,21],20:[1,23],62:[1,167],64:171,78:[1,172],93:173,96:[1,174],110:170,116:168,117:169,126:[1,175],127:[1,176],128:[1,177],129:[1,178],130:[1,159],131:[1,160],132:[1,161],133:[1,162],134:[1,22],135:[1,24]},{31:[2,94],45:[2,94],49:[2,94],54:[2,94],62:[2,94],87:[2,94],92:[2,94],94:[2,94],97:[2,94],98:[2,94],99:[2,94],108:[2,94],111:[2,94],112:[2,94],113:[2,94],114:[2,94],138:[2,94]},{31:[2,65],45:[2,65],49:[2,65],54:[2,65],62:[2,65],67:179,108:[2,65],111:[2,65],112:[2,65],113:[2,65],114:[2,65],138:[2,65]},{31:[2,39],45:[2,39],62:[2,39]},{31:[2,43],45:[2,43],49:[2,43],62:[2,43]},{31:[2,47],45:[2,47],49:[2,47],54:[2,47],62:[2,47]},{26:180,31:[2,158],45:[2,158],49:[2,158],54:[2,158],62:[2,158],138:[2,158],141:47},{31:[2,55],45:[2,55],49:[2,55],54:[2,55],62:[2,55],138:[2,55]},{31:[2,115],45:[2,115],49:[2,115],54:[2,115],62:[2,115],138:[2,115]},{31:[2,116],45:[2,116],49:[2,116],54:[2,116],62:[2,116],138:[2,116]},{31:[2,117],45:[2,117],49:[2,117],54:[2,117],62:[2,117],138:[2,117]},{31:[2,118],45:[2,118],49:[2,118],54:[2,118],62:[2,118],138:[2,118]},{26:181,31:[2,158],45:[2,158],49:[2,158],54:[2,158],62:[2,158],138:[2,158],141:47},{31:[2,66],45:[2,66],49:[2,66],54:[2,66],62:[2,66],108:[2,66],111:[2,66],112:[2,66],113:[2,66],114:[2,66],138:[2,66]},{18:[1,21],20:[1,23],64:182,134:[1,22],135:[1,24]},{31:[2,82],45:[2,82],49:[2,82],54:[2,82],62:[2,82],92:[2,82],94:[2,82],97:[2,82],98:[2,82],99:[2,82],102:[2,82],103:[2,82],104:[2,82],105:[2,82],106:[2,82],107:[2,82],108:[2,82],111:[2,82],112:[2,82],113:[2,82],114:[2,82],138:[2,82]},{31:[2,96],45:[2,96],49:[2,96],54:[2,96],62:[2,96],92:[2,96],94:[2,96],97:[2,96],98:[2,96],99:[2,96],102:[2,96],103:[2,96],104:[2,96],105:[2,96],106:[2,96],107:[2,96],108:[2,96],111:[2,96],112:[2,96],113:[2,96],114:[2,96],138:[2,96]},{31:[2,97],45:[2,97],49:[2,97],54:[2,97],62:[2,97],92:[2,97],94:[2,97],97:[2,97],98:[2,97],99:[2,97],102:[2,97],103:[2,97],104:[2,97],105:[2,97],106:[2,97],107:[2,97],108:[2,97],111:[2,97],112:[2,97],113:[2,97],114:[2,97],138:[2,97]},{96:[1,183]},{96:[1,184]},{96:[2,106]},{96:[2,107]},{96:[2,108]},{96:[2,109]},{96:[2,110]},{96:[2,111]},{31:[2,87],45:[2,87],49:[2,87],54:[2,87],62:[2,87],92:[2,87],94:[2,87],97:[2,87],98:[2,87],99:[2,87],108:[2,87],111:[2,87],112:[2,87],113:[2,87],114:[2,87],138:[2,87]},{31:[2,76],45:[2,76],49:[2,76],54:[2,76],62:[2,76],83:156,92:[1,123],94:[1,124],95:125,97:[1,126],98:[1,127],99:[1,128],108:[2,76],111:[2,76],112:[2,76],113:[2,76],114:[2,76],138:[2,76]},{31:[2,98],45:[2,98],49:[2,98],54:[2,98],62:[2,98],92:[2,98],94:[2,98],97:[2,98],98:[2,98],99:[2,98],102:[2,98],103:[2,98],104:[2,98],105:[2,98],106:[2,98],107:[2,98],108:[2,98],111:[2,98],112:[2,98],113:[2,98],114:[2,98],138:[2,98]},{18:[2,143],20:[2,143],31:[2,143],45:[2,143],49:[2,143],54:[2,143],62:[2,143],78:[2,143],92:[2,143],94:[2,143],96:[2,143],97:[2,143],98:[2,143],99:[2,143],102:[2,143],103:[2,143],104:[2,143],105:[2,143],106:[2,143],107:[2,143],108:[2,143],111:[2,143],112:[2,143],113:[2,143],114:[2,143],124:[2,143],125:[2,143],126:[2,143],127:[2,143],128:[2,143],129:[2,143],130:[2,143],131:[2,143],132:[2,143],133:[2,143],134:[2,143],135:[2,143],138:[2,143]},{18:[2,144],20:[2,144],31:[2,144],45:[2,144],49:[2,144],54:[2,144],62:[2,144],78:[2,144],92:[2,144],94:[2,144],96:[2,144],97:[2,144],98:[2,144],99:[2,144],102:[2,144],103:[2,144],104:[2,144],105:[2,144],106:[2,144],107:[2,144],108:[2,144],111:[2,144],112:[2,144],113:[2,144],114:[2,144],124:[2,144],125:[2,144],126:[2,144],127:[2,144],128:[2,144],129:[2,144],130:[2,144],131:[2,144],132:[2,144],133:[2,144],134:[2,144],135:[2,144],138:[2,144]},{18:[2,145],20:[2,145],31:[2,145],45:[2,145],49:[2,145],54:[2,145],62:[2,145],78:[2,145],92:[2,145],94:[2,145],96:[2,145],97:[2,145],98:[2,145],99:[2,145],102:[2,145],103:[2,145],104:[2,145],105:[2,145],106:[2,145],107:[2,145],108:[2,145],111:[2,145],112:[2,145],113:[2,145],114:[2,145],124:[2,145],125:[2,145],126:[2,145],127:[2,145],128:[2,145],129:[2,145],130:[2,145],131:[2,145],132:[2,145],133:[2,145],134:[2,145],135:[2,145],138:[2,145]},{18:[2,146],20:[2,146],31:[2,146],45:[2,146],49:[2,146],54:[2,146],62:[2,146],78:[2,146],92:[2,146],94:[2,146],96:[2,146],97:[2,146],98:[2,146],99:[2,146],102:[2,146],103:[2,146],104:[2,146],105:[2,146],106:[2,146],107:[2,146],108:[2,146],111:[2,146],112:[2,146],113:[2,146],114:[2,146],124:[2,146],125:[2,146],126:[2,146],127:[2,146],128:[2,146],129:[2,146],130:[2,146],131:[2,146],132:[2,146],133:[2,146],134:[2,146],135:[2,146],138:[2,146]},{31:[2,99],45:[2,99],49:[2,99],54:[2,99],62:[2,99],92:[2,99],94:[2,99],97:[2,99],98:[2,99],99:[2,99],102:[2,99],103:[2,99],104:[2,99],105:[2,99],106:[2,99],107:[2,99],108:[2,99],111:[2,99],112:[2,99],113:[2,99],114:[2,99],138:[2,99]},{31:[2,100],45:[2,100],49:[2,100],54:[2,100],62:[2,100],92:[2,100],94:[2,100],97:[2,100],98:[2,100],99:[2,100],102:[2,100],103:[2,100],104:[2,100],105:[2,100],106:[2,100],107:[2,100],108:[2,100],111:[2,100],112:[2,100],113:[2,100],114:[2,100],138:[2,100]},{31:[2,91],45:[2,91],49:[2,91],54:[2,91],62:[2,91],87:[2,91],92:[2,91],94:[2,91],97:[2,91],98:[2,91],99:[2,91],108:[2,91],111:[2,91],112:[2,91],113:[2,91],114:[2,91],138:[2,91]},{25:103,28:33,29:[2,28],35:[2,28],37:[2,28],39:[2,28],84:185,88:[1,100],89:[1,101],90:[1,102]},{31:[2,119],45:[2,119],49:[2,119],54:[2,119],62:[2,119],108:[2,119],111:[2,119],112:[2,119],113:[2,119],114:[2,119],138:[2,119]},{18:[2,121],20:[2,121],62:[2,121],78:[2,121],96:[2,121],126:[2,121],127:[2,121],128:[2,121],129:[2,121],130:[2,121],131:[2,121],132:[2,121],133:[2,121],134:[2,121],135:[2,121]},{18:[2,122],20:[2,122],62:[2,122],78:[2,122],96:[2,122],126:[2,122],127:[2,122],128:[2,122],129:[2,122],130:[2,122],131:[2,122],132:[2,122],133:[2,122],134:[2,122],135:[2,122]},{18:[2,123],20:[2,123],62:[2,123],78:[2,123],96:[2,123],126:[2,123],127:[2,123],128:[2,123],129:[2,123],130:[2,123],131:[2,123],132:[2,123],133:[2,123],134:[2,123],135:[2,123]},{18:[2,129],20:[2,129],62:[2,129],78:[2,129],94:[1,188],96:[2,129],118:186,122:187,126:[2,129],127:[2,129],128:[2,129],129:[2,129],130:[2,129],131:[2,129],132:[2,129],133:[2,129],134:[2,129],135:[2,129]},{119:189,121:190,123:[1,191]},{18:[2,135],20:[2,135],31:[2,135],45:[2,135],49:[2,135],54:[2,135],62:[2,135],78:[2,135],96:[2,135],108:[2,135],111:[2,135],112:[2,135],113:[2,135],114:[2,135],124:[1,192],125:[1,193],126:[2,135],127:[2,135],128:[2,135],129:[2,135],130:[2,135],131:[2,135],132:[2,135],133:[2,135],134:[2,135],135:[2,135],138:[2,135]},{18:[2,138],20:[2,138],31:[2,138],45:[2,138],49:[2,138],54:[2,138],62:[2,138],78:[2,138],96:[2,138],108:[2,138],111:[2,138],112:[2,138],113:[2,138],114:[2,138],126:[2,138],127:[2,138],128:[2,138],129:[2,138],130:[2,138],131:[2,138],132:[2,138],133:[2,138],134:[2,138],135:[2,138],138:[2,138]},{18:[2,139],20:[2,139],31:[2,139],45:[2,139],49:[2,139],54:[2,139],62:[2,139],78:[2,139],96:[2,139],108:[2,139],111:[2,139],112:[2,139],113:[2,139],114:[2,139],126:[2,139],127:[2,139],128:[2,139],129:[2,139],130:[2,139],131:[2,139],132:[2,139],133:[2,139],134:[2,139],135:[2,139],138:[2,139]},{18:[2,140],20:[2,140],31:[2,140],45:[2,140],49:[2,140],54:[2,140],62:[2,140],78:[2,140],96:[2,140],108:[2,140],111:[2,140],112:[2,140],113:[2,140],114:[2,140],126:[2,140],127:[2,140],128:[2,140],129:[2,140],130:[2,140],131:[2,140],132:[2,140],133:[2,140],134:[2,140],135:[2,140],138:[2,140]},{18:[2,141],20:[2,141],31:[2,141],45:[2,141],49:[2,141],54:[2,141],62:[2,141],78:[2,141],96:[2,141],108:[2,141],111:[2,141],112:[2,141],113:[2,141],114:[2,141],126:[2,141],127:[2,141],128:[2,141],129:[2,141],130:[2,141],131:[2,141],132:[2,141],133:[2,141],134:[2,141],135:[2,141],138:[2,141]},{18:[2,142],20:[2,142],31:[2,142],45:[2,142],49:[2,142],54:[2,142],62:[2,142],78:[2,142],96:[2,142],108:[2,142],111:[2,142],112:[2,142],113:[2,142],114:[2,142],126:[2,142],127:[2,142],128:[2,142],129:[2,142],130:[2,142],131:[2,142],132:[2,142],133:[2,142],134:[2,142],135:[2,142],138:[2,142]},{31:[2,54],45:[2,54],49:[2,54],54:[2,54],57:194,58:137,62:[2,54],69:143,108:[1,144],111:[1,138],112:[1,139],113:[1,140],114:[1,141],138:[2,54]},{31:[2,58],45:[2,58],49:[2,58],54:[2,58],62:[2,58]},{31:[2,63],45:[2,63],49:[2,63],54:[2,63],62:[2,63]},{18:[1,21],20:[1,23],64:196,93:173,96:[1,174],109:195,110:197,126:[1,175],127:[1,176],128:[1,177],129:[1,178],130:[1,159],131:[1,160],132:[1,161],133:[1,162],134:[1,22],135:[1,24]},{31:[2,104],45:[2,104],49:[2,104],54:[2,104],62:[2,104],92:[2,104],94:[2,104],97:[2,104],98:[2,104],99:[2,104],102:[2,104],103:[2,104],104:[2,104],105:[2,104],106:[2,104],107:[2,104],108:[2,104],111:[2,104],112:[2,104],113:[2,104],114:[2,104],138:[2,104]},{31:[2,105],45:[2,105],49:[2,105],54:[2,105],62:[2,105],92:[2,105],94:[2,105],97:[2,105],98:[2,105],99:[2,105],102:[2,105],103:[2,105],104:[2,105],105:[2,105],106:[2,105],107:[2,105],108:[2,105],111:[2,105],112:[2,105],113:[2,105],114:[2,105],138:[2,105]},{31:[2,89],45:[2,89],49:[2,89],54:[2,89],62:[2,89],87:[2,89],92:[2,89],94:[2,89],97:[2,89],98:[2,89],99:[2,89],108:[2,89],111:[2,89],112:[2,89],113:[2,89],114:[2,89],138:[2,89]},{18:[2,124],20:[2,124],62:[2,124],78:[2,124],96:[2,124],126:[2,124],127:[2,124],128:[2,124],129:[2,124],130:[2,124],131:[2,124],132:[2,124],133:[2,124],134:[2,124],135:[2,124]},{18:[2,130],20:[2,130],62:[2,130],78:[2,130],96:[2,130],126:[2,130],127:[2,130],128:[2,130],129:[2,130],130:[2,130],131:[2,130],132:[2,130],133:[2,130],134:[2,130],135:[2,130]},{18:[2,126],20:[2,126],62:[2,126],78:[2,126],96:[2,126],120:198,123:[2,126],126:[2,126],127:[2,126],128:[2,126],129:[2,126],130:[2,126],131:[2,126],132:[2,126],133:[2,126],134:[2,126],135:[2,126]},{18:[2,125],20:[2,125],62:[2,125],78:[2,125],96:[2,125],121:199,123:[1,191],126:[2,125],127:[2,125],128:[2,125],129:[2,125],130:[2,125],131:[2,125],132:[2,125],133:[2,125],134:[2,125],135:[2,125]},{18:[2,131],20:[2,131],62:[2,131],78:[2,131],96:[2,131],123:[2,131],126:[2,131],127:[2,131],128:[2,131],129:[2,131],130:[2,131],131:[2,131],132:[2,131],133:[2,131],134:[2,131],135:[2,131]},{18:[1,21],20:[1,23],64:200,134:[1,22],135:[1,24]},{18:[2,136],20:[2,136],31:[2,136],45:[2,136],49:[2,136],54:[2,136],62:[2,136],78:[2,136],96:[2,136],108:[2,136],111:[2,136],112:[2,136],113:[2,136],114:[2,136],126:[2,136],127:[2,136],128:[2,136],129:[2,136],130:[2,136],131:[2,136],132:[2,136],133:[2,136],134:[2,136],135:[2,136],138:[2,136]},{18:[1,21],20:[1,23],64:201,134:[1,22],135:[1,24]},{26:202,31:[2,158],45:[2,158],49:[2,158],54:[2,158],62:[2,158],138:[2,158],141:47},{31:[2,112],45:[2,112],49:[2,112],54:[2,112],62:[2,112],108:[2,112],111:[2,112],112:[2,112],113:[2,112],114:[2,112],138:[2,112]},{31:[2,113],45:[2,113],49:[2,113],54:[2,113],62:[2,113],108:[2,113],111:[2,113],112:[2,113],113:[2,113],114:[2,113],138:[2,113]},{31:[2,114],45:[2,114],49:[2,114],54:[2,114],62:[2,114],108:[2,114],111:[2,114],112:[2,114],113:[2,114],114:[2,114],138:[2,114]},{18:[2,128],20:[2,128],62:[2,128],78:[2,128],96:[2,128],121:203,123:[1,191],126:[2,128],127:[2,128],128:[2,128],129:[2,128],130:[2,128],131:[2,128],132:[2,128],133:[2,128],134:[2,128],135:[2,128]},{18:[2,132],20:[2,132],62:[2,132],78:[2,132],96:[2,132],123:[2,132],126:[2,132],127:[2,132],128:[2,132],129:[2,132],130:[2,132],131:[2,132],132:[2,132],133:[2,132],134:[2,132],135:[2,132]},{18:[2,133],20:[2,133],62:[2,133],78:[2,133],94:[1,204],96:[2,133],123:[2,133],126:[2,133],127:[2,133],128:[2,133],129:[2,133],130:[2,133],131:[2,133],132:[2,133],133:[2,133],134:[2,133],135:[2,133]},{18:[2,137],20:[2,137],31:[2,137],45:[2,137],49:[2,137],54:[2,137],62:[2,137],78:[2,137],96:[2,137],108:[2,137],111:[2,137],112:[2,137],113:[2,137],114:[2,137],126:[2,137],127:[2,137],128:[2,137],129:[2,137],130:[2,137],131:[2,137],132:[2,137],133:[2,137],134:[2,137],135:[2,137],138:[2,137]},{31:[2,64],45:[2,64],49:[2,64],54:[2,64],62:[2,64]},{18:[2,127],20:[2,127],62:[2,127],78:[2,127],96:[2,127],123:[2,127],126:[2,127],127:[2,127],128:[2,127],129:[2,127],130:[2,127],131:[2,127],132:[2,127],133:[2,127],134:[2,127],135:[2,127]},{18:[2,134],20:[2,134],62:[2,134],78:[2,134],96:[2,134],123:[2,134],126:[2,134],127:[2,134],128:[2,134],129:[2,134],130:[2,134],131:[2,134],132:[2,134],133:[2,134],134:[2,134],135:[2,134]}],
defaultActions: {5:[2,11],27:[2,1],60:[2,31],126:[2,101],127:[2,102],128:[2,103],150:[2,106],151:[2,107],152:[2,108],153:[2,109],154:[2,110],155:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';


  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Return object with p1 key, p2 integer value
  function keyInt(key, val) {
    var ret = {};
    ret[key] = parseInt(val, 10);
    return ret;
  }

  // Return object with p1 key, p2 string value
  function keyString(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 139;
break;
case 2:return 88;
break;
case 3:return 89;
break;
case 4:return 124;
break;
case 5:return 90;
break;
case 6:return 134;
break;
case 7:return 17;
break;
case 8:return 19;
break;
case 9:return 21;
break;
case 10:return 27;
break;
case 11:return 114;
break;
case 12:return 35;
break;
case 13:return 39;
break;
case 14:return 72;
break;
case 15:return 81;
break;
case 16:return 80;
break;
case 17:return 82;
break;
case 18:return 92;
break;
case 19:return 'IT_AND';
break;
case 20:return 87;
break;
case 21:return 102;
break;
case 22:return 103;
break;
case 23:return 104;
break;
case 24:return 105;
break;
case 25:return 97;
break;
case 26:return 98;
break;
case 27:return 99;
break;
case 28:return 106;
break;
case 29:return 107;
break;
case 30:return 22;
break;
case 31:return 29;
break;
case 32:return 31;
break;
case 33:return 37;
break;
case 34:return 49;
break;
case 35:return 45;
break;
case 36:return 54;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 63;
break;
case 40:return 71;
break;
case 41:return 125;
break;
case 42:return 70;
break;
case 43:return 78;
break;
case 44:return 94;
break;
case 45:return 108;
break;
case 46:return 111;
break;
case 47:return 112;
break;
case 48:return 113;
break;
case 49:return 123;
break;
case 50:return 138;
break;
case 51:return 128;
break;
case 52:return 129;
break;
case 53:return 127;
break;
case 54:return 126;
break;
case 55:return 96;
break;
case 56:return 'ANON';
break;
case 57:return 18;
break;
case 58:return 20;
break;
case 59:return 135;
break;
case 60:return 136;
break;
case 61:return 132;
break;
case 62:return 133;
break;
case 63:return 130;
break;
case 64:return 131;
break;
case 65:return 6
break;
case 66:return 'invalid character'
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(\{([^%]|\\%)*%\}))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:start\b)/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
