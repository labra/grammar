/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,17,18,19,20,21,27,134,135,136,138],$V1=[1,9],$V2=[1,21],$V3=[1,10],$V4=[1,23],$V5=[1,14],$V6=[1,16],$V7=[1,22],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[6,17,18,19,20,21,27,134,135,136],$Vc=[29,35,37,39],$Vd=[2,28],$Ve=[6,17,18,19,20,21,27,29,31,35,37,39,45,49,54,61,62,70,71,87,92,94,97,98,99,108,111,112,113,114,134,135,136,138],$Vf=[6,17,18,19,20,21,27,29,31,35,37,39,45,49,54,61,62,70,71,72,78,80,81,82,87,88,89,90,92,94,96,97,98,99,102,103,104,105,106,107,108,111,112,113,114,123,126,127,128,129,130,131,132,133,134,135,136,138,139],$Vg=[2,158],$Vh=[6,17,18,19,20,21,27,31,45,49,54,62,134,135,136,138],$Vi=[1,72],$Vj=[1,68],$Vk=[1,69],$Vl=[1,74],$Vm=[1,75],$Vn=[31,45,62],$Vo=[31,45,49,62],$Vp=[31,45,49,54,62],$Vq=[1,99],$Vr=[1,89],$Vs=[1,94],$Vt=[1,95],$Vu=[1,96],$Vv=[1,97],$Vw=[1,100],$Vx=[1,101],$Vy=[1,102],$Vz=[18,20,134,135],$VA=[18,20,29,35,37,39,134,135,136],$VB=[18,20,29,35,37,39,134,135],$VC=[31,45,49,54,62,108,111,112,113,114,138],$VD=[2,65],$VE=[31,45,49,54,62,92,94,97,98,99,102,103,104,105,106,107,108,111,112,113,114,138],$VF=[2,81],$VG=[1,123],$VH=[1,124],$VI=[1,126],$VJ=[1,127],$VK=[1,128],$VL=[29,31,35,37,39,45,49,54,62,88,89,90,92,94,97,98,99,108,111,112,113,114,138],$VM=[31,45,49,54,62,87,92,94,97,98,99,108,111,112,113,114,138],$VN=[18,20,62,78,96,126,127,128,129,130,131,132,133,134,135],$VO=[31,45,49,54,62,138],$VP=[2,54],$VQ=[1,139],$VR=[1,140],$VS=[1,141],$VT=[1,142],$VU=[1,145],$VV=[1,151],$VW=[1,152],$VX=[1,153],$VY=[1,154],$VZ=[1,155],$V_=[1,156],$V$=[31,45,49,54,62,92,94,97,98,99,108,111,112,113,114,138],$V01=[1,160],$V11=[1,161],$V21=[1,162],$V31=[1,163],$V41=[1,175],$V51=[1,176],$V61=[1,177],$V71=[1,178],$V81=[1,179],$V91=[31,45,49,54,62,108,138],$Va1=[18,20,31,45,49,54,62,78,92,94,96,97,98,99,102,103,104,105,106,107,108,111,112,113,114,124,125,126,127,128,129,130,131,132,133,134,135,138],$Vb1=[1,192],$Vc1=[18,20,31,45,49,54,62,78,96,108,111,112,113,114,126,127,128,129,130,131,132,133,134,135,138],$Vd1=[18,20,62,78,96,123,126,127,128,129,130,131,132,133,134,135];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_C":8,"start":9,"shape":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_Qstart_E_Or_Qshape_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"IT_BASE":17,"IRIREF":18,"IT_PREFIX":19,"PNAME_NS":20,"IT_start":21,"=":22,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QsemanticActions_E_C":23,"shapeLabel":24,"shapeDefinition":25,"semanticActions":26,"IT_VIRTUAL":27,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":28,"{":29,"QoneOfShape_E_Opt":30,"}":31,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":32,"includeSet":33,"inclPropertySet":34,"IT_CLOSED":35,"oneOfShape":36,"&":37,"QshapeLabel_E_Plus":38,"IT_EXTRA":39,"Qpredicate_E_Plus":40,"predicate":41,"someOfShape":42,"Q_O_QGT_PIPE_E_S_QsomeOfShape_E_C_E_Star":43,"O_QGT_PIPE_E_S_QsomeOfShape_E_C":44,"|":45,"groupShape":46,"Q_O_QGT_OR_E_S_QgroupShape_E_C_E_Star":47,"O_QGT_OR_E_S_QgroupShape_E_C":48,"||":49,"unaryShape":50,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Star":51,"QGT_COMMA_E_Opt":52,"O_QGT_COMMA_E_S_QunaryShape_E_C":53,",":54,"unaryShape_right":55,"id":56,"Qcardinality_E_Opt":57,"cardinality":58,"tripleConstraint":59,"include":60,"(":61,")":62,"$":63,"iri":64,"blankNode":65,"valueClass":66,"Qannotation_E_Star":67,"senseFlags":68,"annotation":69,"^":70,"!":71,"IT_LITERAL":72,"QxsFacet_E_Star":73,"O_QIT_IRI_E_Or_QIT_BNODE_E_Or_QIT_NONLITERAL_E_C":74,"QstringFacet_E_Plus":75,"groupShapeConstr":76,"valueSet":77,".":78,"xsFacet":79,"IT_IRI":80,"IT_BNODE":81,"IT_NONLITERAL":82,"stringFacet":83,"shapeOrRef":84,"Q_O_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":85,"O_QIT_OR_E_S_QshapeOrRef_E_C":86,"IT_OR":87,"ATPNAME_LN":88,"ATPNAME_NS":89,"@":90,"numericFacet":91,"IT_PATTERN":92,"string":93,"~":94,"stringLength":95,"INTEGER":96,"IT_LENGTH":97,"IT_MINLENGTH":98,"IT_MAXLENGTH":99,"numericRange":100,"numericLength":101,"IT_MININCLUSIVE":102,"IT_MINEXCLUSIVE":103,"IT_MAXINCLUSIVE":104,"IT_MAXEXCLUSIVE":105,"IT_TOTALDIGITS":106,"IT_FRACTIONDIGITS":107,";":108,"O_Qiri_E_Or_Qliteral_E_C":109,"literal":110,"*":111,"+":112,"?":113,"REPEAT_RANGE":114,"Qvalue_E_Star":115,"value":116,"iriRange":117,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":118,"Qexclusion_E_Plus":119,"Qexclusion_E_Star":120,"exclusion":121,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":122,"-":123,"LANGTAG":124,"^^":125,"DECIMAL":126,"DOUBLE":127,"IT_true":128,"IT_false":129,"STRING_LITERAL1":130,"STRING_LITERAL2":131,"STRING_LITERAL_LONG1":132,"STRING_LITERAL_LONG2":133,"PNAME_LN":134,"a":135,"BLANK_NODE_LABEL":136,"codeDecl":137,"%":138,"CODE":139,"QcodeDecl_E_Plus":140,"QcodeDecl_E_Star":141,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",17:"IT_BASE",18:"IRIREF",19:"IT_PREFIX",20:"PNAME_NS",21:"IT_start",22:"=",27:"IT_VIRTUAL",29:"{",31:"}",35:"IT_CLOSED",37:"&",39:"IT_EXTRA",45:"|",49:"||",54:",",61:"(",62:")",63:"$",70:"^",71:"!",72:"IT_LITERAL",78:".",80:"IT_IRI",81:"IT_BNODE",82:"IT_NONLITERAL",87:"IT_OR",88:"ATPNAME_LN",89:"ATPNAME_NS",90:"@",92:"IT_PATTERN",94:"~",96:"INTEGER",97:"IT_LENGTH",98:"IT_MINLENGTH",99:"IT_MAXLENGTH",102:"IT_MININCLUSIVE",103:"IT_MINEXCLUSIVE",104:"IT_MAXINCLUSIVE",105:"IT_MAXEXCLUSIVE",106:"IT_TOTALDIGITS",107:"IT_FRACTIONDIGITS",108:";",111:"*",112:"+",113:"?",114:"REPEAT_RANGE",123:"-",124:"LANGTAG",125:"^^",126:"DECIMAL",127:"DOUBLE",128:"IT_true",129:"IT_false",130:"STRING_LITERAL1",131:"STRING_LITERAL2",132:"STRING_LITERAL_LONG1",133:"STRING_LITERAL_LONG2",134:"PNAME_LN",135:"a",136:"BLANK_NODE_LABEL",138:"%",139:"CODE"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,1],[8,1],[12,0],[12,2],[14,2],[5,0],[5,1],[13,1],[13,1],[13,1],[7,1],[7,1],[15,2],[16,3],[9,3],[23,1],[23,2],[10,3],[10,4],[25,4],[32,1],[32,1],[32,1],[28,0],[28,2],[30,0],[30,1],[33,2],[38,1],[38,2],[34,2],[40,1],[40,2],[36,2],[44,2],[43,0],[43,2],[42,2],[48,2],[47,0],[47,2],[46,3],[53,2],[51,0],[51,2],[52,0],[52,1],[50,1],[50,2],[57,0],[57,1],[55,1],[55,1],[55,5],[60,2],[56,2],[24,1],[24,1],[59,5],[59,6],[67,0],[67,2],[68,1],[68,2],[68,1],[68,2],[41,1],[66,2],[66,1],[66,2],[66,2],[66,3],[66,2],[66,1],[66,1],[66,1],[73,0],[73,2],[74,1],[74,1],[74,1],[75,1],[75,2],[76,2],[86,2],[85,0],[85,2],[84,1],[84,1],[84,2],[84,1],[79,1],[79,1],[83,2],[83,2],[83,2],[95,1],[95,1],[95,1],[91,2],[91,2],[100,1],[100,1],[100,1],[100,1],[101,1],[101,1],[69,3],[109,1],[109,1],[58,1],[58,1],[58,1],[58,1],[77,3],[115,0],[115,2],[116,1],[116,1],[117,2],[117,2],[120,0],[120,2],[122,2],[118,0],[118,1],[119,1],[119,2],[121,2],[121,3],[110,1],[110,2],[110,3],[110,1],[110,1],[110,1],[110,1],[110,1],[93,1],[93,1],[93,1],[93,1],[64,1],[64,1],[64,1],[64,1],[65,1],[137,2],[137,3],[11,1],[140,1],[140,2],[26,1],[141,0],[141,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var startObj = Parser.start ? { start: Parser.start } : {};           // Build return object from
        var startAct = Parser.startAct ? { startAct: Parser.startAct } : {};
        var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, // components in parser state
                         startAct, startObj,                                  // maintaining intuitve order.
                         {shapes: Parser.shapes});
        Parser.prefixes = Parser.shapes = Parser.start = Parser.startAct = null; // Reset state.
        base = basePath = baseRoot = '';
        return ret;
      
break;
case 17:
 // t: @@
        base = resolveIRI($$[$0])
        basePath = base.replace(/[^\/]*$/, '');
        baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      
break;
case 18:
 // t: ShExParser-test.js/with pre-defined prefixes
        if (!Parser.prefixes) Parser.prefixes = {};
        $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
        $$[$0] = resolveIRI($$[$0]);
        Parser.prefixes[$$[$0-1]] = $$[$0];
      
break;
case 19:

        if (Parser.start)
	  error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 21:
 // t: startInline / startInline
        addShape(this.$ = blank(), extend($$[$0-1], $$[$0]));
    
break;
case 22:
 // t: 1dot
	addShape($$[$0-2], extend($$[$0-1], $$[$0]));
    
break;
case 23:
 // t: 1dotVirtual
        // sneak 'virtual' in after 'type'
        // Type will be overwritten.
        addShape($$[$0-2], extend({type: null, virtual: true}, $$[$0-1], $$[$0])) // $$[$0]: t: 1dotVirtualShapeCode1
    
break;
case 24:
 // t: 1dotInherit3
	var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : {}; // t: 0, 0Inherit1
        this.$ = extend({ type: "shape"}, exprObj, $$[$0-3]);
      
break;
case 25:
this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 26:
this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 27:
this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 28:
this.$ = {};
break;
case 29:

      if ($$[$0][0] === 'closed')
        $$[$0-1]['closed'] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 32:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 33:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 34:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 35:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 36:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 37:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 38:
this.$ = $$[$0].length ? { type: "oneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2oneOfdot;
break;
case 39:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 40:
this.$ = [] //  t: 2oneOfdot;
break;
case 41:
this.$ = appendTo($$[$0-1], $$[$0]) //  t: 2oneOfdot;
break;
case 42:
this.$ = $$[$0].length ? { type: "someOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2someOfdot;
break;
case 43:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 44:
this.$ = [] // t: 2someOfdot;
break;
case 45:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 46:
this.$ = $$[$0-1].length ? { type: "group", expressions: unionAll([$$[$0-2]], $$[$0-1]) } : $$[$0-2] // t: 2groupOfdot;
break;
case 47:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 48:
this.$ = [] // t: 2groupOfdot;
break;
case 49:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 53:
this.$ = extend({ id: $$[$0-1] }, $$[$0]) // t: 1iddot;
break;
case 54:
this.$ = {} // t: 1dot;
break;
case 58:

        var hasCard = Object.keys($$[$0-1]).length;
        if ($$[$0-3].type === 'group') {
          if (hasCard && ('min' in $$[$0-3] || 'max' in $$[$0-3])
              || $$[$0] && 'semAct' in $$[$0-3]) {
            this.$ = extend({ type: "group" }, $$[$0-1], { expressions: [$$[$0-3]] }, $$[$0]); // t: openopen1dotcloseCode1closeCode2
          } else {
            this.$ = extend($$[$0-3], $$[$0-1], $$[$0]); // t: open3groupdotclose
          }
        } else if (hasCard || $$[$0]) {
          this.$ = extend({ type: "group" }, $$[$0-1], { expressions: [$$[$0-3]] }, $$[$0]); // t: open1dotcloseCode1
        } else {
          this.$ = $$[$0-3]; // t: open1dotclose
        }
      
break;
case 59:
this.$ = { type: "include", "include": $$[$0] } // t: 2groupInclude1;
break;
case 60:
this.$ = $$[$0] // t: 1iddot;
break;
case 63:

        // $$[$0]: t: 1dotCode1
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1], $$[$0]); // t: 1dot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1dotAnnot3
      
break;
case 64:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "tripleConstraint" }, $$[$0-5], { predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$['annotations'] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 65:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 66:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 67:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 68:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 69:
this.$ = { negated: true } // t: 1negateddot;
break;
case 70:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 72:
this.$ = extend({ type: "valueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 73:
this.$ = { type: "valueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 74:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 75:
this.$ = { type: "valueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t: 1iriRef1;
break;
case 76:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0]) // t: 1iriRefLength1;
break;
case 77:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
	      error("Parse error: facet "+facet+" not allowed for unknown datatype " + $$[$0-1]);
	  });
        this.$ = extend({ type: "valueClass", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 78:
this.$ = { type: "valueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 79:
this.$ = { type: "valueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 80:
this.$ = { type: "valueClass" } // t: 1dot;
break;
case 81:
this.$ = {} // t: 1literalPattern;
break;
case 82: case 87:
this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 83:
this.$ = 'iri' // t: 1iriPattern;
break;
case 84:
this.$ = 'bnode' // t: 1bnodeLength;
break;
case 85:
this.$ = 'nonliteral' // t: 1nonliteralLength;
break;
case 88:
this.$ = $$[$0].length ? { type: "or", disjuncts: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 1dotRefOr3/1dotRef1;
break;
case 89:
this.$ = $$[$0] // t: 1dotRefOr3;
break;
case 90:
this.$ = [] // t: 1dotRefOr3;
break;
case 91:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotRefOr3;
break;
case 92:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
      
break;
case 93:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
      
break;
case 94:
 this.$ = $$[$0]; 
break;
case 95:
 // t: 1dotInline1
        addShape(this.$ = blank(), $$[$0]);
      
break;
case 98: case 99:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 100:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 101:
this.$ = "length" // t: 1literalLength;
break;
case 102:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 103:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 104:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 105:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalTotaldigits;
break;
case 106:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 107:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 108:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 109:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 110:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 111:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 112:
this.$ = [$$[$0-1], $$[$0]] // t: 1dotAnnotIRIREF;
break;
case 115:
this.$ = { min:0 } // t: 1cardStar;
break;
case 116:
this.$ = { min:1 } // t: 1cardPlus;
break;
case 117:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 118:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
      
break;
case 119:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 120:
this.$ = [] // t: 1val1IRIREF;
break;
case 121:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 124:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 125:
this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 126:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 127:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 128: case 133:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 131:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 132:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 134:
this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 136:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 137:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 138:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 139:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 140:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 141:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 142:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 143:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 144:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 145:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 146:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 147:
this.$ = resolveIRI(unescape($$[$0], irirefEscapeSequence)) // t: 1dot;
break;
case 148:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
    
break;
case 149:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
    
break;
case 150:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 152:
this.$ = unescapeSemanticAction('', $$[$0]) // t: 1dotUnlabeledCode1;
break;
case 153:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 154:

        Parser.startAct = $$[$0]; // t: startCode1
      
break;
case 156:
this.$ = extend($$[$0-1], $$[$0]) // t: startCode3;
break;
case 157:
this.$ = Object.keys($$[$0]).length ? { semAct: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 158:
this.$ = {} // t: 1dot, 1dotCode1;
break;
case 159:
this.$ = extend($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:3,6:[2,10],7:4,8:8,9:11,10:12,11:13,14:5,15:6,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,24:15,27:$V6,64:18,65:19,134:$V7,135:$V8,136:$V9,137:20,138:$Va,140:17},{6:[1,27]},o($V0,[2,3]),{6:[2,11]},o($V0,[2,15]),o($V0,[2,16]),o($Vb,[2,7],{12:28}),{18:[1,29]},{20:[1,30]},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),{22:[1,31]},o($Vc,$Vd,{25:32,28:33}),{18:$V2,20:$V4,24:34,64:18,65:19,134:$V7,135:$V8,136:$V9},o($Vb,[2,154],{137:35,138:$Va}),o($Ve,[2,61]),o($Ve,[2,62]),o($V0,[2,155]),o($Vf,[2,147]),o($Vf,[2,148]),o($Vf,[2,149]),o($Vf,[2,150]),o($Ve,[2,151]),{18:$V2,20:$V4,64:37,134:$V7,135:$V8,139:[1,36]},{1:[2,1]},{6:[2,9],7:39,9:40,10:41,13:38,15:6,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,24:15,27:$V6,64:18,65:19,134:$V7,135:$V8,136:$V9},o($V0,[2,17]),{18:[1,42]},o($Vc,$Vd,{64:18,65:19,28:33,23:43,24:44,25:45,18:$V2,20:$V4,134:$V7,135:$V8,136:$V9}),o($V0,$Vg,{26:46,141:47}),{29:[1,48],32:49,33:50,34:51,35:[1,52],37:[1,53],39:[1,54]},o($Vc,$Vd,{28:33,25:55}),o($V0,[2,156]),o($Vh,[2,152]),{139:[1,56]},o($Vb,[2,8]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($V0,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o($V0,$Vg,{141:47,26:57}),o($Vb,[2,22]),o([6,17,18,19,20,21,27,31,45,49,54,62,134,135,136],[2,157],{137:58,138:$Va}),{18:$V2,20:$V4,30:59,31:[2,30],36:60,37:$Vi,41:70,42:61,46:62,50:63,55:64,56:65,59:66,60:67,61:$Vj,63:$Vk,64:73,68:71,70:$Vl,71:$Vm,134:$V7,135:$V8},o($Vc,[2,29]),o($Vc,[2,25]),o($Vc,[2,26]),o($Vc,[2,27]),{18:$V2,20:$V4,24:77,38:76,64:18,65:19,134:$V7,135:$V8,136:$V9},{18:$V2,20:$V4,40:78,41:79,64:73,134:$V7,135:$V8},o($V0,$Vg,{141:47,26:80}),o($Vh,[2,153]),o($Vb,[2,21]),o($Vh,[2,159]),{31:[1,81]},{31:[2,31]},o($Vn,[2,40],{43:82}),o($Vo,[2,44],{47:83}),o($Vp,[2,48],{51:84}),o($Vp,[2,52]),{18:$V2,20:$V4,37:$Vi,41:70,55:85,59:66,60:67,61:$Vj,64:73,68:71,70:$Vl,71:$Vm,134:$V7,135:$V8},o($Vp,[2,56]),o($Vp,[2,57]),{18:$V2,20:$V4,36:86,37:$Vi,41:70,42:61,46:62,50:63,55:64,56:65,59:66,60:67,61:$Vj,63:$Vk,64:73,68:71,70:$Vl,71:$Vm,134:$V7,135:$V8},{18:$V2,20:$V4,24:87,64:18,65:19,134:$V7,135:$V8,136:$V9},o($Vc,$Vd,{28:33,66:88,74:90,64:91,76:92,77:93,84:98,25:103,18:$V2,20:$V4,61:$Vq,72:$Vr,78:$Vs,80:$Vt,81:$Vu,82:$Vv,88:$Vw,89:$Vx,90:$Vy,134:$V7,135:$V8}),{18:$V2,20:$V4,41:104,64:73,134:$V7,135:$V8},{18:$V2,20:$V4,24:105,64:18,65:19,134:$V7,135:$V8,136:$V9},o([18,20,29,35,37,39,61,72,78,80,81,82,88,89,90,134,135],[2,71]),o($Vz,[2,67],{71:[1,106]}),o($Vz,[2,69],{70:[1,107]}),o($Vc,[2,32],{64:18,65:19,24:108,18:$V2,20:$V4,134:$V7,135:$V8,136:$V9}),o($VA,[2,33]),o($Vc,[2,35],{64:73,41:109,18:$V2,20:$V4,134:$V7,135:$V8}),o($VB,[2,36]),o($Vb,[2,23]),o([6,17,18,19,20,21,27,31,45,49,54,62,87,92,94,97,98,99,108,111,112,113,114,134,135,136,138],[2,24]),o([31,62],[2,38],{44:110,45:[1,111]}),o($Vn,[2,42],{48:112,49:[1,113]}),o($Vo,[2,50],{52:114,53:115,54:[1,116]}),o($Vp,[2,53]),{62:[1,117]},o([18,20,37,61,70,71,134,135],[2,60]),o($VC,$VD,{67:118}),o($VE,$VF,{73:119}),o($VC,[2,73],{28:33,84:98,25:103,75:120,76:121,83:122,95:125,29:$Vd,35:$Vd,37:$Vd,39:$Vd,88:$Vw,89:$Vx,90:$Vy,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK}),o($VE,$VF,{73:129}),o($VC,[2,78]),o($VC,[2,79]),o($VC,[2,80]),o($VL,[2,83]),o($VL,[2,84]),o($VL,[2,85]),o($VM,[2,90],{85:130}),o($VN,[2,120],{115:131}),o($VM,[2,92]),o($VM,[2,93]),{18:$V2,20:$V4,24:132,64:18,65:19,134:$V7,135:$V8,136:$V9},o($VM,[2,95]),o($Vc,$Vd,{28:33,74:90,64:91,76:92,77:93,84:98,25:103,66:133,18:$V2,20:$V4,61:$Vq,72:$Vr,78:$Vs,80:$Vt,81:$Vu,82:$Vv,88:$Vw,89:$Vx,90:$Vy,134:$V7,135:$V8}),o($Vp,[2,59]),o($Vz,[2,68]),o($Vz,[2,70]),o($VA,[2,34]),o($VB,[2,37]),o($Vn,[2,41]),{18:$V2,20:$V4,37:$Vi,41:70,42:134,46:62,50:63,55:64,56:65,59:66,60:67,61:$Vj,63:$Vk,64:73,68:71,70:$Vl,71:$Vm,134:$V7,135:$V8},o($Vo,[2,45]),{18:$V2,20:$V4,37:$Vi,41:70,46:135,50:63,55:64,56:65,59:66,60:67,61:$Vj,63:$Vk,64:73,68:71,70:$Vl,71:$Vm,134:$V7,135:$V8},o($Vo,[2,46]),o($Vp,[2,49]),o($Vo,[2,51],{55:64,56:65,59:66,60:67,41:70,68:71,64:73,50:136,18:$V2,20:$V4,37:$Vi,61:$Vj,63:$Vk,70:$Vl,71:$Vm,134:$V7,135:$V8}),o($VO,$VP,{57:137,58:138,111:$VQ,112:$VR,113:$VS,114:$VT}),o($VO,$VP,{58:138,57:143,69:144,108:$VU,111:$VQ,112:$VR,113:$VS,114:$VT}),o($VC,[2,72],{95:125,79:146,83:147,91:148,100:149,101:150,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK,102:$VV,103:$VW,104:$VX,105:$VY,106:$VZ,107:$V_}),o($VC,[2,74],{95:125,83:157,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK}),o($VC,[2,75],{83:122,95:125,75:158,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK}),o($V$,[2,86]),{93:159,130:$V01,131:$V11,132:$V21,133:$V31},{93:164,130:$V01,131:$V11,132:$V21,133:$V31},{96:[1,165]},{96:[2,101]},{96:[2,102]},{96:[2,103]},o($VC,[2,77],{95:125,79:146,83:147,91:148,100:149,101:150,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK,102:$VV,103:$VW,104:$VX,105:$VY,106:$VZ,107:$V_}),o($V$,[2,88],{86:166,87:[1,167]}),{18:$V2,20:$V4,62:[1,168],64:172,78:[1,173],93:174,96:$V41,110:171,116:169,117:170,126:$V51,127:$V61,128:$V71,129:$V81,130:$V01,131:$V11,132:$V21,133:$V31,134:$V7,135:$V8},o($VM,[2,94]),o($V91,$VP,{58:138,57:180,111:$VQ,112:$VR,113:$VS,114:$VT}),o($Vn,[2,39]),o($Vo,[2,43]),o($Vp,[2,47]),o($VO,$Vg,{141:47,26:181}),o($V91,[2,55]),o($V91,[2,115]),o($V91,[2,116]),o($V91,[2,117]),o($V91,[2,118]),o($VO,$Vg,{141:47,26:182}),o($VC,[2,66]),{18:$V2,20:$V4,64:183,134:$V7,135:$V8},o($VE,[2,82]),o($VE,[2,96]),o($VE,[2,97]),{96:[1,184]},{96:[1,185]},{96:[2,106]},{96:[2,107]},{96:[2,108]},{96:[2,109]},{96:[2,110]},{96:[2,111]},o($V$,[2,87]),o($VC,[2,76],{95:125,83:157,92:$VG,94:$VH,97:$VI,98:$VJ,99:$VK}),o($VE,[2,98]),o($Va1,[2,143]),o($Va1,[2,144]),o($Va1,[2,145]),o($Va1,[2,146]),o($VE,[2,99]),o($VE,[2,100]),o($VM,[2,91]),o($Vc,$Vd,{28:33,25:103,84:186,88:$Vw,89:$Vx,90:$Vy}),o($VC,[2,119]),o($VN,[2,121]),o($VN,[2,122]),o($VN,[2,123]),o($VN,[2,129],{118:187,122:188,94:[1,189]}),{119:190,121:191,123:$Vb1},o($Vc1,[2,135],{124:[1,193],125:[1,194]}),o($Vc1,[2,138]),o($Vc1,[2,139]),o($Vc1,[2,140]),o($Vc1,[2,141]),o($Vc1,[2,142]),o($V91,$VD,{67:195}),o($Vp,[2,58]),o($Vp,[2,63]),{18:$V2,20:$V4,64:197,93:174,96:$V41,109:196,110:198,126:$V51,127:$V61,128:$V71,129:$V81,130:$V01,131:$V11,132:$V21,133:$V31,134:$V7,135:$V8},o($VE,[2,104]),o($VE,[2,105]),o($VM,[2,89]),o($VN,[2,124]),o($VN,[2,130]),o($Vd1,[2,126],{120:199}),o($VN,[2,125],{121:200,123:$Vb1}),o($Vd1,[2,131]),{18:$V2,20:$V4,64:201,134:$V7,135:$V8},o($Vc1,[2,136]),{18:$V2,20:$V4,64:202,134:$V7,135:$V8},o($VO,$Vg,{141:47,69:144,26:203,108:$VU}),o($VC,[2,112]),o($VC,[2,113]),o($VC,[2,114]),o($VN,[2,128],{121:204,123:$Vb1}),o($Vd1,[2,132]),o($Vd1,[2,133],{94:[1,205]}),o($Vc1,[2,137]),o($Vp,[2,64]),o($Vd1,[2,127]),o($Vd1,[2,134])],
defaultActions: {5:[2,11],27:[2,1],60:[2,31],126:[2,101],127:[2,102],128:[2,103],151:[2,106],152:[2,107],153:[2,108],154:[2,109],155:[2,110],156:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var numericFacets = ["mininclusive", "minexclusive",
		       "maxinclusive", "maxexclusive"];

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Return object with p1 key, p2 integer value
  function keyInt(key, val) {
    var ret = {};
    ret[key] = parseInt(val, 10);
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    var ret = {};
    string = string.substring(1, string.length - 2);
    ret[key] = unescape(string, stringEscapeSequence, semactEscapeReplacements);
    return ret;
  }

  function error (msg) {
    Parser.prefixes = Parser.shapes = Parser.start = Parser.startAct = null; // Reset state.
    base = basePath = baseRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser.prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser.prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    else if (label in Parser.shapes)
      error("Parse error: "+label+" alread defined");
    Parser.shapes[label] = shape;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 88;
break;
case 2:return 89;
break;
case 3:return 124;
break;
case 4:return 90;
break;
case 5:return 134;
break;
case 6:return 114;
break;
case 7:return 127;
break;
case 8:return 126;
break;
case 9:return 96;
break;
case 10:return 'ANON';
break;
case 11:return 18;
break;
case 12:return 20;
break;
case 13:return 135;
break;
case 14:return 136;
break;
case 15:return 139;
break;
case 16:return 132;
break;
case 17:return 133;
break;
case 18:return 130;
break;
case 19:return 131;
break;
case 20:return 17;
break;
case 21:return 19;
break;
case 22:return 21;
break;
case 23:return 27;
break;
case 24:return 35;
break;
case 25:return 39;
break;
case 26:return 72;
break;
case 27:return 81;
break;
case 28:return 80;
break;
case 29:return 82;
break;
case 30:return 92;
break;
case 31:return 87;
break;
case 32:return 102;
break;
case 33:return 103;
break;
case 34:return 104;
break;
case 35:return 105;
break;
case 36:return 97;
break;
case 37:return 98;
break;
case 38:return 99;
break;
case 39:return 106;
break;
case 40:return 107;
break;
case 41:return 22;
break;
case 42:return 29;
break;
case 43:return 31;
break;
case 44:return 37;
break;
case 45:return 49;
break;
case 46:return 45;
break;
case 47:return 54;
break;
case 48:return 61;
break;
case 49:return 62;
break;
case 50:return 63;
break;
case 51:return 71;
break;
case 52:return 125;
break;
case 53:return 70;
break;
case 54:return 78;
break;
case 55:return 94;
break;
case 56:return 108;
break;
case 57:return 111;
break;
case 58:return 112;
break;
case 59:return 113;
break;
case 60:return 123;
break;
case 61:return 138;
break;
case 62:return 128;
break;
case 63:return 129;
break;
case 64:return 6;
break;
case 65:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}