/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShexParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"QCODE_E_Plus":8,"CODE":9,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_C":10,"shape":11,"start":12,"Qstatement_E_Star":13,"statement":14,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C":15,"baseDecl":16,"prefixDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_start":22,"=":23,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QCODE_E_Star_C":24,"QCODE_E_Star":25,"shapeLabel":26,"shapeDefinition":27,"IT_VIRTUAL":28,"Q_O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":29,"{":30,"QoneOfShape_E_Opt":31,"}":32,"O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":33,"include":34,"inclPropertySet":35,"IT_CLOSED":36,"oneOfShape":37,"&":38,"IT_EXTRA":39,"Qpredicate_E_Plus":40,"predicate":41,"someOfShape":42,"Q_O_Q_PIPE_E_S_QsomeOfShape_E_C_E_Star":43,"O_Q_PIPE_E_S_QsomeOfShape_E_C":44,"|":45,"groupShape":46,"Q_O_Q_OR_E_S_QgroupShape_E_C_E_Star":47,"O_Q_OR_E_S_QgroupShape_E_C":48,"||":49,"unaryShape":50,"Q_O_Q_COMMA_E_S_QunaryShape_E_C_E_Star":51,"Q_COMMA_E_Opt":52,"O_Q_COMMA_E_S_QunaryShape_E_C":53,",":54,"O_QtripleConstraint_E_Or_Qinclude_E_Or_Q_LPAREN_E_S_QoneOfShape_E_S_Q_RPAREN_E_S_Qcardinality_E_Opt_S_QCODE_E_Star_C":55,"id":56,"Qcardinality_E_Opt":57,"cardinality":58,"tripleConstraint":59,"(":60,")":61,"$":62,"iri":63,"blankNode":64,"valueClass":65,"Qannotation_E_Star":66,"senseFlags":67,"annotation":68,"^":69,"!":70,"IT_LITERAL":71,"QxsFacet_E_Star":72,"O_QIT_IRI_E_Or_QIT_NONLITERAL_E_C":73,"QstringFacet_E_Plus":74,"groupShapeConstr":75,"IT_BNODE":76,"valueSet":77,".":78,"xsFacet":79,"stringFacet":80,"IT_IRI":81,"IT_NONLITERAL":82,"shapeOrRef":83,"Q_O_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":84,"O_QIT_OR_E_S_QshapeOrRef_E_C":85,"IT_OR":86,"ATPNAME_LN":87,"ATPNAME_NS":88,"@":89,"numericFacet":90,"IT_PATTERN":91,"string":92,"~":93,"stringLength":94,"INTEGER":95,"numericRange":96,"numericLength":97,"IT_LENGTH":98,"IT_MINLENGTH":99,"IT_MAXLENGTH":100,"IT_MININCLUSIVE":101,"IT_MINEXCLUSIVE":102,"IT_MAXINCLUSIVE":103,"IT_MAXEXCLUSIVE":104,"IT_TOTALDIGITS":105,"IT_FRACTIONDIGITS":106,";":107,"O_Qiri_E_Or_Qliteral_E_C":108,"literal":109,"*":110,"+":111,"?":112,"REPEAT_RANGE":113,"Qvalue_E_Star":114,"value":115,"iriRange":116,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":117,"Qexclusion_E_Plus":118,"Qexclusion_E_Star":119,"exclusion":120,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":121,"-":122,"LANGTAG":123,"^^":124,"DECIMAL":125,"DOUBLE":126,"IT_true":127,"IT_false":128,"STRING_LITERAL1":129,"STRING_LITERAL2":130,"STRING_LITERAL_LONG1":131,"STRING_LITERAL_LONG2":132,"PNAME_LN":133,"a":134,"BLANK_NODE_LABEL":135,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"CODE",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_start",23:"=",28:"IT_VIRTUAL",30:"{",32:"}",36:"IT_CLOSED",38:"&",39:"IT_EXTRA",45:"|",49:"||",54:",",60:"(",61:")",62:"$",69:"^",70:"!",71:"IT_LITERAL",76:"IT_BNODE",78:".",81:"IT_IRI",82:"IT_NONLITERAL",86:"IT_OR",87:"ATPNAME_LN",88:"ATPNAME_NS",89:"@",91:"IT_PATTERN",93:"~",95:"INTEGER",98:"IT_LENGTH",99:"IT_MINLENGTH",100:"IT_MAXLENGTH",101:"IT_MININCLUSIVE",102:"IT_MINEXCLUSIVE",103:"IT_MAXINCLUSIVE",104:"IT_MAXEXCLUSIVE",105:"IT_TOTALDIGITS",106:"IT_FRACTIONDIGITS",107:";",110:"*",111:"+",112:"?",113:"REPEAT_RANGE",122:"-",123:"LANGTAG",124:"^^",125:"DECIMAL",126:"DOUBLE",127:"IT_true",128:"IT_false",129:"STRING_LITERAL1",130:"STRING_LITERAL2",131:"STRING_LITERAL_LONG1",132:"STRING_LITERAL_LONG2",133:"PNAME_LN",134:"a",135:"BLANK_NODE_LABEL"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,2],[10,1],[10,1],[10,1],[13,0],[13,2],[15,2],[5,0],[5,1],[14,1],[14,1],[14,1],[7,1],[7,1],[16,2],[17,3],[12,3],[25,0],[25,2],[24,1],[24,2],[11,3],[11,4],[27,4],[33,1],[33,1],[33,1],[29,0],[29,2],[31,0],[31,1],[34,2],[35,2],[40,1],[40,2],[37,2],[44,2],[43,0],[43,2],[42,2],[48,2],[47,0],[47,2],[46,3],[53,2],[51,0],[51,2],[52,0],[52,1],[50,1],[50,2],[57,0],[57,1],[55,1],[55,1],[55,5],[56,2],[26,1],[26,1],[59,5],[59,6],[66,0],[66,2],[67,1],[67,2],[67,1],[67,2],[41,1],[65,2],[65,1],[65,2],[65,2],[65,3],[65,1],[65,2],[65,1],[65,1],[65,1],[65,1],[72,0],[72,2],[74,1],[74,2],[73,1],[73,1],[75,2],[85,2],[84,0],[84,2],[83,1],[83,1],[83,2],[83,1],[79,1],[79,1],[80,2],[80,2],[80,2],[90,2],[90,2],[94,1],[94,1],[94,1],[96,1],[96,1],[96,1],[96,1],[97,1],[97,1],[68,3],[108,1],[108,1],[58,1],[58,1],[58,1],[58,1],[77,3],[114,0],[114,2],[115,1],[115,1],[116,2],[116,2],[119,0],[119,2],[121,2],[117,0],[117,1],[118,1],[118,2],[120,2],[120,3],[109,1],[109,2],[109,3],[109,1],[109,1],[109,1],[109,1],[109,1],[92,1],[92,1],[92,1],[92,1],[63,1],[63,1],[63,1],[63,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, {shapes: Parser.shapes});
      Parser.prefixes = Parser.shapes = null;
      base = basePath = baseRoot = '';
      return ret;
    
break;
case 19: 
      base = resolveIRI($$[$0])
      basePath = base.replace(/[^\/]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    
break;
case 20: // t: ShexParser-test.js/with pre-defined prefixes
      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 26: // t: 1dot
        if (!Parser.shapes) Parser.shapes = {};
        Parser.shapes[$$[$0-2]] = $$[$0-1];
    
break;
case 28: // t: 1dotInherit3
      this.$ = extend($$[$0-1], $$[$0-3]);
    
break;
case 29:this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 30:this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1;
break;
case 31:this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 32:this.$ = {};
break;
case 33:
      if ($$[$0][0] === 'closed') // t: 1dotClosed
        $$[$0-1]['closed'] = true;
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = $$[$0-1][$$[$0][0]].concat([$$[$0][1]]); // t: 1dotInherit3, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = [$$[$0][1]]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 36:this.$ = $$[$0] // t:, 1dotInherit1;
break;
case 37:this.$ = $$[$0];
break;
case 40:this.$ = $$[$0].length ? { type: "oneOf", patterns: [$$[$0-1]].concat($$[$0]) } : $$[$0-1] // t: 2oneOfdot;
break;
case 41:this.$ = $$[$0] // t: 2oneOfdot;
break;
case 42:this.$ = [] //  t: 2oneOfdot;
break;
case 43:this.$ = $$[$0-1].concat($$[$0]) //  t: 2oneOfdot;
break;
case 44:this.$ = $$[$0].length ? { type: "someOf", patterns: [$$[$0-1]].concat($$[$0]) } : $$[$0-1] // t: 2someOfdot;
break;
case 45:this.$ = $$[$0] // t: 2someOfdot;
break;
case 46:this.$ = [] // t: 2someOfdot;
break;
case 47:this.$ = $$[$0-1].concat($$[$0]) // t: 2someOfdot;
break;
case 48:this.$ = $$[$0-1].length ? { type: "group", patterns: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] // t: 2groupOfdot;
break;
case 49:this.$ = $$[$0] // t: 2groupOfdot;
break;
case 50:this.$ = [] // t: 2groupOfdot;
break;
case 51:this.$ = $$[$0-1].concat($$[$0]) // t: 2groupOfdot;
break;
case 56:this.$ = {} // t: 1dot;
break;
case 59:this.$ = { type: "include", "include": $$[$0] } // t: 2groupInclude1;
break;
case 64:
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1]); // t: 1dot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1dotAnnot3
      
break;
case 65:
        this.$ = extend({ type: "tripleConstraint" }, $$[$0-5], { predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1inversedotAnnot3
      
break;
case 66:this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 67:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1dotAnnot3;
break;
case 68:this.$ = { inverse: true } // t: 1inversedot;
break;
case 69:this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 70:this.$ = { negated: true } // t: 1negateddot;
break;
case 71:this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 73:this.$ = extend({ type: "valueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 74:this.$ = { type: "valueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 75:this.$ = extend({ type: "valueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 76:this.$ = { type: "valueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t:@@;
break;
case 77:this.$ = extend({ type: "valueClass", nodeKind: $$[$0-2] }, $$[$0]) // t:@@;
break;
case 81:this.$ = { type: "valueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 82:this.$ = { type: "valueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 83:this.$ = { type: "valueClass" } // t: 1dot;
break;
case 84:this.$ = {} // t: 1literalPattern;
break;
case 85:this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 87:this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 88:this.$ = 'iri' // t: 1iriPattern;
break;
case 89:this.$ = 'nonliteral' // t:@@;
break;
case 90:this.$ = $$[$0].length ? { type: "or", conjuncts: [$$[$0-1]].concat($$[$0]) } : $$[$0-1] // t: 1dotRefOr3/1dotRef1;
break;
case 91:this.$ = $$[$0] // t: 1dotRefOr3;
break;
case 92:this.$ = [] // t: 1dotRefOr3;
break;
case 93:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1dotRefOr3;
break;
case 94: // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      
break;
case 95: // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
      
break;
case 96: this.$ = $$[$0]; 
break;
case 97: // t: 1dotInline1
        if (!Parser.shapes) Parser.shapes = {};
        this.$ = blank();
        Parser.shapes[this.$] = $$[$0];
      
break;
case 100:this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 101:this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 102:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 103:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 104:this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalTotaldigits;
break;
case 105:this.$ = "length" // t: 1literalLength;
break;
case 106:this.$ = "minlength" // t: 1literalMinlength;
break;
case 107:this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 108:this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 109:this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 110:this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 111:this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 112:this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 113:this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 114:this.$ = [$$[$0-1], $$[$0]];
break;
case 117:this.$ = { min:0 } // t: 1cardStar;
break;
case 118:this.$ = { min:1 } // t: 1cardPlus;
break;
case 119:this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 120:
        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
      
break;
case 121:this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 122:this.$ = [] // t: 1val1IRIREF;
break;
case 123:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1val1IRIREF;
break;
case 126:
        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 127:this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 128:this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 129:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1val1iriStemMinusiri3;
break;
case 130:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 133:this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 134:this.$ = $$[$0-1].concat([$$[$0]]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 135:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 136:this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 138:this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 139:this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 140:this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 141:this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 142:this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 143:this.$ = XSD_TRUE // t: 1val1true;
break;
case 144:this.$ = XSD_FALSE // t: 1val1false;
break;
case 145:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 146:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 147:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 148:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 149:this.$ = resolveIRI($$[$0]) // t: 1dot;
break;
case 150: // t:1dotPNex, 1dotPNdefault, ShexParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 151: // t: 1dotNS2, 1dotNSdefault, ShexParser-test.js/PNAME_NS with pre-defined prefixes
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 152:this.$ = RDF_TYPE // t: 1AvalA;
break;
}
},
table: [{3:1,4:2,6:[2,2],9:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],28:[2,2],133:[2,2],134:[2,2],135:[2,2]},{1:[3]},{5:3,6:[2,12],7:4,8:13,9:[1,17],10:8,11:11,12:12,15:5,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,22],22:[1,16],26:14,28:[1,15],63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{6:[1,25]},{6:[2,3],9:[2,3],18:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],28:[2,3],133:[2,3],134:[2,3],135:[2,3]},{6:[2,13]},{6:[2,17],9:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],28:[2,17],133:[2,17],134:[2,17],135:[2,17]},{6:[2,18],9:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],28:[2,18],133:[2,18],134:[2,18],135:[2,18]},{6:[2,9],13:26,18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],28:[2,9],133:[2,9],134:[2,9],135:[2,9]},{19:[1,27]},{21:[1,28]},{6:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],28:[2,6],133:[2,6],134:[2,6],135:[2,6]},{6:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],28:[2,7],133:[2,7],134:[2,7],135:[2,7]},{6:[2,8],9:[1,29],18:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],28:[2,8],133:[2,8],134:[2,8],135:[2,8]},{27:30,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,22],26:32,63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{23:[1,33]},{6:[2,4],9:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],28:[2,4],133:[2,4],134:[2,4],135:[2,4]},{6:[2,62],9:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],28:[2,62],30:[2,62],32:[2,62],36:[2,62],38:[2,62],39:[2,62],45:[2,62],49:[2,62],54:[2,62],60:[2,62],61:[2,62],69:[2,62],70:[2,62],86:[2,62],91:[2,62],93:[2,62],98:[2,62],99:[2,62],100:[2,62],107:[2,62],110:[2,62],111:[2,62],112:[2,62],113:[2,62],133:[2,62],134:[2,62],135:[2,62]},{6:[2,63],9:[2,63],18:[2,63],19:[2,63],20:[2,63],21:[2,63],22:[2,63],28:[2,63],30:[2,63],32:[2,63],36:[2,63],38:[2,63],39:[2,63],45:[2,63],49:[2,63],54:[2,63],60:[2,63],61:[2,63],69:[2,63],70:[2,63],86:[2,63],91:[2,63],93:[2,63],98:[2,63],99:[2,63],100:[2,63],107:[2,63],110:[2,63],111:[2,63],112:[2,63],113:[2,63],133:[2,63],134:[2,63],135:[2,63]},{6:[2,149],9:[2,149],18:[2,149],19:[2,149],20:[2,149],21:[2,149],22:[2,149],28:[2,149],30:[2,149],32:[2,149],36:[2,149],38:[2,149],39:[2,149],45:[2,149],49:[2,149],54:[2,149],60:[2,149],61:[2,149],69:[2,149],70:[2,149],71:[2,149],76:[2,149],78:[2,149],81:[2,149],82:[2,149],86:[2,149],87:[2,149],88:[2,149],89:[2,149],91:[2,149],93:[2,149],95:[2,149],98:[2,149],99:[2,149],100:[2,149],107:[2,149],110:[2,149],111:[2,149],112:[2,149],113:[2,149],122:[2,149],125:[2,149],126:[2,149],127:[2,149],128:[2,149],129:[2,149],130:[2,149],131:[2,149],132:[2,149],133:[2,149],134:[2,149],135:[2,149]},{6:[2,150],9:[2,150],18:[2,150],19:[2,150],20:[2,150],21:[2,150],22:[2,150],28:[2,150],30:[2,150],32:[2,150],36:[2,150],38:[2,150],39:[2,150],45:[2,150],49:[2,150],54:[2,150],60:[2,150],61:[2,150],69:[2,150],70:[2,150],71:[2,150],76:[2,150],78:[2,150],81:[2,150],82:[2,150],86:[2,150],87:[2,150],88:[2,150],89:[2,150],91:[2,150],93:[2,150],95:[2,150],98:[2,150],99:[2,150],100:[2,150],107:[2,150],110:[2,150],111:[2,150],112:[2,150],113:[2,150],122:[2,150],125:[2,150],126:[2,150],127:[2,150],128:[2,150],129:[2,150],130:[2,150],131:[2,150],132:[2,150],133:[2,150],134:[2,150],135:[2,150]},{6:[2,151],9:[2,151],18:[2,151],19:[2,151],20:[2,151],21:[2,151],22:[2,151],28:[2,151],30:[2,151],32:[2,151],36:[2,151],38:[2,151],39:[2,151],45:[2,151],49:[2,151],54:[2,151],60:[2,151],61:[2,151],69:[2,151],70:[2,151],71:[2,151],76:[2,151],78:[2,151],81:[2,151],82:[2,151],86:[2,151],87:[2,151],88:[2,151],89:[2,151],91:[2,151],93:[2,151],95:[2,151],98:[2,151],99:[2,151],100:[2,151],107:[2,151],110:[2,151],111:[2,151],112:[2,151],113:[2,151],122:[2,151],125:[2,151],126:[2,151],127:[2,151],128:[2,151],129:[2,151],130:[2,151],131:[2,151],132:[2,151],133:[2,151],134:[2,151],135:[2,151]},{6:[2,152],9:[2,152],18:[2,152],19:[2,152],20:[2,152],21:[2,152],22:[2,152],28:[2,152],30:[2,152],32:[2,152],36:[2,152],38:[2,152],39:[2,152],45:[2,152],49:[2,152],54:[2,152],60:[2,152],61:[2,152],69:[2,152],70:[2,152],71:[2,152],76:[2,152],78:[2,152],81:[2,152],82:[2,152],86:[2,152],87:[2,152],88:[2,152],89:[2,152],91:[2,152],93:[2,152],95:[2,152],98:[2,152],99:[2,152],100:[2,152],107:[2,152],110:[2,152],111:[2,152],112:[2,152],113:[2,152],122:[2,152],125:[2,152],126:[2,152],127:[2,152],128:[2,152],129:[2,152],130:[2,152],131:[2,152],132:[2,152],133:[2,152],134:[2,152],135:[2,152]},{6:[2,153],9:[2,153],18:[2,153],19:[2,153],20:[2,153],21:[2,153],22:[2,153],28:[2,153],30:[2,153],32:[2,153],36:[2,153],38:[2,153],39:[2,153],45:[2,153],49:[2,153],54:[2,153],60:[2,153],61:[2,153],69:[2,153],70:[2,153],86:[2,153],91:[2,153],93:[2,153],98:[2,153],99:[2,153],100:[2,153],107:[2,153],110:[2,153],111:[2,153],112:[2,153],113:[2,153],133:[2,153],134:[2,153],135:[2,153]},{1:[2,1]},{6:[2,11],7:35,11:37,12:36,14:34,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,22],22:[1,16],26:14,28:[1,15],63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{6:[2,19],9:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],28:[2,19],133:[2,19],134:[2,19],135:[2,19]},{19:[1,38]},{6:[2,5],9:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],28:[2,5],133:[2,5],134:[2,5],135:[2,5]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:39,28:[2,22],133:[2,22],134:[2,22],135:[2,22]},{30:[1,40],33:41,34:42,35:43,36:[1,44],38:[1,45],39:[1,46]},{27:47,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,22],24:48,26:49,27:50,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{6:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],28:[2,10],133:[2,10],134:[2,10],135:[2,10]},{6:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],28:[2,14],133:[2,14],134:[2,14],135:[2,14]},{6:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],28:[2,15],133:[2,15],134:[2,15],135:[2,15]},{6:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],28:[2,16],133:[2,16],134:[2,16],135:[2,16]},{6:[2,20],9:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],28:[2,20],133:[2,20],134:[2,20],135:[2,20]},{6:[2,26],9:[1,51],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],28:[2,26],133:[2,26],134:[2,26],135:[2,26]},{19:[1,20],21:[1,22],31:52,32:[2,34],34:60,37:53,38:[1,45],41:63,42:54,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{30:[2,33],36:[2,33],38:[2,33],39:[2,33]},{30:[2,29],36:[2,29],38:[2,29],39:[2,29]},{30:[2,30],36:[2,30],38:[2,30],39:[2,30]},{30:[2,31],36:[2,31],38:[2,31],39:[2,31]},{19:[1,20],21:[1,22],26:68,63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{19:[1,20],21:[1,22],40:69,41:70,63:65,133:[1,21],134:[1,23]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:71,28:[2,22],133:[2,22],134:[2,22],135:[2,22]},{6:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],28:[2,21],133:[2,21],134:[2,21],135:[2,21]},{6:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],28:[2,24],133:[2,24],134:[2,24],135:[2,24]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:72,28:[2,22],133:[2,22],134:[2,22],135:[2,22]},{6:[2,23],9:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],28:[2,23],32:[2,23],45:[2,23],49:[2,23],54:[2,23],61:[2,23],133:[2,23],134:[2,23],135:[2,23]},{32:[1,73]},{32:[2,35]},{32:[2,42],43:74,45:[2,42],61:[2,42]},{32:[2,46],45:[2,46],47:75,49:[2,46],61:[2,46]},{32:[2,50],45:[2,50],49:[2,50],51:76,54:[2,50],61:[2,50]},{32:[2,54],45:[2,54],49:[2,54],54:[2,54],61:[2,54]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,55:77,59:59,60:[1,61],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{32:[2,58],45:[2,58],49:[2,58],54:[2,58],61:[2,58]},{32:[2,59],45:[2,59],49:[2,59],54:[2,59],61:[2,59]},{19:[1,20],21:[1,22],34:60,37:78,38:[1,45],41:63,42:54,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{19:[1,20],21:[1,22],26:79,63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{19:[1,20],21:[1,22],27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,91],63:84,65:80,71:[1,81],73:82,75:85,76:[1,83],77:86,78:[1,87],81:[1,88],82:[1,89],83:90,87:[1,92],88:[1,93],89:[1,94],133:[1,21],134:[1,23]},{19:[1,20],21:[1,22],41:96,63:65,133:[1,21],134:[1,23]},{19:[2,72],21:[2,72],30:[2,72],36:[2,72],38:[2,72],39:[2,72],60:[2,72],71:[2,72],76:[2,72],78:[2,72],81:[2,72],82:[2,72],87:[2,72],88:[2,72],89:[2,72],133:[2,72],134:[2,72]},{19:[2,68],21:[2,68],70:[1,97],133:[2,68],134:[2,68]},{19:[2,70],21:[2,70],69:[1,98],133:[2,70],134:[2,70]},{30:[2,36],32:[2,36],36:[2,36],38:[2,36],39:[2,36],45:[2,36],49:[2,36],54:[2,36],61:[2,36]},{19:[1,20],21:[1,22],30:[2,37],36:[2,37],38:[2,37],39:[2,37],41:99,63:65,133:[1,21],134:[1,23]},{19:[2,38],21:[2,38],30:[2,38],36:[2,38],38:[2,38],39:[2,38],133:[2,38],134:[2,38]},{6:[2,27],9:[1,51],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],28:[2,27],133:[2,27],134:[2,27],135:[2,27]},{6:[2,25],9:[1,51],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],28:[2,25],133:[2,25],134:[2,25],135:[2,25]},{6:[2,28],9:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],28:[2,28],32:[2,28],45:[2,28],49:[2,28],54:[2,28],61:[2,28],86:[2,28],91:[2,28],93:[2,28],98:[2,28],99:[2,28],100:[2,28],107:[2,28],110:[2,28],111:[2,28],112:[2,28],113:[2,28],133:[2,28],134:[2,28],135:[2,28]},{32:[2,40],44:100,45:[1,101],61:[2,40]},{32:[2,44],45:[2,44],48:102,49:[1,103],61:[2,44]},{32:[2,52],45:[2,52],49:[2,52],52:104,53:105,54:[1,106],61:[2,52]},{32:[2,55],45:[2,55],49:[2,55],54:[2,55],61:[2,55]},{61:[1,107]},{19:[2,61],21:[2,61],38:[2,61],60:[2,61],69:[2,61],70:[2,61],133:[2,61],134:[2,61]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:108,107:[2,66],110:[2,66],111:[2,66],112:[2,66],113:[2,66]},{9:[2,84],32:[2,84],45:[2,84],49:[2,84],54:[2,84],61:[2,84],72:109,91:[2,84],93:[2,84],98:[2,84],99:[2,84],100:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],110:[2,84],111:[2,84],112:[2,84],113:[2,84]},{9:[2,74],27:95,29:31,30:[2,32],32:[2,74],36:[2,32],38:[2,32],39:[2,32],45:[2,74],49:[2,74],54:[2,74],61:[2,74],74:110,75:111,80:112,83:90,87:[1,92],88:[1,93],89:[1,94],91:[1,113],93:[1,114],94:115,98:[1,116],99:[1,117],100:[1,118],107:[2,74],110:[2,74],111:[2,74],112:[2,74],113:[2,74]},{9:[2,78],27:95,29:31,30:[2,32],32:[2,78],36:[2,32],38:[2,32],39:[2,32],45:[2,78],49:[2,78],54:[2,78],61:[2,78],75:119,83:90,87:[1,92],88:[1,93],89:[1,94],107:[2,78],110:[2,78],111:[2,78],112:[2,78],113:[2,78]},{9:[2,80],32:[2,80],45:[2,80],49:[2,80],54:[2,80],61:[2,80],107:[2,80],110:[2,80],111:[2,80],112:[2,80],113:[2,80]},{9:[2,81],32:[2,81],45:[2,81],49:[2,81],54:[2,81],61:[2,81],107:[2,81],110:[2,81],111:[2,81],112:[2,81],113:[2,81]},{9:[2,82],32:[2,82],45:[2,82],49:[2,82],54:[2,82],61:[2,82],107:[2,82],110:[2,82],111:[2,82],112:[2,82],113:[2,82]},{9:[2,83],32:[2,83],45:[2,83],49:[2,83],54:[2,83],61:[2,83],107:[2,83],110:[2,83],111:[2,83],112:[2,83],113:[2,83]},{9:[2,88],30:[2,88],32:[2,88],36:[2,88],38:[2,88],39:[2,88],45:[2,88],49:[2,88],54:[2,88],61:[2,88],87:[2,88],88:[2,88],89:[2,88],91:[2,88],93:[2,88],98:[2,88],99:[2,88],100:[2,88],107:[2,88],110:[2,88],111:[2,88],112:[2,88],113:[2,88]},{9:[2,89],30:[2,89],32:[2,89],36:[2,89],38:[2,89],39:[2,89],45:[2,89],49:[2,89],54:[2,89],61:[2,89],87:[2,89],88:[2,89],89:[2,89],91:[2,89],93:[2,89],98:[2,89],99:[2,89],100:[2,89],107:[2,89],110:[2,89],111:[2,89],112:[2,89],113:[2,89]},{9:[2,92],32:[2,92],45:[2,92],49:[2,92],54:[2,92],61:[2,92],84:120,86:[2,92],91:[2,92],93:[2,92],98:[2,92],99:[2,92],100:[2,92],107:[2,92],110:[2,92],111:[2,92],112:[2,92],113:[2,92]},{19:[2,122],21:[2,122],61:[2,122],78:[2,122],95:[2,122],114:121,125:[2,122],126:[2,122],127:[2,122],128:[2,122],129:[2,122],130:[2,122],131:[2,122],132:[2,122],133:[2,122],134:[2,122]},{9:[2,94],32:[2,94],45:[2,94],49:[2,94],54:[2,94],61:[2,94],86:[2,94],91:[2,94],93:[2,94],98:[2,94],99:[2,94],100:[2,94],107:[2,94],110:[2,94],111:[2,94],112:[2,94],113:[2,94]},{9:[2,95],32:[2,95],45:[2,95],49:[2,95],54:[2,95],61:[2,95],86:[2,95],91:[2,95],93:[2,95],98:[2,95],99:[2,95],100:[2,95],107:[2,95],110:[2,95],111:[2,95],112:[2,95],113:[2,95]},{19:[1,20],21:[1,22],26:122,63:18,64:19,133:[1,21],134:[1,23],135:[1,24]},{9:[2,97],32:[2,97],45:[2,97],49:[2,97],54:[2,97],61:[2,97],86:[2,97],91:[2,97],93:[2,97],98:[2,97],99:[2,97],100:[2,97],107:[2,97],110:[2,97],111:[2,97],112:[2,97],113:[2,97]},{19:[1,20],21:[1,22],27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,91],63:84,65:123,71:[1,81],73:82,75:85,76:[1,83],77:86,78:[1,87],81:[1,88],82:[1,89],83:90,87:[1,92],88:[1,93],89:[1,94],133:[1,21],134:[1,23]},{19:[2,69],21:[2,69],133:[2,69],134:[2,69]},{19:[2,71],21:[2,71],133:[2,71],134:[2,71]},{19:[2,39],21:[2,39],30:[2,39],36:[2,39],38:[2,39],39:[2,39],133:[2,39],134:[2,39]},{32:[2,43],45:[2,43],61:[2,43]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,42:124,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{32:[2,47],45:[2,47],49:[2,47],61:[2,47]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,46:125,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{32:[2,48],45:[2,48],49:[2,48],61:[2,48]},{32:[2,51],45:[2,51],49:[2,51],54:[2,51],61:[2,51]},{19:[1,20],21:[1,22],32:[2,53],34:60,38:[1,45],41:63,45:[2,53],49:[2,53],50:126,55:57,56:58,59:59,60:[1,61],61:[2,53],62:[1,62],63:65,67:64,69:[1,66],70:[1,67],133:[1,21],134:[1,23]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:127,58:128,61:[2,56],110:[1,129],111:[1,130],112:[1,131],113:[1,132]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:133,58:128,61:[2,56],68:134,107:[1,135],110:[1,129],111:[1,130],112:[1,131],113:[1,132]},{9:[2,73],32:[2,73],45:[2,73],49:[2,73],54:[2,73],61:[2,73],79:136,80:137,90:138,91:[1,113],93:[1,114],94:115,96:139,97:140,98:[1,116],99:[1,117],100:[1,118],101:[1,141],102:[1,142],103:[1,143],104:[1,144],105:[1,145],106:[1,146],107:[2,73],110:[2,73],111:[2,73],112:[2,73],113:[2,73]},{9:[2,75],32:[2,75],45:[2,75],49:[2,75],54:[2,75],61:[2,75],80:147,91:[1,113],93:[1,114],94:115,98:[1,116],99:[1,117],100:[1,118],107:[2,75],110:[2,75],111:[2,75],112:[2,75],113:[2,75]},{9:[2,76],32:[2,76],45:[2,76],49:[2,76],54:[2,76],61:[2,76],74:148,80:112,91:[1,113],93:[1,114],94:115,98:[1,116],99:[1,117],100:[1,118],107:[2,76],110:[2,76],111:[2,76],112:[2,76],113:[2,76]},{9:[2,86],32:[2,86],45:[2,86],49:[2,86],54:[2,86],61:[2,86],91:[2,86],93:[2,86],98:[2,86],99:[2,86],100:[2,86],107:[2,86],110:[2,86],111:[2,86],112:[2,86],113:[2,86]},{92:149,129:[1,150],130:[1,151],131:[1,152],132:[1,153]},{92:154,129:[1,150],130:[1,151],131:[1,152],132:[1,153]},{95:[1,155]},{95:[2,105]},{95:[2,106]},{95:[2,107]},{9:[2,79],32:[2,79],45:[2,79],49:[2,79],54:[2,79],61:[2,79],107:[2,79],110:[2,79],111:[2,79],112:[2,79],113:[2,79]},{9:[2,90],32:[2,90],45:[2,90],49:[2,90],54:[2,90],61:[2,90],85:156,86:[1,157],91:[2,90],93:[2,90],98:[2,90],99:[2,90],100:[2,90],107:[2,90],110:[2,90],111:[2,90],112:[2,90],113:[2,90]},{19:[1,20],21:[1,22],61:[1,158],63:162,78:[1,163],92:164,95:[1,165],109:161,115:159,116:160,125:[1,166],126:[1,167],127:[1,168],128:[1,169],129:[1,150],130:[1,151],131:[1,152],132:[1,153],133:[1,21],134:[1,23]},{9:[2,96],32:[2,96],45:[2,96],49:[2,96],54:[2,96],61:[2,96],86:[2,96],91:[2,96],93:[2,96],98:[2,96],99:[2,96],100:[2,96],107:[2,96],110:[2,96],111:[2,96],112:[2,96],113:[2,96]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:170,107:[2,66],110:[2,66],111:[2,66],112:[2,66],113:[2,66]},{32:[2,41],45:[2,41],61:[2,41]},{32:[2,45],45:[2,45],49:[2,45],61:[2,45]},{32:[2,49],45:[2,49],49:[2,49],54:[2,49],61:[2,49]},{9:[2,22],25:171,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,57],32:[2,57],45:[2,57],49:[2,57],54:[2,57],61:[2,57]},{9:[2,117],32:[2,117],45:[2,117],49:[2,117],54:[2,117],61:[2,117]},{9:[2,118],32:[2,118],45:[2,118],49:[2,118],54:[2,118],61:[2,118]},{9:[2,119],32:[2,119],45:[2,119],49:[2,119],54:[2,119],61:[2,119]},{9:[2,120],32:[2,120],45:[2,120],49:[2,120],54:[2,120],61:[2,120]},{9:[2,22],25:172,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,67],32:[2,67],45:[2,67],49:[2,67],54:[2,67],61:[2,67],107:[2,67],110:[2,67],111:[2,67],112:[2,67],113:[2,67]},{19:[1,20],21:[1,22],63:173,133:[1,21],134:[1,23]},{9:[2,85],32:[2,85],45:[2,85],49:[2,85],54:[2,85],61:[2,85],91:[2,85],93:[2,85],98:[2,85],99:[2,85],100:[2,85],101:[2,85],102:[2,85],103:[2,85],104:[2,85],105:[2,85],106:[2,85],107:[2,85],110:[2,85],111:[2,85],112:[2,85],113:[2,85]},{9:[2,98],32:[2,98],45:[2,98],49:[2,98],54:[2,98],61:[2,98],91:[2,98],93:[2,98],98:[2,98],99:[2,98],100:[2,98],101:[2,98],102:[2,98],103:[2,98],104:[2,98],105:[2,98],106:[2,98],107:[2,98],110:[2,98],111:[2,98],112:[2,98],113:[2,98]},{9:[2,99],32:[2,99],45:[2,99],49:[2,99],54:[2,99],61:[2,99],91:[2,99],93:[2,99],98:[2,99],99:[2,99],100:[2,99],101:[2,99],102:[2,99],103:[2,99],104:[2,99],105:[2,99],106:[2,99],107:[2,99],110:[2,99],111:[2,99],112:[2,99],113:[2,99]},{95:[1,174]},{95:[1,175]},{95:[2,108]},{95:[2,109]},{95:[2,110]},{95:[2,111]},{95:[2,112]},{95:[2,113]},{9:[2,87],32:[2,87],45:[2,87],49:[2,87],54:[2,87],61:[2,87],91:[2,87],93:[2,87],98:[2,87],99:[2,87],100:[2,87],107:[2,87],110:[2,87],111:[2,87],112:[2,87],113:[2,87]},{9:[2,77],32:[2,77],45:[2,77],49:[2,77],54:[2,77],61:[2,77],80:147,91:[1,113],93:[1,114],94:115,98:[1,116],99:[1,117],100:[1,118],107:[2,77],110:[2,77],111:[2,77],112:[2,77],113:[2,77]},{9:[2,100],32:[2,100],45:[2,100],49:[2,100],54:[2,100],61:[2,100],91:[2,100],93:[2,100],98:[2,100],99:[2,100],100:[2,100],101:[2,100],102:[2,100],103:[2,100],104:[2,100],105:[2,100],106:[2,100],107:[2,100],110:[2,100],111:[2,100],112:[2,100],113:[2,100]},{9:[2,145],19:[2,145],21:[2,145],32:[2,145],45:[2,145],49:[2,145],54:[2,145],61:[2,145],78:[2,145],91:[2,145],93:[2,145],95:[2,145],98:[2,145],99:[2,145],100:[2,145],101:[2,145],102:[2,145],103:[2,145],104:[2,145],105:[2,145],106:[2,145],107:[2,145],110:[2,145],111:[2,145],112:[2,145],113:[2,145],123:[2,145],124:[2,145],125:[2,145],126:[2,145],127:[2,145],128:[2,145],129:[2,145],130:[2,145],131:[2,145],132:[2,145],133:[2,145],134:[2,145]},{9:[2,146],19:[2,146],21:[2,146],32:[2,146],45:[2,146],49:[2,146],54:[2,146],61:[2,146],78:[2,146],91:[2,146],93:[2,146],95:[2,146],98:[2,146],99:[2,146],100:[2,146],101:[2,146],102:[2,146],103:[2,146],104:[2,146],105:[2,146],106:[2,146],107:[2,146],110:[2,146],111:[2,146],112:[2,146],113:[2,146],123:[2,146],124:[2,146],125:[2,146],126:[2,146],127:[2,146],128:[2,146],129:[2,146],130:[2,146],131:[2,146],132:[2,146],133:[2,146],134:[2,146]},{9:[2,147],19:[2,147],21:[2,147],32:[2,147],45:[2,147],49:[2,147],54:[2,147],61:[2,147],78:[2,147],91:[2,147],93:[2,147],95:[2,147],98:[2,147],99:[2,147],100:[2,147],101:[2,147],102:[2,147],103:[2,147],104:[2,147],105:[2,147],106:[2,147],107:[2,147],110:[2,147],111:[2,147],112:[2,147],113:[2,147],123:[2,147],124:[2,147],125:[2,147],126:[2,147],127:[2,147],128:[2,147],129:[2,147],130:[2,147],131:[2,147],132:[2,147],133:[2,147],134:[2,147]},{9:[2,148],19:[2,148],21:[2,148],32:[2,148],45:[2,148],49:[2,148],54:[2,148],61:[2,148],78:[2,148],91:[2,148],93:[2,148],95:[2,148],98:[2,148],99:[2,148],100:[2,148],101:[2,148],102:[2,148],103:[2,148],104:[2,148],105:[2,148],106:[2,148],107:[2,148],110:[2,148],111:[2,148],112:[2,148],113:[2,148],123:[2,148],124:[2,148],125:[2,148],126:[2,148],127:[2,148],128:[2,148],129:[2,148],130:[2,148],131:[2,148],132:[2,148],133:[2,148],134:[2,148]},{9:[2,101],32:[2,101],45:[2,101],49:[2,101],54:[2,101],61:[2,101],91:[2,101],93:[2,101],98:[2,101],99:[2,101],100:[2,101],101:[2,101],102:[2,101],103:[2,101],104:[2,101],105:[2,101],106:[2,101],107:[2,101],110:[2,101],111:[2,101],112:[2,101],113:[2,101]},{9:[2,102],32:[2,102],45:[2,102],49:[2,102],54:[2,102],61:[2,102],91:[2,102],93:[2,102],98:[2,102],99:[2,102],100:[2,102],101:[2,102],102:[2,102],103:[2,102],104:[2,102],105:[2,102],106:[2,102],107:[2,102],110:[2,102],111:[2,102],112:[2,102],113:[2,102]},{9:[2,93],32:[2,93],45:[2,93],49:[2,93],54:[2,93],61:[2,93],86:[2,93],91:[2,93],93:[2,93],98:[2,93],99:[2,93],100:[2,93],107:[2,93],110:[2,93],111:[2,93],112:[2,93],113:[2,93]},{27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],83:176,87:[1,92],88:[1,93],89:[1,94]},{9:[2,121],32:[2,121],45:[2,121],49:[2,121],54:[2,121],61:[2,121],107:[2,121],110:[2,121],111:[2,121],112:[2,121],113:[2,121]},{19:[2,123],21:[2,123],61:[2,123],78:[2,123],95:[2,123],125:[2,123],126:[2,123],127:[2,123],128:[2,123],129:[2,123],130:[2,123],131:[2,123],132:[2,123],133:[2,123],134:[2,123]},{19:[2,124],21:[2,124],61:[2,124],78:[2,124],95:[2,124],125:[2,124],126:[2,124],127:[2,124],128:[2,124],129:[2,124],130:[2,124],131:[2,124],132:[2,124],133:[2,124],134:[2,124]},{19:[2,125],21:[2,125],61:[2,125],78:[2,125],95:[2,125],125:[2,125],126:[2,125],127:[2,125],128:[2,125],129:[2,125],130:[2,125],131:[2,125],132:[2,125],133:[2,125],134:[2,125]},{19:[2,131],21:[2,131],61:[2,131],78:[2,131],93:[1,179],95:[2,131],117:177,121:178,125:[2,131],126:[2,131],127:[2,131],128:[2,131],129:[2,131],130:[2,131],131:[2,131],132:[2,131],133:[2,131],134:[2,131]},{118:180,120:181,122:[1,182]},{9:[2,137],19:[2,137],21:[2,137],32:[2,137],45:[2,137],49:[2,137],54:[2,137],61:[2,137],78:[2,137],95:[2,137],107:[2,137],110:[2,137],111:[2,137],112:[2,137],113:[2,137],123:[1,183],124:[1,184],125:[2,137],126:[2,137],127:[2,137],128:[2,137],129:[2,137],130:[2,137],131:[2,137],132:[2,137],133:[2,137],134:[2,137]},{9:[2,140],19:[2,140],21:[2,140],32:[2,140],45:[2,140],49:[2,140],54:[2,140],61:[2,140],78:[2,140],95:[2,140],107:[2,140],110:[2,140],111:[2,140],112:[2,140],113:[2,140],125:[2,140],126:[2,140],127:[2,140],128:[2,140],129:[2,140],130:[2,140],131:[2,140],132:[2,140],133:[2,140],134:[2,140]},{9:[2,141],19:[2,141],21:[2,141],32:[2,141],45:[2,141],49:[2,141],54:[2,141],61:[2,141],78:[2,141],95:[2,141],107:[2,141],110:[2,141],111:[2,141],112:[2,141],113:[2,141],125:[2,141],126:[2,141],127:[2,141],128:[2,141],129:[2,141],130:[2,141],131:[2,141],132:[2,141],133:[2,141],134:[2,141]},{9:[2,142],19:[2,142],21:[2,142],32:[2,142],45:[2,142],49:[2,142],54:[2,142],61:[2,142],78:[2,142],95:[2,142],107:[2,142],110:[2,142],111:[2,142],112:[2,142],113:[2,142],125:[2,142],126:[2,142],127:[2,142],128:[2,142],129:[2,142],130:[2,142],131:[2,142],132:[2,142],133:[2,142],134:[2,142]},{9:[2,143],19:[2,143],21:[2,143],32:[2,143],45:[2,143],49:[2,143],54:[2,143],61:[2,143],78:[2,143],95:[2,143],107:[2,143],110:[2,143],111:[2,143],112:[2,143],113:[2,143],125:[2,143],126:[2,143],127:[2,143],128:[2,143],129:[2,143],130:[2,143],131:[2,143],132:[2,143],133:[2,143],134:[2,143]},{9:[2,144],19:[2,144],21:[2,144],32:[2,144],45:[2,144],49:[2,144],54:[2,144],61:[2,144],78:[2,144],95:[2,144],107:[2,144],110:[2,144],111:[2,144],112:[2,144],113:[2,144],125:[2,144],126:[2,144],127:[2,144],128:[2,144],129:[2,144],130:[2,144],131:[2,144],132:[2,144],133:[2,144],134:[2,144]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:185,58:128,61:[2,56],68:134,107:[1,135],110:[1,129],111:[1,130],112:[1,131],113:[1,132]},{9:[1,51],32:[2,60],45:[2,60],49:[2,60],54:[2,60],61:[2,60]},{9:[1,51],32:[2,64],45:[2,64],49:[2,64],54:[2,64],61:[2,64]},{19:[1,20],21:[1,22],63:187,92:164,95:[1,165],108:186,109:188,125:[1,166],126:[1,167],127:[1,168],128:[1,169],129:[1,150],130:[1,151],131:[1,152],132:[1,153],133:[1,21],134:[1,23]},{9:[2,103],32:[2,103],45:[2,103],49:[2,103],54:[2,103],61:[2,103],91:[2,103],93:[2,103],98:[2,103],99:[2,103],100:[2,103],101:[2,103],102:[2,103],103:[2,103],104:[2,103],105:[2,103],106:[2,103],107:[2,103],110:[2,103],111:[2,103],112:[2,103],113:[2,103]},{9:[2,104],32:[2,104],45:[2,104],49:[2,104],54:[2,104],61:[2,104],91:[2,104],93:[2,104],98:[2,104],99:[2,104],100:[2,104],101:[2,104],102:[2,104],103:[2,104],104:[2,104],105:[2,104],106:[2,104],107:[2,104],110:[2,104],111:[2,104],112:[2,104],113:[2,104]},{9:[2,91],32:[2,91],45:[2,91],49:[2,91],54:[2,91],61:[2,91],86:[2,91],91:[2,91],93:[2,91],98:[2,91],99:[2,91],100:[2,91],107:[2,91],110:[2,91],111:[2,91],112:[2,91],113:[2,91]},{19:[2,126],21:[2,126],61:[2,126],78:[2,126],95:[2,126],125:[2,126],126:[2,126],127:[2,126],128:[2,126],129:[2,126],130:[2,126],131:[2,126],132:[2,126],133:[2,126],134:[2,126]},{19:[2,132],21:[2,132],61:[2,132],78:[2,132],95:[2,132],125:[2,132],126:[2,132],127:[2,132],128:[2,132],129:[2,132],130:[2,132],131:[2,132],132:[2,132],133:[2,132],134:[2,132]},{19:[2,128],21:[2,128],61:[2,128],78:[2,128],95:[2,128],119:189,122:[2,128],125:[2,128],126:[2,128],127:[2,128],128:[2,128],129:[2,128],130:[2,128],131:[2,128],132:[2,128],133:[2,128],134:[2,128]},{19:[2,127],21:[2,127],61:[2,127],78:[2,127],95:[2,127],120:190,122:[1,182],125:[2,127],126:[2,127],127:[2,127],128:[2,127],129:[2,127],130:[2,127],131:[2,127],132:[2,127],133:[2,127],134:[2,127]},{19:[2,133],21:[2,133],61:[2,133],78:[2,133],95:[2,133],122:[2,133],125:[2,133],126:[2,133],127:[2,133],128:[2,133],129:[2,133],130:[2,133],131:[2,133],132:[2,133],133:[2,133],134:[2,133]},{19:[1,20],21:[1,22],63:191,133:[1,21],134:[1,23]},{9:[2,138],19:[2,138],21:[2,138],32:[2,138],45:[2,138],49:[2,138],54:[2,138],61:[2,138],78:[2,138],95:[2,138],107:[2,138],110:[2,138],111:[2,138],112:[2,138],113:[2,138],125:[2,138],126:[2,138],127:[2,138],128:[2,138],129:[2,138],130:[2,138],131:[2,138],132:[2,138],133:[2,138],134:[2,138]},{19:[1,20],21:[1,22],63:192,133:[1,21],134:[1,23]},{9:[2,22],25:193,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,114],32:[2,114],45:[2,114],49:[2,114],54:[2,114],61:[2,114],107:[2,114],110:[2,114],111:[2,114],112:[2,114],113:[2,114]},{9:[2,115],32:[2,115],45:[2,115],49:[2,115],54:[2,115],61:[2,115],107:[2,115],110:[2,115],111:[2,115],112:[2,115],113:[2,115]},{9:[2,116],32:[2,116],45:[2,116],49:[2,116],54:[2,116],61:[2,116],107:[2,116],110:[2,116],111:[2,116],112:[2,116],113:[2,116]},{19:[2,130],21:[2,130],61:[2,130],78:[2,130],95:[2,130],120:194,122:[1,182],125:[2,130],126:[2,130],127:[2,130],128:[2,130],129:[2,130],130:[2,130],131:[2,130],132:[2,130],133:[2,130],134:[2,130]},{19:[2,134],21:[2,134],61:[2,134],78:[2,134],95:[2,134],122:[2,134],125:[2,134],126:[2,134],127:[2,134],128:[2,134],129:[2,134],130:[2,134],131:[2,134],132:[2,134],133:[2,134],134:[2,134]},{19:[2,135],21:[2,135],61:[2,135],78:[2,135],93:[1,195],95:[2,135],122:[2,135],125:[2,135],126:[2,135],127:[2,135],128:[2,135],129:[2,135],130:[2,135],131:[2,135],132:[2,135],133:[2,135],134:[2,135]},{9:[2,139],19:[2,139],21:[2,139],32:[2,139],45:[2,139],49:[2,139],54:[2,139],61:[2,139],78:[2,139],95:[2,139],107:[2,139],110:[2,139],111:[2,139],112:[2,139],113:[2,139],125:[2,139],126:[2,139],127:[2,139],128:[2,139],129:[2,139],130:[2,139],131:[2,139],132:[2,139],133:[2,139],134:[2,139]},{9:[1,51],32:[2,65],45:[2,65],49:[2,65],54:[2,65],61:[2,65]},{19:[2,129],21:[2,129],61:[2,129],78:[2,129],95:[2,129],122:[2,129],125:[2,129],126:[2,129],127:[2,129],128:[2,129],129:[2,129],130:[2,129],131:[2,129],132:[2,129],133:[2,129],134:[2,129]},{19:[2,136],21:[2,136],61:[2,136],78:[2,136],95:[2,136],122:[2,136],125:[2,136],126:[2,136],127:[2,136],128:[2,136],129:[2,136],130:[2,136],131:[2,136],132:[2,136],133:[2,136],134:[2,136]}],
defaultActions: {5:[2,13],25:[2,1],53:[2,35],116:[2,105],117:[2,106],118:[2,107],141:[2,108],142:[2,109],143:[2,110],144:[2,111],145:[2,112],146:[2,113]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';


  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() { debugger;
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Return object with p1 key, p2 value
  function keyInt(key, val) {
    var ret = {};
    ret[key] = parseInt(val, 10);
    return ret;
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 87;
break;
case 2:return 88;
break;
case 3:return 123;
break;
case 4:return 89;
break;
case 5:return 133;
break;
case 6:return 18;
break;
case 7:return 20;
break;
case 8:return 22;
break;
case 9:return 28;
break;
case 10:return 113;
break;
case 11:return 36;
break;
case 12:return 39;
break;
case 13:return 71;
break;
case 14:return 76;
break;
case 15:return 81;
break;
case 16:return 82;
break;
case 17:return 91;
break;
case 18:return 'IT_AND';
break;
case 19:return 86;
break;
case 20:return 101;
break;
case 21:return 102;
break;
case 22:return 103;
break;
case 23:return 104;
break;
case 24:return 98;
break;
case 25:return 99;
break;
case 26:return 100;
break;
case 27:return 105;
break;
case 28:return 106;
break;
case 29:return 23;
break;
case 30:return 30;
break;
case 31:return 32;
break;
case 32:return 38;
break;
case 33:return 49;
break;
case 34:return 45;
break;
case 35:return 54;
break;
case 36:return 60;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 70;
break;
case 40:return 124;
break;
case 41:return 69;
break;
case 42:return 78;
break;
case 43:return 93;
break;
case 44:return 107;
break;
case 45:return 110;
break;
case 46:return 111;
break;
case 47:return 112;
break;
case 48:return 122;
break;
case 49:return 127;
break;
case 50:return 128;
break;
case 51:return 9;
break;
case 52:return 126;
break;
case 53:return 125;
break;
case 54:return 95;
break;
case 55:return 'ANON';
break;
case 56:return 19;
break;
case 57:return 21;
break;
case 58:return 134;
break;
case 59:return 135;
break;
case 60:return 131;
break;
case 61:return 132;
break;
case 62:return 129;
break;
case 63:return 130;
break;
case 64:return 6
break;
case 65:return 'invalid character'
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:start\b)/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(%([#+A-Z_a-z][#+0-9A-Z_a-z]*)?\{([^%]|\\%)*%\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:(\\\[(((( )|((\\t)|((\\r)|(\\n))))))*\\\]))/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShexParser;
exports.Parser = ShexParser.Parser;
exports.parse = function () { return ShexParser.parse.apply(ShexParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}