/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShexParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"QCODE_E_Plus":8,"CODE":9,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_C":10,"shape":11,"start":12,"Qstatement_E_Star":13,"statement":14,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C":15,"baseDecl":16,"prefixDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_start":22,"=":23,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QCODE_E_Star_C":24,"QCODE_E_Star":25,"shapeLabel":26,"shapeDefinition":27,"IT_VIRTUAL":28,"Q_O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":29,"{":30,"QoneOfShape_E_Opt":31,"}":32,"O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":33,"include":34,"inclPropertySet":35,"IT_CLOSED":36,"oneOfShape":37,"&":38,"IT_EXTRA":39,"Qpredicate_E_Plus":40,"predicate":41,"someOfShape":42,"Q_O_Q_PIPE_E_S_QsomeOfShape_E_C_E_Star":43,"O_Q_PIPE_E_S_QsomeOfShape_E_C":44,"|":45,"groupShape":46,"Q_O_Q_OR_E_S_QgroupShape_E_C_E_Star":47,"O_Q_OR_E_S_QgroupShape_E_C":48,"||":49,"unaryShape":50,"Q_O_Q_COMMA_E_S_QunaryShape_E_C_E_Star":51,"Q_COMMA_E_Opt":52,"O_Q_COMMA_E_S_QunaryShape_E_C":53,",":54,"O_QtripleConstraint_E_Or_Qinclude_E_Or_Q_LPAREN_E_S_QoneOfShape_E_S_Q_RPAREN_E_S_Qcardinality_E_Opt_S_QCODE_E_Star_C":55,"id":56,"Qcardinality_E_Opt":57,"cardinality":58,"tripleConstraint":59,"(":60,")":61,"$":62,"iri":63,"blankNode":64,"valueClass":65,"Qannotation_E_Star":66,"senseFlags":67,"annotation":68,"!":69,"Q_CARROT_E_Opt":70,"^":71,"Q_NOT_E_Opt":72,"a":73,"IT_LITERAL":74,"QxsFacet_E_Star":75,"O_QIT_IRI_E_Or_QIT_NONLITERAL_E_C":76,"O_QIT_PATTERN_E_S_Qstring_E_C":77,"groupShapeConstr":78,"IT_BNODE":79,"datatype":80,"valueSet":81,".":82,"xsFacet":83,"IT_IRI":84,"IT_NONLITERAL":85,"IT_PATTERN":86,"string":87,"Q_O_QIT_PATTERN_E_S_Qstring_E_C_E_Opt":88,"shapeOrRef":89,"Q_O_QIT_AND_E_Or_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":90,"O_QIT_AND_E_Or_QIT_OR_E_C":91,"IT_AND":92,"IT_OR":93,"O_QIT_AND_E_Or_QIT_OR_E_S_QshapeOrRef_E_C":94,"LANGTAG":95,"PNAME_LN":96,"@":97,"O_QIT_PATTERN_E_Or_Q_KINDA_E_C":98,"O_QIT_MININCLUSIVE_E_Or_QIT_MINEXCLUSIVE_E_Or_QIT_MAXINCLUSIVE_E_Or_QIT_MAXEXCLUSIVE_E_C":99,"INTEGER":100,"O_QIT_LENGTH_E_Or_QIT_MINLENGTH_E_Or_QIT_MAXLENGTH_E_C":101,"O_QIT_TOTALDIGITS_E_Or_QIT_FRACTIONDIGITS_E_C":102,"~":103,"IT_MININCLUSIVE":104,"IT_MINEXCLUSIVE":105,"IT_MAXINCLUSIVE":106,"IT_MAXEXCLUSIVE":107,"IT_LENGTH":108,"IT_MINLENGTH":109,"IT_MAXLENGTH":110,"IT_TOTALDIGITS":111,"IT_FRACTIONDIGITS":112,";":113,"O_Qiri_E_Or_Qliteral_E_C":114,"literal":115,"*":116,"+":117,"?":118,"REPEAT_RANGE":119,"Qvalue_E_Star":120,"value":121,"iriRange":122,"Q_O_Q_KINDA_E_S_Qexclusion_E_Star_C_E_Opt":123,"Qexclusion_E_Plus":124,"Qexclusion_E_Star":125,"exclusion":126,"O_Q_KINDA_E_S_Qexclusion_E_Star_C":127,"-":128,"Q_KINDA_E_Opt":129,"^^":130,"DECIMAL":131,"DOUBLE":132,"createLiteral":133,"substr":134,"toLowerCase":135,"XSD_DOUBLE":136,"IT_true":137,"IT_false":138,"STRING_LITERAL1":139,"STRING_LITERAL2":140,"STRING_LITERAL_LONG1":141,"STRING_LITERAL_LONG2":142,"prefixedName":143,"BLANK_NODE_LABEL":144,"ANON":145,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"CODE",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_start",23:"=",28:"IT_VIRTUAL",30:"{",32:"}",36:"IT_CLOSED",38:"&",39:"IT_EXTRA",45:"|",49:"||",54:",",60:"(",61:")",62:"$",69:"!",71:"^",73:"a",74:"IT_LITERAL",79:"IT_BNODE",82:".",84:"IT_IRI",85:"IT_NONLITERAL",86:"IT_PATTERN",92:"IT_AND",93:"IT_OR",95:"LANGTAG",96:"PNAME_LN",97:"@",100:"INTEGER",103:"~",104:"IT_MININCLUSIVE",105:"IT_MINEXCLUSIVE",106:"IT_MAXINCLUSIVE",107:"IT_MAXEXCLUSIVE",108:"IT_LENGTH",109:"IT_MINLENGTH",110:"IT_MAXLENGTH",111:"IT_TOTALDIGITS",112:"IT_FRACTIONDIGITS",113:";",116:"*",117:"+",118:"?",119:"REPEAT_RANGE",128:"-",130:"^^",131:"DECIMAL",132:"DOUBLE",133:"createLiteral",134:"substr",135:"toLowerCase",136:"XSD_DOUBLE",137:"IT_true",138:"IT_false",139:"STRING_LITERAL1",140:"STRING_LITERAL2",141:"STRING_LITERAL_LONG1",142:"STRING_LITERAL_LONG2",144:"BLANK_NODE_LABEL",145:"ANON"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,2],[10,1],[10,1],[10,1],[13,0],[13,2],[15,2],[5,0],[5,1],[14,1],[14,1],[14,1],[7,1],[7,1],[16,2],[17,3],[12,3],[25,0],[25,2],[24,1],[24,2],[11,3],[11,4],[27,4],[33,1],[33,1],[33,1],[29,0],[29,2],[31,0],[31,1],[34,2],[35,2],[40,1],[40,2],[37,2],[44,2],[43,0],[43,2],[42,2],[48,2],[47,0],[47,2],[46,3],[53,2],[51,0],[51,2],[52,0],[52,1],[50,1],[50,2],[57,0],[57,1],[55,1],[55,1],[55,5],[56,2],[26,1],[26,1],[59,5],[59,6],[66,0],[66,2],[67,2],[67,2],[70,0],[70,1],[72,0],[72,1],[41,1],[41,1],[65,2],[65,1],[65,2],[65,2],[65,3],[65,1],[65,2],[65,1],[65,1],[65,1],[65,1],[75,0],[75,2],[76,1],[76,1],[77,2],[88,0],[88,1],[78,2],[91,1],[91,1],[94,2],[90,0],[90,2],[89,2],[89,2],[89,2],[89,1],[83,2],[83,2],[83,2],[83,2],[98,1],[98,1],[99,1],[99,1],[99,1],[99,1],[101,1],[101,1],[101,1],[102,1],[102,1],[80,1],[68,3],[114,1],[114,1],[58,1],[58,1],[58,1],[58,1],[81,3],[120,0],[120,2],[121,1],[121,1],[122,2],[122,2],[125,0],[125,2],[127,2],[123,0],[123,1],[124,1],[124,2],[126,3],[129,0],[129,1],[115,1],[115,2],[115,3],[115,1],[115,1],[115,5],[115,1],[115,1],[87,1],[87,1],[87,1],[87,1],[63,1],[63,1],[143,1],[143,1],[64,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      Parser.prefixes = null;
      base = basePath = baseRoot = '';
      return $$[$0-1];
    
break;
case 19:
      base = resolveIRI($$[$0])
      basePath = base.replace(/[^\/]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    
break;
case 20:
      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 74:this.$ = RDF_TYPE;
break;
case 100:
      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 101:
      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 102: this.$ = $$[$0]; 
break;
case 145:this.$ = $$[$0-1] + lowercase($$[$0]);
break;
case 146:this.$ = $$[$0-2] + '^^' + $$[$0];
break;
case 147:this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 148:this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 150:this.$ = XSD_TRUE;
break;
case 151:this.$ = XSD_FALSE;
break;
case 152:this.$ = unescapeString($$[$0], 1);
break;
case 153:this.$ = unescapeString($$[$0], 1);
break;
case 154:this.$ = unescapeString($$[$0], 3);
break;
case 155:this.$ = unescapeString($$[$0], 3);
break;
case 158:
      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 159:
      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
}
},
table: [{3:1,4:2,6:[2,2],9:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],28:[2,2],96:[2,2],144:[2,2],145:[2,2]},{1:[3]},{5:3,6:[2,12],7:4,8:13,9:[1,17],10:8,11:11,12:12,15:5,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,25],22:[1,16],26:14,28:[1,15],63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{6:[1,26]},{6:[2,3],9:[2,3],18:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],28:[2,3],96:[2,3],144:[2,3],145:[2,3]},{6:[2,13]},{6:[2,17],9:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],28:[2,17],96:[2,17],144:[2,17],145:[2,17]},{6:[2,18],9:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],28:[2,18],96:[2,18],144:[2,18],145:[2,18]},{6:[2,9],13:27,18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],28:[2,9],96:[2,9],144:[2,9],145:[2,9]},{19:[1,28]},{21:[1,29]},{6:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],28:[2,6],96:[2,6],144:[2,6],145:[2,6]},{6:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],28:[2,7],96:[2,7],144:[2,7],145:[2,7]},{6:[2,8],9:[1,30],18:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],28:[2,8],96:[2,8],144:[2,8],145:[2,8]},{27:31,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,25],26:33,63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{23:[1,34]},{6:[2,4],9:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],28:[2,4],96:[2,4],144:[2,4],145:[2,4]},{6:[2,62],9:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],28:[2,62],30:[2,62],32:[2,62],36:[2,62],38:[2,62],39:[2,62],45:[2,62],49:[2,62],54:[2,62],60:[2,62],61:[2,62],69:[2,62],71:[2,62],73:[2,62],86:[2,62],92:[2,62],93:[2,62],96:[2,62],113:[2,62],116:[2,62],117:[2,62],118:[2,62],119:[2,62],144:[2,62],145:[2,62]},{6:[2,63],9:[2,63],18:[2,63],19:[2,63],20:[2,63],21:[2,63],22:[2,63],28:[2,63],30:[2,63],32:[2,63],36:[2,63],38:[2,63],39:[2,63],45:[2,63],49:[2,63],54:[2,63],60:[2,63],61:[2,63],69:[2,63],71:[2,63],73:[2,63],86:[2,63],92:[2,63],93:[2,63],96:[2,63],113:[2,63],116:[2,63],117:[2,63],118:[2,63],119:[2,63],144:[2,63],145:[2,63]},{6:[2,156],9:[2,156],18:[2,156],19:[2,156],20:[2,156],21:[2,156],22:[2,156],28:[2,156],30:[2,156],32:[2,156],36:[2,156],38:[2,156],39:[2,156],45:[2,156],49:[2,156],54:[2,156],60:[2,156],61:[2,156],69:[2,156],71:[2,156],73:[2,156],74:[2,156],79:[2,156],82:[2,156],84:[2,156],85:[2,156],86:[2,156],92:[2,156],93:[2,156],95:[2,156],96:[2,156],97:[2,156],100:[2,156],103:[2,156],113:[2,156],116:[2,156],117:[2,156],118:[2,156],119:[2,156],128:[2,156],131:[2,156],132:[2,156],137:[2,156],138:[2,156],139:[2,156],140:[2,156],141:[2,156],142:[2,156],144:[2,156],145:[2,156]},{6:[2,157],9:[2,157],18:[2,157],19:[2,157],20:[2,157],21:[2,157],22:[2,157],28:[2,157],30:[2,157],32:[2,157],36:[2,157],38:[2,157],39:[2,157],45:[2,157],49:[2,157],54:[2,157],60:[2,157],61:[2,157],69:[2,157],71:[2,157],73:[2,157],74:[2,157],79:[2,157],82:[2,157],84:[2,157],85:[2,157],86:[2,157],92:[2,157],93:[2,157],95:[2,157],96:[2,157],97:[2,157],100:[2,157],103:[2,157],113:[2,157],116:[2,157],117:[2,157],118:[2,157],119:[2,157],128:[2,157],131:[2,157],132:[2,157],137:[2,157],138:[2,157],139:[2,157],140:[2,157],141:[2,157],142:[2,157],144:[2,157],145:[2,157]},{6:[2,160],9:[2,160],18:[2,160],19:[2,160],20:[2,160],21:[2,160],22:[2,160],28:[2,160],30:[2,160],32:[2,160],36:[2,160],38:[2,160],39:[2,160],45:[2,160],49:[2,160],54:[2,160],60:[2,160],61:[2,160],69:[2,160],71:[2,160],73:[2,160],86:[2,160],92:[2,160],93:[2,160],96:[2,160],113:[2,160],116:[2,160],117:[2,160],118:[2,160],119:[2,160],144:[2,160],145:[2,160]},{6:[2,161],9:[2,161],18:[2,161],19:[2,161],20:[2,161],21:[2,161],22:[2,161],28:[2,161],30:[2,161],32:[2,161],36:[2,161],38:[2,161],39:[2,161],45:[2,161],49:[2,161],54:[2,161],60:[2,161],61:[2,161],69:[2,161],71:[2,161],73:[2,161],86:[2,161],92:[2,161],93:[2,161],96:[2,161],113:[2,161],116:[2,161],117:[2,161],118:[2,161],119:[2,161],144:[2,161],145:[2,161]},{6:[2,158],9:[2,158],18:[2,158],19:[2,158],20:[2,158],21:[2,158],22:[2,158],28:[2,158],30:[2,158],32:[2,158],36:[2,158],38:[2,158],39:[2,158],45:[2,158],49:[2,158],54:[2,158],60:[2,158],61:[2,158],69:[2,158],71:[2,158],73:[2,158],74:[2,158],79:[2,158],82:[2,158],84:[2,158],85:[2,158],86:[2,158],92:[2,158],93:[2,158],95:[2,158],96:[2,158],97:[2,158],100:[2,158],103:[2,158],113:[2,158],116:[2,158],117:[2,158],118:[2,158],119:[2,158],128:[2,158],131:[2,158],132:[2,158],137:[2,158],138:[2,158],139:[2,158],140:[2,158],141:[2,158],142:[2,158],144:[2,158],145:[2,158]},{6:[2,159],9:[2,159],18:[2,159],19:[2,159],20:[2,159],21:[2,159],22:[2,159],28:[2,159],30:[2,159],32:[2,159],36:[2,159],38:[2,159],39:[2,159],45:[2,159],49:[2,159],54:[2,159],60:[2,159],61:[2,159],69:[2,159],71:[2,159],73:[2,159],74:[2,159],79:[2,159],82:[2,159],84:[2,159],85:[2,159],86:[2,159],92:[2,159],93:[2,159],95:[2,159],96:[2,159],97:[2,159],100:[2,159],103:[2,159],113:[2,159],116:[2,159],117:[2,159],118:[2,159],119:[2,159],128:[2,159],131:[2,159],132:[2,159],137:[2,159],138:[2,159],139:[2,159],140:[2,159],141:[2,159],142:[2,159],144:[2,159],145:[2,159]},{1:[2,1]},{6:[2,11],7:36,11:38,12:37,14:35,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,25],22:[1,16],26:14,28:[1,15],63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{6:[2,19],9:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],28:[2,19],96:[2,19],144:[2,19],145:[2,19]},{19:[1,39]},{6:[2,5],9:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],28:[2,5],96:[2,5],144:[2,5],145:[2,5]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:40,28:[2,22],96:[2,22],144:[2,22],145:[2,22]},{30:[1,41],33:42,34:43,35:44,36:[1,45],38:[1,46],39:[1,47]},{27:48,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,25],24:49,26:50,27:51,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32],63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{6:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],28:[2,10],96:[2,10],144:[2,10],145:[2,10]},{6:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],28:[2,14],96:[2,14],144:[2,14],145:[2,14]},{6:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],28:[2,15],96:[2,15],144:[2,15],145:[2,15]},{6:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],28:[2,16],96:[2,16],144:[2,16],145:[2,16]},{6:[2,20],9:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],28:[2,20],96:[2,20],144:[2,20],145:[2,20]},{6:[2,26],9:[1,52],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],28:[2,26],96:[2,26],144:[2,26],145:[2,26]},{19:[1,20],21:[1,25],31:53,32:[2,34],34:61,37:54,38:[1,46],41:64,42:55,46:56,50:57,55:58,56:59,59:60,60:[1,62],62:[1,63],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{30:[2,33],36:[2,33],38:[2,33],39:[2,33]},{30:[2,29],36:[2,29],38:[2,29],39:[2,29]},{30:[2,30],36:[2,30],38:[2,30],39:[2,30]},{30:[2,31],36:[2,31],38:[2,31],39:[2,31]},{19:[1,20],21:[1,25],26:70,63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{19:[1,20],21:[1,25],40:71,41:72,63:67,73:[1,66],96:[1,24],143:21},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:73,28:[2,22],96:[2,22],144:[2,22],145:[2,22]},{6:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],28:[2,21],96:[2,21],144:[2,21],145:[2,21]},{6:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],28:[2,24],96:[2,24],144:[2,24],145:[2,24]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:74,28:[2,22],96:[2,22],144:[2,22],145:[2,22]},{6:[2,23],9:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],28:[2,23],32:[2,23],45:[2,23],49:[2,23],54:[2,23],61:[2,23],96:[2,23],144:[2,23],145:[2,23]},{32:[1,75]},{32:[2,35]},{32:[2,42],43:76,45:[2,42],61:[2,42]},{32:[2,46],45:[2,46],47:77,49:[2,46],61:[2,46]},{32:[2,50],45:[2,50],49:[2,50],51:78,54:[2,50],61:[2,50]},{32:[2,54],45:[2,54],49:[2,54],54:[2,54],61:[2,54]},{19:[1,20],21:[1,25],34:61,38:[1,46],41:64,55:79,59:60,60:[1,62],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{32:[2,58],45:[2,58],49:[2,58],54:[2,58],61:[2,58]},{32:[2,59],45:[2,59],49:[2,59],54:[2,59],61:[2,59]},{19:[1,20],21:[1,25],34:61,37:80,38:[1,46],41:64,42:55,46:56,50:57,55:58,56:59,59:60,60:[1,62],62:[1,63],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{19:[1,20],21:[1,25],26:81,63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{19:[1,20],21:[1,25],27:97,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,94],63:92,65:82,74:[1,83],76:84,78:87,79:[1,85],80:86,81:88,82:[1,89],84:[1,90],85:[1,91],89:93,95:[1,95],96:[1,24],97:[1,96],143:21},{19:[1,20],21:[1,25],41:98,63:67,73:[1,66],96:[1,24],143:21},{19:[2,74],21:[2,74],30:[2,74],36:[2,74],38:[2,74],39:[2,74],60:[2,74],73:[2,74],74:[2,74],79:[2,74],82:[2,74],84:[2,74],85:[2,74],95:[2,74],96:[2,74],97:[2,74]},{19:[2,75],21:[2,75],30:[2,75],36:[2,75],38:[2,75],39:[2,75],60:[2,75],73:[2,75],74:[2,75],79:[2,75],82:[2,75],84:[2,75],85:[2,75],95:[2,75],96:[2,75],97:[2,75]},{19:[2,70],21:[2,70],70:99,71:[1,100],73:[2,70],96:[2,70]},{19:[2,72],21:[2,72],69:[1,102],72:101,73:[2,72],96:[2,72]},{30:[2,36],32:[2,36],36:[2,36],38:[2,36],39:[2,36],45:[2,36],49:[2,36],54:[2,36],61:[2,36]},{19:[1,20],21:[1,25],30:[2,37],36:[2,37],38:[2,37],39:[2,37],41:103,63:67,73:[1,66],96:[1,24],143:21},{19:[2,38],21:[2,38],30:[2,38],36:[2,38],38:[2,38],39:[2,38],73:[2,38],96:[2,38]},{6:[2,27],9:[1,52],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],28:[2,27],96:[2,27],144:[2,27],145:[2,27]},{6:[2,25],9:[1,52],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],28:[2,25],96:[2,25],144:[2,25],145:[2,25]},{6:[2,28],9:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],28:[2,28],32:[2,28],45:[2,28],49:[2,28],54:[2,28],61:[2,28],86:[2,28],92:[2,28],93:[2,28],96:[2,28],113:[2,28],116:[2,28],117:[2,28],118:[2,28],119:[2,28],144:[2,28],145:[2,28]},{32:[2,40],44:104,45:[1,105],61:[2,40]},{32:[2,44],45:[2,44],48:106,49:[1,107],61:[2,44]},{32:[2,52],45:[2,52],49:[2,52],52:108,53:109,54:[1,110],61:[2,52]},{32:[2,55],45:[2,55],49:[2,55],54:[2,55],61:[2,55]},{61:[1,111]},{19:[2,61],21:[2,61],38:[2,61],60:[2,61],69:[2,61],71:[2,61],73:[2,61],96:[2,61]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:112,113:[2,66],116:[2,66],117:[2,66],118:[2,66],119:[2,66]},{9:[2,87],32:[2,87],45:[2,87],49:[2,87],54:[2,87],61:[2,87],75:113,86:[2,87],103:[2,87],104:[2,87],105:[2,87],106:[2,87],107:[2,87],108:[2,87],109:[2,87],110:[2,87],111:[2,87],112:[2,87],113:[2,87],116:[2,87],117:[2,87],118:[2,87],119:[2,87]},{9:[2,77],27:97,29:32,30:[2,32],32:[2,77],36:[2,32],38:[2,32],39:[2,32],45:[2,77],49:[2,77],54:[2,77],61:[2,77],77:114,78:115,86:[1,116],89:93,95:[1,95],97:[1,96],113:[2,77],116:[2,77],117:[2,77],118:[2,77],119:[2,77]},{9:[2,81],27:97,29:32,30:[2,32],32:[2,81],36:[2,32],38:[2,32],39:[2,32],45:[2,81],49:[2,81],54:[2,81],61:[2,81],78:117,89:93,95:[1,95],97:[1,96],113:[2,81],116:[2,81],117:[2,81],118:[2,81],119:[2,81]},{9:[2,83],32:[2,83],45:[2,83],49:[2,83],54:[2,83],61:[2,83],113:[2,83],116:[2,83],117:[2,83],118:[2,83],119:[2,83]},{9:[2,84],32:[2,84],45:[2,84],49:[2,84],54:[2,84],61:[2,84],113:[2,84],116:[2,84],117:[2,84],118:[2,84],119:[2,84]},{9:[2,85],32:[2,85],45:[2,85],49:[2,85],54:[2,85],61:[2,85],113:[2,85],116:[2,85],117:[2,85],118:[2,85],119:[2,85]},{9:[2,86],32:[2,86],45:[2,86],49:[2,86],54:[2,86],61:[2,86],113:[2,86],116:[2,86],117:[2,86],118:[2,86],119:[2,86]},{9:[2,89],30:[2,89],32:[2,89],36:[2,89],38:[2,89],39:[2,89],45:[2,89],49:[2,89],54:[2,89],61:[2,89],86:[2,89],95:[2,89],97:[2,89],113:[2,89],116:[2,89],117:[2,89],118:[2,89],119:[2,89]},{9:[2,90],30:[2,90],32:[2,90],36:[2,90],38:[2,90],39:[2,90],45:[2,90],49:[2,90],54:[2,90],61:[2,90],86:[2,90],95:[2,90],97:[2,90],113:[2,90],116:[2,90],117:[2,90],118:[2,90],119:[2,90]},{9:[2,119],32:[2,119],45:[2,119],49:[2,119],54:[2,119],61:[2,119],113:[2,119],116:[2,119],117:[2,119],118:[2,119],119:[2,119]},{9:[2,98],32:[2,98],45:[2,98],49:[2,98],54:[2,98],61:[2,98],86:[2,98],90:118,92:[2,98],93:[2,98],113:[2,98],116:[2,98],117:[2,98],118:[2,98],119:[2,98]},{19:[2,128],21:[2,128],61:[2,128],82:[2,128],96:[2,128],100:[2,128],120:119,131:[2,128],132:[2,128],137:[2,128],138:[2,128],139:[2,128],140:[2,128],141:[2,128],142:[2,128]},{21:[1,121],96:[1,120]},{19:[1,20],21:[1,25],26:122,63:18,64:19,96:[1,24],143:21,144:[1,22],145:[1,23]},{9:[2,103],32:[2,103],45:[2,103],49:[2,103],54:[2,103],61:[2,103],86:[2,103],92:[2,103],93:[2,103],113:[2,103],116:[2,103],117:[2,103],118:[2,103],119:[2,103]},{19:[1,20],21:[1,25],27:97,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,94],63:92,65:123,74:[1,83],76:84,78:87,79:[1,85],80:86,81:88,82:[1,89],84:[1,90],85:[1,91],89:93,95:[1,95],96:[1,24],97:[1,96],143:21},{19:[2,68],21:[2,68],73:[2,68],96:[2,68]},{19:[2,71],21:[2,71],73:[2,71],96:[2,71]},{19:[2,69],21:[2,69],73:[2,69],96:[2,69]},{19:[2,73],21:[2,73],73:[2,73],96:[2,73]},{19:[2,39],21:[2,39],30:[2,39],36:[2,39],38:[2,39],39:[2,39],73:[2,39],96:[2,39]},{32:[2,43],45:[2,43],61:[2,43]},{19:[1,20],21:[1,25],34:61,38:[1,46],41:64,42:124,46:56,50:57,55:58,56:59,59:60,60:[1,62],62:[1,63],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{32:[2,47],45:[2,47],49:[2,47],61:[2,47]},{19:[1,20],21:[1,25],34:61,38:[1,46],41:64,46:125,50:57,55:58,56:59,59:60,60:[1,62],62:[1,63],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{32:[2,48],45:[2,48],49:[2,48],61:[2,48]},{32:[2,51],45:[2,51],49:[2,51],54:[2,51],61:[2,51]},{19:[1,20],21:[1,25],32:[2,53],34:61,38:[1,46],41:64,45:[2,53],49:[2,53],50:126,55:58,56:59,59:60,60:[1,62],61:[2,53],62:[1,63],63:67,67:65,69:[1,68],71:[1,69],73:[1,66],96:[1,24],143:21},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:127,58:128,61:[2,56],116:[1,129],117:[1,130],118:[1,131],119:[1,132]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:133,58:128,61:[2,56],68:134,113:[1,135],116:[1,129],117:[1,130],118:[1,131],119:[1,132]},{9:[2,76],32:[2,76],45:[2,76],49:[2,76],54:[2,76],61:[2,76],83:136,86:[1,141],98:137,99:138,101:139,102:140,103:[1,142],104:[1,143],105:[1,144],106:[1,145],107:[1,146],108:[1,147],109:[1,148],110:[1,149],111:[1,150],112:[1,151],113:[2,76],116:[2,76],117:[2,76],118:[2,76],119:[2,76]},{9:[2,78],32:[2,78],45:[2,78],49:[2,78],54:[2,78],61:[2,78],113:[2,78],116:[2,78],117:[2,78],118:[2,78],119:[2,78]},{9:[2,79],32:[2,79],45:[2,79],49:[2,79],54:[2,79],61:[2,79],77:152,86:[1,116],113:[2,79],116:[2,79],117:[2,79],118:[2,79],119:[2,79]},{87:153,139:[1,154],140:[1,155],141:[1,156],142:[1,157]},{9:[2,82],32:[2,82],45:[2,82],49:[2,82],54:[2,82],61:[2,82],113:[2,82],116:[2,82],117:[2,82],118:[2,82],119:[2,82]},{9:[2,94],32:[2,94],45:[2,94],49:[2,94],54:[2,94],61:[2,94],86:[2,94],91:159,92:[1,160],93:[1,161],94:158,113:[2,94],116:[2,94],117:[2,94],118:[2,94],119:[2,94]},{19:[1,20],21:[1,25],61:[1,162],63:166,82:[1,167],87:168,96:[1,24],100:[1,169],115:165,121:163,122:164,131:[1,170],132:[1,171],137:[1,172],138:[1,173],139:[1,154],140:[1,155],141:[1,156],142:[1,157],143:21},{9:[2,100],32:[2,100],45:[2,100],49:[2,100],54:[2,100],61:[2,100],86:[2,100],92:[2,100],93:[2,100],113:[2,100],116:[2,100],117:[2,100],118:[2,100],119:[2,100]},{9:[2,101],32:[2,101],45:[2,101],49:[2,101],54:[2,101],61:[2,101],86:[2,101],92:[2,101],93:[2,101],113:[2,101],116:[2,101],117:[2,101],118:[2,101],119:[2,101]},{9:[2,102],32:[2,102],45:[2,102],49:[2,102],54:[2,102],61:[2,102],86:[2,102],92:[2,102],93:[2,102],113:[2,102],116:[2,102],117:[2,102],118:[2,102],119:[2,102]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:174,113:[2,66],116:[2,66],117:[2,66],118:[2,66],119:[2,66]},{32:[2,41],45:[2,41],61:[2,41]},{32:[2,45],45:[2,45],49:[2,45],61:[2,45]},{32:[2,49],45:[2,49],49:[2,49],54:[2,49],61:[2,49]},{9:[2,22],25:175,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,57],32:[2,57],45:[2,57],49:[2,57],54:[2,57],61:[2,57]},{9:[2,123],32:[2,123],45:[2,123],49:[2,123],54:[2,123],61:[2,123]},{9:[2,124],32:[2,124],45:[2,124],49:[2,124],54:[2,124],61:[2,124]},{9:[2,125],32:[2,125],45:[2,125],49:[2,125],54:[2,125],61:[2,125]},{9:[2,126],32:[2,126],45:[2,126],49:[2,126],54:[2,126],61:[2,126]},{9:[2,22],25:176,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,67],32:[2,67],45:[2,67],49:[2,67],54:[2,67],61:[2,67],113:[2,67],116:[2,67],117:[2,67],118:[2,67],119:[2,67]},{19:[1,20],21:[1,25],63:177,96:[1,24],143:21},{9:[2,88],32:[2,88],45:[2,88],49:[2,88],54:[2,88],61:[2,88],86:[2,88],103:[2,88],104:[2,88],105:[2,88],106:[2,88],107:[2,88],108:[2,88],109:[2,88],110:[2,88],111:[2,88],112:[2,88],113:[2,88],116:[2,88],117:[2,88],118:[2,88],119:[2,88]},{87:178,139:[1,154],140:[1,155],141:[1,156],142:[1,157]},{100:[1,179]},{100:[1,180]},{100:[1,181]},{139:[2,108],140:[2,108],141:[2,108],142:[2,108]},{139:[2,109],140:[2,109],141:[2,109],142:[2,109]},{100:[2,110]},{100:[2,111]},{100:[2,112]},{100:[2,113]},{100:[2,114]},{100:[2,115]},{100:[2,116]},{100:[2,117]},{100:[2,118]},{9:[2,80],32:[2,80],45:[2,80],49:[2,80],54:[2,80],61:[2,80],113:[2,80],116:[2,80],117:[2,80],118:[2,80],119:[2,80]},{9:[2,91],32:[2,91],45:[2,91],49:[2,91],54:[2,91],61:[2,91],113:[2,91],116:[2,91],117:[2,91],118:[2,91],119:[2,91]},{9:[2,152],19:[2,152],21:[2,152],32:[2,152],45:[2,152],49:[2,152],54:[2,152],61:[2,152],82:[2,152],86:[2,152],95:[2,152],96:[2,152],100:[2,152],103:[2,152],104:[2,152],105:[2,152],106:[2,152],107:[2,152],108:[2,152],109:[2,152],110:[2,152],111:[2,152],112:[2,152],113:[2,152],116:[2,152],117:[2,152],118:[2,152],119:[2,152],130:[2,152],131:[2,152],132:[2,152],137:[2,152],138:[2,152],139:[2,152],140:[2,152],141:[2,152],142:[2,152]},{9:[2,153],19:[2,153],21:[2,153],32:[2,153],45:[2,153],49:[2,153],54:[2,153],61:[2,153],82:[2,153],86:[2,153],95:[2,153],96:[2,153],100:[2,153],103:[2,153],104:[2,153],105:[2,153],106:[2,153],107:[2,153],108:[2,153],109:[2,153],110:[2,153],111:[2,153],112:[2,153],113:[2,153],116:[2,153],117:[2,153],118:[2,153],119:[2,153],130:[2,153],131:[2,153],132:[2,153],137:[2,153],138:[2,153],139:[2,153],140:[2,153],141:[2,153],142:[2,153]},{9:[2,154],19:[2,154],21:[2,154],32:[2,154],45:[2,154],49:[2,154],54:[2,154],61:[2,154],82:[2,154],86:[2,154],95:[2,154],96:[2,154],100:[2,154],103:[2,154],104:[2,154],105:[2,154],106:[2,154],107:[2,154],108:[2,154],109:[2,154],110:[2,154],111:[2,154],112:[2,154],113:[2,154],116:[2,154],117:[2,154],118:[2,154],119:[2,154],130:[2,154],131:[2,154],132:[2,154],137:[2,154],138:[2,154],139:[2,154],140:[2,154],141:[2,154],142:[2,154]},{9:[2,155],19:[2,155],21:[2,155],32:[2,155],45:[2,155],49:[2,155],54:[2,155],61:[2,155],82:[2,155],86:[2,155],95:[2,155],96:[2,155],100:[2,155],103:[2,155],104:[2,155],105:[2,155],106:[2,155],107:[2,155],108:[2,155],109:[2,155],110:[2,155],111:[2,155],112:[2,155],113:[2,155],116:[2,155],117:[2,155],118:[2,155],119:[2,155],130:[2,155],131:[2,155],132:[2,155],137:[2,155],138:[2,155],139:[2,155],140:[2,155],141:[2,155],142:[2,155]},{9:[2,99],32:[2,99],45:[2,99],49:[2,99],54:[2,99],61:[2,99],86:[2,99],92:[2,99],93:[2,99],113:[2,99],116:[2,99],117:[2,99],118:[2,99],119:[2,99]},{27:97,29:32,30:[2,32],36:[2,32],38:[2,32],39:[2,32],89:182,95:[1,95],97:[1,96]},{30:[2,95],36:[2,95],38:[2,95],39:[2,95],95:[2,95],97:[2,95]},{30:[2,96],36:[2,96],38:[2,96],39:[2,96],95:[2,96],97:[2,96]},{9:[2,127],32:[2,127],45:[2,127],49:[2,127],54:[2,127],61:[2,127],113:[2,127],116:[2,127],117:[2,127],118:[2,127],119:[2,127]},{19:[2,129],21:[2,129],61:[2,129],82:[2,129],96:[2,129],100:[2,129],131:[2,129],132:[2,129],137:[2,129],138:[2,129],139:[2,129],140:[2,129],141:[2,129],142:[2,129]},{19:[2,130],21:[2,130],61:[2,130],82:[2,130],96:[2,130],100:[2,130],131:[2,130],132:[2,130],137:[2,130],138:[2,130],139:[2,130],140:[2,130],141:[2,130],142:[2,130]},{19:[2,131],21:[2,131],61:[2,131],82:[2,131],96:[2,131],100:[2,131],131:[2,131],132:[2,131],137:[2,131],138:[2,131],139:[2,131],140:[2,131],141:[2,131],142:[2,131]},{19:[2,137],21:[2,137],61:[2,137],82:[2,137],96:[2,137],100:[2,137],103:[1,185],123:183,127:184,131:[2,137],132:[2,137],137:[2,137],138:[2,137],139:[2,137],140:[2,137],141:[2,137],142:[2,137]},{124:186,126:187,128:[1,188]},{9:[2,144],19:[2,144],21:[2,144],32:[2,144],45:[2,144],49:[2,144],54:[2,144],61:[2,144],82:[2,144],95:[1,189],96:[2,144],100:[2,144],113:[2,144],116:[2,144],117:[2,144],118:[2,144],119:[2,144],130:[1,190],131:[2,144],132:[2,144],137:[2,144],138:[2,144],139:[2,144],140:[2,144],141:[2,144],142:[2,144]},{9:[2,147],19:[2,147],21:[2,147],32:[2,147],45:[2,147],49:[2,147],54:[2,147],61:[2,147],82:[2,147],96:[2,147],100:[2,147],113:[2,147],116:[2,147],117:[2,147],118:[2,147],119:[2,147],131:[2,147],132:[2,147],137:[2,147],138:[2,147],139:[2,147],140:[2,147],141:[2,147],142:[2,147]},{9:[2,148],19:[2,148],21:[2,148],32:[2,148],45:[2,148],49:[2,148],54:[2,148],61:[2,148],82:[2,148],96:[2,148],100:[2,148],113:[2,148],116:[2,148],117:[2,148],118:[2,148],119:[2,148],131:[2,148],132:[2,148],137:[2,148],138:[2,148],139:[2,148],140:[2,148],141:[2,148],142:[2,148]},{133:[1,191]},{9:[2,150],19:[2,150],21:[2,150],32:[2,150],45:[2,150],49:[2,150],54:[2,150],61:[2,150],82:[2,150],96:[2,150],100:[2,150],113:[2,150],116:[2,150],117:[2,150],118:[2,150],119:[2,150],131:[2,150],132:[2,150],137:[2,150],138:[2,150],139:[2,150],140:[2,150],141:[2,150],142:[2,150]},{9:[2,151],19:[2,151],21:[2,151],32:[2,151],45:[2,151],49:[2,151],54:[2,151],61:[2,151],82:[2,151],96:[2,151],100:[2,151],113:[2,151],116:[2,151],117:[2,151],118:[2,151],119:[2,151],131:[2,151],132:[2,151],137:[2,151],138:[2,151],139:[2,151],140:[2,151],141:[2,151],142:[2,151]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:192,58:128,61:[2,56],68:134,113:[1,135],116:[1,129],117:[1,130],118:[1,131],119:[1,132]},{9:[1,52],32:[2,60],45:[2,60],49:[2,60],54:[2,60],61:[2,60]},{9:[1,52],32:[2,64],45:[2,64],49:[2,64],54:[2,64],61:[2,64]},{19:[1,20],21:[1,25],63:194,87:168,96:[1,24],100:[1,169],114:193,115:195,131:[1,170],132:[1,171],137:[1,172],138:[1,173],139:[1,154],140:[1,155],141:[1,156],142:[1,157],143:21},{9:[2,104],32:[2,104],45:[2,104],49:[2,104],54:[2,104],61:[2,104],86:[2,104],103:[2,104],104:[2,104],105:[2,104],106:[2,104],107:[2,104],108:[2,104],109:[2,104],110:[2,104],111:[2,104],112:[2,104],113:[2,104],116:[2,104],117:[2,104],118:[2,104],119:[2,104]},{9:[2,105],32:[2,105],45:[2,105],49:[2,105],54:[2,105],61:[2,105],86:[2,105],103:[2,105],104:[2,105],105:[2,105],106:[2,105],107:[2,105],108:[2,105],109:[2,105],110:[2,105],111:[2,105],112:[2,105],113:[2,105],116:[2,105],117:[2,105],118:[2,105],119:[2,105]},{9:[2,106],32:[2,106],45:[2,106],49:[2,106],54:[2,106],61:[2,106],86:[2,106],103:[2,106],104:[2,106],105:[2,106],106:[2,106],107:[2,106],108:[2,106],109:[2,106],110:[2,106],111:[2,106],112:[2,106],113:[2,106],116:[2,106],117:[2,106],118:[2,106],119:[2,106]},{9:[2,107],32:[2,107],45:[2,107],49:[2,107],54:[2,107],61:[2,107],86:[2,107],103:[2,107],104:[2,107],105:[2,107],106:[2,107],107:[2,107],108:[2,107],109:[2,107],110:[2,107],111:[2,107],112:[2,107],113:[2,107],116:[2,107],117:[2,107],118:[2,107],119:[2,107]},{9:[2,97],32:[2,97],45:[2,97],49:[2,97],54:[2,97],61:[2,97],86:[2,97],92:[2,97],93:[2,97],113:[2,97],116:[2,97],117:[2,97],118:[2,97],119:[2,97]},{19:[2,132],21:[2,132],61:[2,132],82:[2,132],96:[2,132],100:[2,132],131:[2,132],132:[2,132],137:[2,132],138:[2,132],139:[2,132],140:[2,132],141:[2,132],142:[2,132]},{19:[2,138],21:[2,138],61:[2,138],82:[2,138],96:[2,138],100:[2,138],131:[2,138],132:[2,138],137:[2,138],138:[2,138],139:[2,138],140:[2,138],141:[2,138],142:[2,138]},{19:[2,134],21:[2,134],61:[2,134],82:[2,134],96:[2,134],100:[2,134],125:196,128:[2,134],131:[2,134],132:[2,134],137:[2,134],138:[2,134],139:[2,134],140:[2,134],141:[2,134],142:[2,134]},{19:[2,133],21:[2,133],61:[2,133],82:[2,133],96:[2,133],100:[2,133],126:197,128:[1,188],131:[2,133],132:[2,133],137:[2,133],138:[2,133],139:[2,133],140:[2,133],141:[2,133],142:[2,133]},{19:[2,139],21:[2,139],61:[2,139],82:[2,139],96:[2,139],100:[2,139],128:[2,139],131:[2,139],132:[2,139],137:[2,139],138:[2,139],139:[2,139],140:[2,139],141:[2,139],142:[2,139]},{19:[1,20],21:[1,25],63:198,96:[1,24],143:21},{9:[2,145],19:[2,145],21:[2,145],32:[2,145],45:[2,145],49:[2,145],54:[2,145],61:[2,145],82:[2,145],96:[2,145],100:[2,145],113:[2,145],116:[2,145],117:[2,145],118:[2,145],119:[2,145],131:[2,145],132:[2,145],137:[2,145],138:[2,145],139:[2,145],140:[2,145],141:[2,145],142:[2,145]},{19:[1,20],21:[1,25],63:199,96:[1,24],143:21},{134:[1,200]},{9:[2,22],25:201,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,120],32:[2,120],45:[2,120],49:[2,120],54:[2,120],61:[2,120],113:[2,120],116:[2,120],117:[2,120],118:[2,120],119:[2,120]},{9:[2,121],32:[2,121],45:[2,121],49:[2,121],54:[2,121],61:[2,121],113:[2,121],116:[2,121],117:[2,121],118:[2,121],119:[2,121]},{9:[2,122],32:[2,122],45:[2,122],49:[2,122],54:[2,122],61:[2,122],113:[2,122],116:[2,122],117:[2,122],118:[2,122],119:[2,122]},{19:[2,136],21:[2,136],61:[2,136],82:[2,136],96:[2,136],100:[2,136],126:202,128:[1,188],131:[2,136],132:[2,136],137:[2,136],138:[2,136],139:[2,136],140:[2,136],141:[2,136],142:[2,136]},{19:[2,140],21:[2,140],61:[2,140],82:[2,140],96:[2,140],100:[2,140],128:[2,140],131:[2,140],132:[2,140],137:[2,140],138:[2,140],139:[2,140],140:[2,140],141:[2,140],142:[2,140]},{19:[2,142],21:[2,142],61:[2,142],82:[2,142],96:[2,142],100:[2,142],103:[1,204],128:[2,142],129:203,131:[2,142],132:[2,142],137:[2,142],138:[2,142],139:[2,142],140:[2,142],141:[2,142],142:[2,142]},{9:[2,146],19:[2,146],21:[2,146],32:[2,146],45:[2,146],49:[2,146],54:[2,146],61:[2,146],82:[2,146],96:[2,146],100:[2,146],113:[2,146],116:[2,146],117:[2,146],118:[2,146],119:[2,146],131:[2,146],132:[2,146],137:[2,146],138:[2,146],139:[2,146],140:[2,146],141:[2,146],142:[2,146]},{135:[1,205]},{9:[1,52],32:[2,65],45:[2,65],49:[2,65],54:[2,65],61:[2,65]},{19:[2,135],21:[2,135],61:[2,135],82:[2,135],96:[2,135],100:[2,135],128:[2,135],131:[2,135],132:[2,135],137:[2,135],138:[2,135],139:[2,135],140:[2,135],141:[2,135],142:[2,135]},{19:[2,141],21:[2,141],61:[2,141],82:[2,141],96:[2,141],100:[2,141],128:[2,141],131:[2,141],132:[2,141],137:[2,141],138:[2,141],139:[2,141],140:[2,141],141:[2,141],142:[2,141]},{19:[2,143],21:[2,143],61:[2,143],82:[2,143],96:[2,143],100:[2,143],128:[2,143],131:[2,143],132:[2,143],137:[2,143],138:[2,143],139:[2,143],140:[2,143],141:[2,143],142:[2,143]},{136:[1,206]},{9:[2,149],19:[2,149],21:[2,149],32:[2,149],45:[2,149],49:[2,149],54:[2,149],61:[2,149],82:[2,149],96:[2,149],100:[2,149],113:[2,149],116:[2,149],117:[2,149],118:[2,149],119:[2,149],131:[2,149],132:[2,149],137:[2,149],138:[2,149],139:[2,149],140:[2,149],141:[2,149],142:[2,149]}],
defaultActions: {5:[2,13],26:[2,1],54:[2,35],143:[2,110],144:[2,111],145:[2,112],146:[2,113],147:[2,114],148:[2,115],149:[2,116],150:[2,117],151:[2,118]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';


  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() { debugger;
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 95;
break;
case 2:return 97;
break;
case 3:return 96;
break;
case 4:return 18;
break;
case 5:return 20;
break;
case 6:return 22;
break;
case 7:return 28;
break;
case 8:return 119;
break;
case 9:return 36;
break;
case 10:return 39;
break;
case 11:return 74;
break;
case 12:return 79;
break;
case 13:return 84;
break;
case 14:return 85;
break;
case 15:return 86;
break;
case 16:return 92;
break;
case 17:return 93;
break;
case 18:return 104;
break;
case 19:return 105;
break;
case 20:return 106;
break;
case 21:return 107;
break;
case 22:return 108;
break;
case 23:return 109;
break;
case 24:return 110;
break;
case 25:return 111;
break;
case 26:return 112;
break;
case 27:return 23;
break;
case 28:return 30;
break;
case 29:return 32;
break;
case 30:return 38;
break;
case 31:return 49;
break;
case 32:return 45;
break;
case 33:return 54;
break;
case 34:return 60;
break;
case 35:return 61;
break;
case 36:return 62;
break;
case 37:return 69;
break;
case 38:return 130;
break;
case 39:return 71;
break;
case 40:return 82;
break;
case 41:return 103;
break;
case 42:return 113;
break;
case 43:return 116;
break;
case 44:return 117;
break;
case 45:return 118;
break;
case 46:return 128;
break;
case 47:return 137;
break;
case 48:return 138;
break;
case 49:return 9;
break;
case 50:return 73;
break;
case 51:return 100;
break;
case 52:return 131;
break;
case 53:return 'EXPONENT';
break;
case 54:return 132;
break;
case 55:return 145;
break;
case 56:return 19;
break;
case 57:return 21;
break;
case 58:return 144;
break;
case 59:return 139;
break;
case 60:return 140;
break;
case 61:return 141;
break;
case 62:return 142;
break;
case 63:return 6
break;
case 64:return 'invalid character'
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:start\b)/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+)))?))?\}))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(%([#+A-Z_a-z][#+0-9A-Z_a-z]*)?\{([^%]|\\%)*%\}))/,/^(?:a\b)/,/^(?:(([+-])?([0-9])+))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:([Ee]([+-])?([0-9])+))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(\\\[(((( )|((\\t)|((\\r)|(\\n))))))*\\\]))/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShexParser;
exports.Parser = ShexParser.Parser;
exports.parse = function () { return ShexParser.parse.apply(ShexParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}