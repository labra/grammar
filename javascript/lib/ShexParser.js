/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShexParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"QCODE_E_Plus":8,"CODE":9,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_C":10,"shape":11,"start":12,"Qstatement_E_Star":13,"statement":14,"O_Qshape_E_Or_Qstart_E_Or_QCODE_E_Plus_S_Qstatement_E_Star_C":15,"baseDecl":16,"prefixDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_start":22,"=":23,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QCODE_E_Star_C":24,"QCODE_E_Star":25,"shapeLabel":26,"shapeDefinition":27,"IT_VIRTUAL":28,"Q_O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":29,"{":30,"QoneOfShape_E_Opt":31,"}":32,"O_Qinclude_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":33,"include":34,"inclPropertySet":35,"IT_CLOSED":36,"oneOfShape":37,"&":38,"IT_EXTRA":39,"Qpredicate_E_Plus":40,"predicate":41,"someOfShape":42,"Q_O_Q_PIPE_E_S_QsomeOfShape_E_C_E_Star":43,"O_Q_PIPE_E_S_QsomeOfShape_E_C":44,"|":45,"groupShape":46,"Q_O_Q_OR_E_S_QgroupShape_E_C_E_Star":47,"O_Q_OR_E_S_QgroupShape_E_C":48,"||":49,"unaryShape":50,"Q_O_Q_COMMA_E_S_QunaryShape_E_C_E_Star":51,"Q_COMMA_E_Opt":52,"O_Q_COMMA_E_S_QunaryShape_E_C":53,",":54,"O_QtripleConstraint_E_Or_Qinclude_E_Or_Q_LPAREN_E_S_QoneOfShape_E_S_Q_RPAREN_E_S_Qcardinality_E_Opt_S_QCODE_E_Star_C":55,"id":56,"Qcardinality_E_Opt":57,"cardinality":58,"tripleConstraint":59,"(":60,")":61,"$":62,"iri":63,"blankNode":64,"valueClass":65,"Qannotation_E_Star":66,"senseFlags":67,"annotation":68,"!":69,"Q_CARROT_E_Opt":70,"^":71,"Q_NOT_E_Opt":72,"IT_LITERAL":73,"QxsFacet_E_Star":74,"O_QIT_IRI_E_Or_QIT_NONLITERAL_E_C":75,"O_QIT_PATTERN_E_S_Qstring_E_C":76,"groupShapeConstr":77,"IT_BNODE":78,"valueSet":79,".":80,"xsFacet":81,"IT_IRI":82,"IT_NONLITERAL":83,"IT_PATTERN":84,"string":85,"Q_O_QIT_PATTERN_E_S_Qstring_E_C_E_Opt":86,"shapeOrRef":87,"Q_O_QIT_AND_E_Or_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":88,"O_QIT_AND_E_Or_QIT_OR_E_C":89,"IT_AND":90,"IT_OR":91,"O_QIT_AND_E_Or_QIT_OR_E_S_QshapeOrRef_E_C":92,"ATPNAME_LN":93,"ATPNAME_NS":94,"@":95,"O_QIT_PATTERN_E_Or_Q_KINDA_E_C":96,"O_QIT_MININCLUSIVE_E_Or_QIT_MINEXCLUSIVE_E_Or_QIT_MAXINCLUSIVE_E_Or_QIT_MAXEXCLUSIVE_E_C":97,"INTEGER":98,"O_QIT_LENGTH_E_Or_QIT_MINLENGTH_E_Or_QIT_MAXLENGTH_E_C":99,"O_QIT_TOTALDIGITS_E_Or_QIT_FRACTIONDIGITS_E_C":100,"~":101,"IT_MININCLUSIVE":102,"IT_MINEXCLUSIVE":103,"IT_MAXINCLUSIVE":104,"IT_MAXEXCLUSIVE":105,"IT_LENGTH":106,"IT_MINLENGTH":107,"IT_MAXLENGTH":108,"IT_TOTALDIGITS":109,"IT_FRACTIONDIGITS":110,";":111,"O_Qiri_E_Or_Qliteral_E_C":112,"literal":113,"*":114,"+":115,"?":116,"REPEAT_RANGE":117,"Qvalue_E_Star":118,"value":119,"iriRange":120,"Q_O_Q_KINDA_E_S_Qexclusion_E_Star_C_E_Opt":121,"Qexclusion_E_Plus":122,"Qexclusion_E_Star":123,"exclusion":124,"O_Q_KINDA_E_S_Qexclusion_E_Star_C":125,"-":126,"LANGTAG":127,"^^":128,"DECIMAL":129,"DOUBLE":130,"IT_true":131,"IT_false":132,"STRING_LITERAL1":133,"STRING_LITERAL2":134,"STRING_LITERAL_LONG1":135,"STRING_LITERAL_LONG2":136,"PNAME_LN":137,"a":138,"BLANK_NODE_LABEL":139,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"CODE",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_start",23:"=",28:"IT_VIRTUAL",30:"{",32:"}",36:"IT_CLOSED",38:"&",39:"IT_EXTRA",45:"|",49:"||",54:",",60:"(",61:")",62:"$",69:"!",71:"^",73:"IT_LITERAL",78:"IT_BNODE",80:".",82:"IT_IRI",83:"IT_NONLITERAL",84:"IT_PATTERN",90:"IT_AND",91:"IT_OR",93:"ATPNAME_LN",94:"ATPNAME_NS",95:"@",98:"INTEGER",101:"~",102:"IT_MININCLUSIVE",103:"IT_MINEXCLUSIVE",104:"IT_MAXINCLUSIVE",105:"IT_MAXEXCLUSIVE",106:"IT_LENGTH",107:"IT_MINLENGTH",108:"IT_MAXLENGTH",109:"IT_TOTALDIGITS",110:"IT_FRACTIONDIGITS",111:";",114:"*",115:"+",116:"?",117:"REPEAT_RANGE",126:"-",127:"LANGTAG",128:"^^",129:"DECIMAL",130:"DOUBLE",131:"IT_true",132:"IT_false",133:"STRING_LITERAL1",134:"STRING_LITERAL2",135:"STRING_LITERAL_LONG1",136:"STRING_LITERAL_LONG2",137:"PNAME_LN",138:"a",139:"BLANK_NODE_LABEL"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,2],[10,1],[10,1],[10,1],[13,0],[13,2],[15,2],[5,0],[5,1],[14,1],[14,1],[14,1],[7,1],[7,1],[16,2],[17,3],[12,3],[25,0],[25,2],[24,1],[24,2],[11,3],[11,4],[27,4],[33,1],[33,1],[33,1],[29,0],[29,2],[31,0],[31,1],[34,2],[35,2],[40,1],[40,2],[37,2],[44,2],[43,0],[43,2],[42,2],[48,2],[47,0],[47,2],[46,3],[53,2],[51,0],[51,2],[52,0],[52,1],[50,1],[50,2],[57,0],[57,1],[55,1],[55,1],[55,5],[56,2],[26,1],[26,1],[59,5],[59,6],[66,0],[66,2],[67,2],[67,2],[70,0],[70,1],[72,0],[72,1],[41,1],[65,2],[65,1],[65,2],[65,2],[65,3],[65,1],[65,2],[65,1],[65,1],[65,1],[65,1],[74,0],[74,2],[75,1],[75,1],[76,2],[86,0],[86,1],[77,2],[89,1],[89,1],[92,2],[88,0],[88,2],[87,1],[87,1],[87,2],[87,1],[81,2],[81,2],[81,2],[81,2],[96,1],[96,1],[97,1],[97,1],[97,1],[97,1],[99,1],[99,1],[99,1],[100,1],[100,1],[68,3],[112,1],[112,1],[58,1],[58,1],[58,1],[58,1],[79,3],[118,0],[118,2],[119,1],[119,1],[120,2],[120,2],[123,0],[123,2],[125,2],[121,0],[121,1],[122,1],[122,2],[124,2],[124,3],[113,1],[113,2],[113,3],[113,1],[113,1],[113,1],[113,1],[113,1],[85,1],[85,1],[85,1],[85,1],[63,1],[63,1],[63,1],[63,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, {shapes: Parser.shapes});
      Parser.prefixes = Parser.shapes = null;
      base = basePath = baseRoot = '';
      return ret;
    
break;
case 19: 
      base = resolveIRI($$[$0])
      basePath = base.replace(/[^\/]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    
break;
case 20: // t: ShexParser-test.js/with pre-defined prefixes
      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 26: // t: 1dot
        if (!Parser.shapes) Parser.shapes = {};
        Parser.shapes[$$[$0-2]] = $$[$0-1];
    
break;
case 28: // t: 1dotInherit3
      this.$ = extend($$[$0-1], $$[$0-3]);
    
break;
case 29:this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 30:this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1;
break;
case 31:this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 32:this.$ = {};
break;
case 33:
      if ($$[$0][0] === 'closed') // t: 1dotClosed
        $$[$0-1]['closed'] = true;
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = $$[$0-1][$$[$0][0]].concat([$$[$0][1]]); // t: 1dotInherit3, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = [$$[$0][1]]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 36:this.$ = $$[$0] // t:, 1dotInherit1;
break;
case 37:this.$ = $$[$0];
break;
case 40:this.$ = $$[$0].length ? { type: "oneOf", patterns: [$$[$0-1]].concat($$[$0]) } : $$[$0-1] // t: 2oneOfdot;
break;
case 41:this.$ = $$[$0] // t: 2oneOfdot;
break;
case 42:this.$ = [] //  t: 2oneOfdot;
break;
case 43:this.$ = $$[$0-1].concat($$[$0]) //  t: 2oneOfdot;
break;
case 44:this.$ = $$[$0].length ? { type: "someOf", patterns: [$$[$0-1]].concat($$[$0]) } : $$[$0-1] // t: 2someOfdot;
break;
case 45:this.$ = $$[$0] // t: 2someOfdot;
break;
case 46:this.$ = [] // t: 2someOfdot;
break;
case 47:this.$ = $$[$0-1].concat($$[$0]) // t: 2someOfdot;
break;
case 48:this.$ = $$[$0-1].length ? { type: "group", patterns: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] // t: 2groupOfdot;
break;
case 49:this.$ = $$[$0] // t: 2groupOfdot;
break;
case 50:this.$ = [] // t: 2groupOfdot;
break;
case 51:this.$ = $$[$0-1].concat($$[$0]) // t: 2groupOfdot;
break;
case 56:this.$ = {} // t: 1dot;
break;
case 59:this.$ = { type: "include", "include": $$[$0] } // t: 2groupInclude1;
break;
case 64: // t: 1dot
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4], value: $$[$0-3] }, $$[$0-1]);
    
break;
case 83:this.$ = { type: "reference", reference: $$[$0] } // t: 1dotRef1;
break;
case 85:this.$ = { type: "wildcard" } // t: 1dot;
break;
case 99: // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 100: // t: 1dotRefNS1
console.log($$[$0]);
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 101: this.$ = $$[$0]; 
break;
case 121:this.$ = { min:0 } // t: 1cardStar;
break;
case 122:this.$ = { min:1 } // t: 1cardPlus;
break;
case 123:this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 124:
        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
      
break;
case 125:this.$ = { type: "valueSet", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 126:this.$ = [] // t: 1val1IRIREF;
break;
case 127:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1val1IRIREF;
break;
case 130:
        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 131:this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 132:this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 133:this.$ = $$[$0-1].concat([$$[$0]]) // t: 1val1iriStemMinusiri3;
break;
case 134:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 137:this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 138:this.$ = $$[$0-1].concat([$$[$0]]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 139:this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 140:this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 142:this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 143:this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 144:this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 145:this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 146:this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 147:this.$ = XSD_TRUE // t: 1val1true;
break;
case 148:this.$ = XSD_FALSE // t: 1val1false;
break;
case 149:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 150:this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 151:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 152:this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 153:this.$ = resolveIRI($$[$0]) // t: 1dot;
break;
case 154: // t:1dotPNex, 1dotPNdefault, ShexParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':'),
            prefix = $$[$0].substr(0, namePos),
            expansion = Parser.prefixes[prefix];
        if (!expansion) throw new Error('Unknown prefix: ' + prefix);
        this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 155: // t: 1dotNS2, 1dotNSdefault, ShexParser-test.js/PNAME_NS with pre-defined prefixes
        $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
        if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
        this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 156:this.$ = RDF_TYPE // t: 1AvalA;
break;
}
},
table: [{3:1,4:2,6:[2,2],9:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],28:[2,2],137:[2,2],138:[2,2],139:[2,2]},{1:[3]},{5:3,6:[2,12],7:4,8:13,9:[1,17],10:8,11:11,12:12,15:5,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,22],22:[1,16],26:14,28:[1,15],63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{6:[1,25]},{6:[2,3],9:[2,3],18:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],28:[2,3],137:[2,3],138:[2,3],139:[2,3]},{6:[2,13]},{6:[2,17],9:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],28:[2,17],137:[2,17],138:[2,17],139:[2,17]},{6:[2,18],9:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],28:[2,18],137:[2,18],138:[2,18],139:[2,18]},{6:[2,9],13:26,18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],28:[2,9],137:[2,9],138:[2,9],139:[2,9]},{19:[1,27]},{21:[1,28]},{6:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],28:[2,6],137:[2,6],138:[2,6],139:[2,6]},{6:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],28:[2,7],137:[2,7],138:[2,7],139:[2,7]},{6:[2,8],9:[1,29],18:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],28:[2,8],137:[2,8],138:[2,8],139:[2,8]},{27:30,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,22],26:32,63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{23:[1,33]},{6:[2,4],9:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],28:[2,4],137:[2,4],138:[2,4],139:[2,4]},{6:[2,62],9:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],28:[2,62],30:[2,62],32:[2,62],36:[2,62],38:[2,62],39:[2,62],45:[2,62],49:[2,62],54:[2,62],60:[2,62],61:[2,62],69:[2,62],71:[2,62],84:[2,62],90:[2,62],91:[2,62],111:[2,62],114:[2,62],115:[2,62],116:[2,62],117:[2,62],137:[2,62],138:[2,62],139:[2,62]},{6:[2,63],9:[2,63],18:[2,63],19:[2,63],20:[2,63],21:[2,63],22:[2,63],28:[2,63],30:[2,63],32:[2,63],36:[2,63],38:[2,63],39:[2,63],45:[2,63],49:[2,63],54:[2,63],60:[2,63],61:[2,63],69:[2,63],71:[2,63],84:[2,63],90:[2,63],91:[2,63],111:[2,63],114:[2,63],115:[2,63],116:[2,63],117:[2,63],137:[2,63],138:[2,63],139:[2,63]},{6:[2,153],9:[2,153],18:[2,153],19:[2,153],20:[2,153],21:[2,153],22:[2,153],28:[2,153],30:[2,153],32:[2,153],36:[2,153],38:[2,153],39:[2,153],45:[2,153],49:[2,153],54:[2,153],60:[2,153],61:[2,153],69:[2,153],71:[2,153],73:[2,153],78:[2,153],80:[2,153],82:[2,153],83:[2,153],84:[2,153],90:[2,153],91:[2,153],93:[2,153],94:[2,153],95:[2,153],98:[2,153],101:[2,153],111:[2,153],114:[2,153],115:[2,153],116:[2,153],117:[2,153],126:[2,153],129:[2,153],130:[2,153],131:[2,153],132:[2,153],133:[2,153],134:[2,153],135:[2,153],136:[2,153],137:[2,153],138:[2,153],139:[2,153]},{6:[2,154],9:[2,154],18:[2,154],19:[2,154],20:[2,154],21:[2,154],22:[2,154],28:[2,154],30:[2,154],32:[2,154],36:[2,154],38:[2,154],39:[2,154],45:[2,154],49:[2,154],54:[2,154],60:[2,154],61:[2,154],69:[2,154],71:[2,154],73:[2,154],78:[2,154],80:[2,154],82:[2,154],83:[2,154],84:[2,154],90:[2,154],91:[2,154],93:[2,154],94:[2,154],95:[2,154],98:[2,154],101:[2,154],111:[2,154],114:[2,154],115:[2,154],116:[2,154],117:[2,154],126:[2,154],129:[2,154],130:[2,154],131:[2,154],132:[2,154],133:[2,154],134:[2,154],135:[2,154],136:[2,154],137:[2,154],138:[2,154],139:[2,154]},{6:[2,155],9:[2,155],18:[2,155],19:[2,155],20:[2,155],21:[2,155],22:[2,155],28:[2,155],30:[2,155],32:[2,155],36:[2,155],38:[2,155],39:[2,155],45:[2,155],49:[2,155],54:[2,155],60:[2,155],61:[2,155],69:[2,155],71:[2,155],73:[2,155],78:[2,155],80:[2,155],82:[2,155],83:[2,155],84:[2,155],90:[2,155],91:[2,155],93:[2,155],94:[2,155],95:[2,155],98:[2,155],101:[2,155],111:[2,155],114:[2,155],115:[2,155],116:[2,155],117:[2,155],126:[2,155],129:[2,155],130:[2,155],131:[2,155],132:[2,155],133:[2,155],134:[2,155],135:[2,155],136:[2,155],137:[2,155],138:[2,155],139:[2,155]},{6:[2,156],9:[2,156],18:[2,156],19:[2,156],20:[2,156],21:[2,156],22:[2,156],28:[2,156],30:[2,156],32:[2,156],36:[2,156],38:[2,156],39:[2,156],45:[2,156],49:[2,156],54:[2,156],60:[2,156],61:[2,156],69:[2,156],71:[2,156],73:[2,156],78:[2,156],80:[2,156],82:[2,156],83:[2,156],84:[2,156],90:[2,156],91:[2,156],93:[2,156],94:[2,156],95:[2,156],98:[2,156],101:[2,156],111:[2,156],114:[2,156],115:[2,156],116:[2,156],117:[2,156],126:[2,156],129:[2,156],130:[2,156],131:[2,156],132:[2,156],133:[2,156],134:[2,156],135:[2,156],136:[2,156],137:[2,156],138:[2,156],139:[2,156]},{6:[2,157],9:[2,157],18:[2,157],19:[2,157],20:[2,157],21:[2,157],22:[2,157],28:[2,157],30:[2,157],32:[2,157],36:[2,157],38:[2,157],39:[2,157],45:[2,157],49:[2,157],54:[2,157],60:[2,157],61:[2,157],69:[2,157],71:[2,157],84:[2,157],90:[2,157],91:[2,157],111:[2,157],114:[2,157],115:[2,157],116:[2,157],117:[2,157],137:[2,157],138:[2,157],139:[2,157]},{1:[2,1]},{6:[2,11],7:35,11:37,12:36,14:34,16:6,17:7,18:[1,9],19:[1,20],20:[1,10],21:[1,22],22:[1,16],26:14,28:[1,15],63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{6:[2,19],9:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],28:[2,19],137:[2,19],138:[2,19],139:[2,19]},{19:[1,38]},{6:[2,5],9:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],28:[2,5],137:[2,5],138:[2,5],139:[2,5]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:39,28:[2,22],137:[2,22],138:[2,22],139:[2,22]},{30:[1,40],33:41,34:42,35:43,36:[1,44],38:[1,45],39:[1,46]},{27:47,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32]},{19:[1,20],21:[1,22],24:48,26:49,27:50,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{6:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],28:[2,10],137:[2,10],138:[2,10],139:[2,10]},{6:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],28:[2,14],137:[2,14],138:[2,14],139:[2,14]},{6:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],28:[2,15],137:[2,15],138:[2,15],139:[2,15]},{6:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],28:[2,16],137:[2,16],138:[2,16],139:[2,16]},{6:[2,20],9:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],28:[2,20],137:[2,20],138:[2,20],139:[2,20]},{6:[2,26],9:[1,51],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],28:[2,26],137:[2,26],138:[2,26],139:[2,26]},{19:[1,20],21:[1,22],31:52,32:[2,34],34:60,37:53,38:[1,45],41:63,42:54,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{30:[2,33],36:[2,33],38:[2,33],39:[2,33]},{30:[2,29],36:[2,29],38:[2,29],39:[2,29]},{30:[2,30],36:[2,30],38:[2,30],39:[2,30]},{30:[2,31],36:[2,31],38:[2,31],39:[2,31]},{19:[1,20],21:[1,22],26:68,63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{19:[1,20],21:[1,22],40:69,41:70,63:65,137:[1,21],138:[1,23]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:71,28:[2,22],137:[2,22],138:[2,22],139:[2,22]},{6:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],28:[2,21],137:[2,21],138:[2,21],139:[2,21]},{6:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],28:[2,24],137:[2,24],138:[2,24],139:[2,24]},{6:[2,22],9:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],25:72,28:[2,22],137:[2,22],138:[2,22],139:[2,22]},{6:[2,23],9:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],28:[2,23],32:[2,23],45:[2,23],49:[2,23],54:[2,23],61:[2,23],137:[2,23],138:[2,23],139:[2,23]},{32:[1,73]},{32:[2,35]},{32:[2,42],43:74,45:[2,42],61:[2,42]},{32:[2,46],45:[2,46],47:75,49:[2,46],61:[2,46]},{32:[2,50],45:[2,50],49:[2,50],51:76,54:[2,50],61:[2,50]},{32:[2,54],45:[2,54],49:[2,54],54:[2,54],61:[2,54]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,55:77,59:59,60:[1,61],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{32:[2,58],45:[2,58],49:[2,58],54:[2,58],61:[2,58]},{32:[2,59],45:[2,59],49:[2,59],54:[2,59],61:[2,59]},{19:[1,20],21:[1,22],34:60,37:78,38:[1,45],41:63,42:54,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{19:[1,20],21:[1,22],26:79,63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{19:[1,20],21:[1,22],27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,91],63:84,65:80,73:[1,81],75:82,77:85,78:[1,83],79:86,80:[1,87],82:[1,88],83:[1,89],87:90,93:[1,92],94:[1,93],95:[1,94],137:[1,21],138:[1,23]},{19:[1,20],21:[1,22],41:96,63:65,137:[1,21],138:[1,23]},{19:[2,74],21:[2,74],30:[2,74],36:[2,74],38:[2,74],39:[2,74],60:[2,74],73:[2,74],78:[2,74],80:[2,74],82:[2,74],83:[2,74],93:[2,74],94:[2,74],95:[2,74],137:[2,74],138:[2,74]},{19:[2,70],21:[2,70],70:97,71:[1,98],137:[2,70],138:[2,70]},{19:[2,72],21:[2,72],69:[1,100],72:99,137:[2,72],138:[2,72]},{30:[2,36],32:[2,36],36:[2,36],38:[2,36],39:[2,36],45:[2,36],49:[2,36],54:[2,36],61:[2,36]},{19:[1,20],21:[1,22],30:[2,37],36:[2,37],38:[2,37],39:[2,37],41:101,63:65,137:[1,21],138:[1,23]},{19:[2,38],21:[2,38],30:[2,38],36:[2,38],38:[2,38],39:[2,38],137:[2,38],138:[2,38]},{6:[2,27],9:[1,51],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],28:[2,27],137:[2,27],138:[2,27],139:[2,27]},{6:[2,25],9:[1,51],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],28:[2,25],137:[2,25],138:[2,25],139:[2,25]},{6:[2,28],9:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],28:[2,28],32:[2,28],45:[2,28],49:[2,28],54:[2,28],61:[2,28],84:[2,28],90:[2,28],91:[2,28],111:[2,28],114:[2,28],115:[2,28],116:[2,28],117:[2,28],137:[2,28],138:[2,28],139:[2,28]},{32:[2,40],44:102,45:[1,103],61:[2,40]},{32:[2,44],45:[2,44],48:104,49:[1,105],61:[2,44]},{32:[2,52],45:[2,52],49:[2,52],52:106,53:107,54:[1,108],61:[2,52]},{32:[2,55],45:[2,55],49:[2,55],54:[2,55],61:[2,55]},{61:[1,109]},{19:[2,61],21:[2,61],38:[2,61],60:[2,61],69:[2,61],71:[2,61],137:[2,61],138:[2,61]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:110,111:[2,66],114:[2,66],115:[2,66],116:[2,66],117:[2,66]},{9:[2,86],32:[2,86],45:[2,86],49:[2,86],54:[2,86],61:[2,86],74:111,84:[2,86],101:[2,86],102:[2,86],103:[2,86],104:[2,86],105:[2,86],106:[2,86],107:[2,86],108:[2,86],109:[2,86],110:[2,86],111:[2,86],114:[2,86],115:[2,86],116:[2,86],117:[2,86]},{9:[2,76],27:95,29:31,30:[2,32],32:[2,76],36:[2,32],38:[2,32],39:[2,32],45:[2,76],49:[2,76],54:[2,76],61:[2,76],76:112,77:113,84:[1,114],87:90,93:[1,92],94:[1,93],95:[1,94],111:[2,76],114:[2,76],115:[2,76],116:[2,76],117:[2,76]},{9:[2,80],27:95,29:31,30:[2,32],32:[2,80],36:[2,32],38:[2,32],39:[2,32],45:[2,80],49:[2,80],54:[2,80],61:[2,80],77:115,87:90,93:[1,92],94:[1,93],95:[1,94],111:[2,80],114:[2,80],115:[2,80],116:[2,80],117:[2,80]},{9:[2,82],32:[2,82],45:[2,82],49:[2,82],54:[2,82],61:[2,82],111:[2,82],114:[2,82],115:[2,82],116:[2,82],117:[2,82]},{9:[2,83],32:[2,83],45:[2,83],49:[2,83],54:[2,83],61:[2,83],111:[2,83],114:[2,83],115:[2,83],116:[2,83],117:[2,83]},{9:[2,84],32:[2,84],45:[2,84],49:[2,84],54:[2,84],61:[2,84],111:[2,84],114:[2,84],115:[2,84],116:[2,84],117:[2,84]},{9:[2,85],32:[2,85],45:[2,85],49:[2,85],54:[2,85],61:[2,85],111:[2,85],114:[2,85],115:[2,85],116:[2,85],117:[2,85]},{9:[2,88],30:[2,88],32:[2,88],36:[2,88],38:[2,88],39:[2,88],45:[2,88],49:[2,88],54:[2,88],61:[2,88],84:[2,88],93:[2,88],94:[2,88],95:[2,88],111:[2,88],114:[2,88],115:[2,88],116:[2,88],117:[2,88]},{9:[2,89],30:[2,89],32:[2,89],36:[2,89],38:[2,89],39:[2,89],45:[2,89],49:[2,89],54:[2,89],61:[2,89],84:[2,89],93:[2,89],94:[2,89],95:[2,89],111:[2,89],114:[2,89],115:[2,89],116:[2,89],117:[2,89]},{9:[2,97],32:[2,97],45:[2,97],49:[2,97],54:[2,97],61:[2,97],84:[2,97],88:116,90:[2,97],91:[2,97],111:[2,97],114:[2,97],115:[2,97],116:[2,97],117:[2,97]},{19:[2,126],21:[2,126],61:[2,126],80:[2,126],98:[2,126],118:117,129:[2,126],130:[2,126],131:[2,126],132:[2,126],133:[2,126],134:[2,126],135:[2,126],136:[2,126],137:[2,126],138:[2,126]},{9:[2,99],32:[2,99],45:[2,99],49:[2,99],54:[2,99],61:[2,99],84:[2,99],90:[2,99],91:[2,99],111:[2,99],114:[2,99],115:[2,99],116:[2,99],117:[2,99]},{9:[2,100],32:[2,100],45:[2,100],49:[2,100],54:[2,100],61:[2,100],84:[2,100],90:[2,100],91:[2,100],111:[2,100],114:[2,100],115:[2,100],116:[2,100],117:[2,100]},{19:[1,20],21:[1,22],26:118,63:18,64:19,137:[1,21],138:[1,23],139:[1,24]},{9:[2,102],32:[2,102],45:[2,102],49:[2,102],54:[2,102],61:[2,102],84:[2,102],90:[2,102],91:[2,102],111:[2,102],114:[2,102],115:[2,102],116:[2,102],117:[2,102]},{19:[1,20],21:[1,22],27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],60:[1,91],63:84,65:119,73:[1,81],75:82,77:85,78:[1,83],79:86,80:[1,87],82:[1,88],83:[1,89],87:90,93:[1,92],94:[1,93],95:[1,94],137:[1,21],138:[1,23]},{19:[2,68],21:[2,68],137:[2,68],138:[2,68]},{19:[2,71],21:[2,71],137:[2,71],138:[2,71]},{19:[2,69],21:[2,69],137:[2,69],138:[2,69]},{19:[2,73],21:[2,73],137:[2,73],138:[2,73]},{19:[2,39],21:[2,39],30:[2,39],36:[2,39],38:[2,39],39:[2,39],137:[2,39],138:[2,39]},{32:[2,43],45:[2,43],61:[2,43]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,42:120,46:55,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{32:[2,47],45:[2,47],49:[2,47],61:[2,47]},{19:[1,20],21:[1,22],34:60,38:[1,45],41:63,46:121,50:56,55:57,56:58,59:59,60:[1,61],62:[1,62],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{32:[2,48],45:[2,48],49:[2,48],61:[2,48]},{32:[2,51],45:[2,51],49:[2,51],54:[2,51],61:[2,51]},{19:[1,20],21:[1,22],32:[2,53],34:60,38:[1,45],41:63,45:[2,53],49:[2,53],50:122,55:57,56:58,59:59,60:[1,61],61:[2,53],62:[1,62],63:65,67:64,69:[1,66],71:[1,67],137:[1,21],138:[1,23]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:123,58:124,61:[2,56],114:[1,125],115:[1,126],116:[1,127],117:[1,128]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:129,58:124,61:[2,56],68:130,111:[1,131],114:[1,125],115:[1,126],116:[1,127],117:[1,128]},{9:[2,75],32:[2,75],45:[2,75],49:[2,75],54:[2,75],61:[2,75],81:132,84:[1,137],96:133,97:134,99:135,100:136,101:[1,138],102:[1,139],103:[1,140],104:[1,141],105:[1,142],106:[1,143],107:[1,144],108:[1,145],109:[1,146],110:[1,147],111:[2,75],114:[2,75],115:[2,75],116:[2,75],117:[2,75]},{9:[2,77],32:[2,77],45:[2,77],49:[2,77],54:[2,77],61:[2,77],111:[2,77],114:[2,77],115:[2,77],116:[2,77],117:[2,77]},{9:[2,78],32:[2,78],45:[2,78],49:[2,78],54:[2,78],61:[2,78],76:148,84:[1,114],111:[2,78],114:[2,78],115:[2,78],116:[2,78],117:[2,78]},{85:149,133:[1,150],134:[1,151],135:[1,152],136:[1,153]},{9:[2,81],32:[2,81],45:[2,81],49:[2,81],54:[2,81],61:[2,81],111:[2,81],114:[2,81],115:[2,81],116:[2,81],117:[2,81]},{9:[2,93],32:[2,93],45:[2,93],49:[2,93],54:[2,93],61:[2,93],84:[2,93],89:155,90:[1,156],91:[1,157],92:154,111:[2,93],114:[2,93],115:[2,93],116:[2,93],117:[2,93]},{19:[1,20],21:[1,22],61:[1,158],63:162,80:[1,163],85:164,98:[1,165],113:161,119:159,120:160,129:[1,166],130:[1,167],131:[1,168],132:[1,169],133:[1,150],134:[1,151],135:[1,152],136:[1,153],137:[1,21],138:[1,23]},{9:[2,101],32:[2,101],45:[2,101],49:[2,101],54:[2,101],61:[2,101],84:[2,101],90:[2,101],91:[2,101],111:[2,101],114:[2,101],115:[2,101],116:[2,101],117:[2,101]},{9:[2,66],32:[2,66],45:[2,66],49:[2,66],54:[2,66],61:[2,66],66:170,111:[2,66],114:[2,66],115:[2,66],116:[2,66],117:[2,66]},{32:[2,41],45:[2,41],61:[2,41]},{32:[2,45],45:[2,45],49:[2,45],61:[2,45]},{32:[2,49],45:[2,49],49:[2,49],54:[2,49],61:[2,49]},{9:[2,22],25:171,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,57],32:[2,57],45:[2,57],49:[2,57],54:[2,57],61:[2,57]},{9:[2,121],32:[2,121],45:[2,121],49:[2,121],54:[2,121],61:[2,121]},{9:[2,122],32:[2,122],45:[2,122],49:[2,122],54:[2,122],61:[2,122]},{9:[2,123],32:[2,123],45:[2,123],49:[2,123],54:[2,123],61:[2,123]},{9:[2,124],32:[2,124],45:[2,124],49:[2,124],54:[2,124],61:[2,124]},{9:[2,22],25:172,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,67],32:[2,67],45:[2,67],49:[2,67],54:[2,67],61:[2,67],111:[2,67],114:[2,67],115:[2,67],116:[2,67],117:[2,67]},{19:[1,20],21:[1,22],63:173,137:[1,21],138:[1,23]},{9:[2,87],32:[2,87],45:[2,87],49:[2,87],54:[2,87],61:[2,87],84:[2,87],101:[2,87],102:[2,87],103:[2,87],104:[2,87],105:[2,87],106:[2,87],107:[2,87],108:[2,87],109:[2,87],110:[2,87],111:[2,87],114:[2,87],115:[2,87],116:[2,87],117:[2,87]},{85:174,133:[1,150],134:[1,151],135:[1,152],136:[1,153]},{98:[1,175]},{98:[1,176]},{98:[1,177]},{133:[2,107],134:[2,107],135:[2,107],136:[2,107]},{133:[2,108],134:[2,108],135:[2,108],136:[2,108]},{98:[2,109]},{98:[2,110]},{98:[2,111]},{98:[2,112]},{98:[2,113]},{98:[2,114]},{98:[2,115]},{98:[2,116]},{98:[2,117]},{9:[2,79],32:[2,79],45:[2,79],49:[2,79],54:[2,79],61:[2,79],111:[2,79],114:[2,79],115:[2,79],116:[2,79],117:[2,79]},{9:[2,90],32:[2,90],45:[2,90],49:[2,90],54:[2,90],61:[2,90],111:[2,90],114:[2,90],115:[2,90],116:[2,90],117:[2,90]},{9:[2,149],19:[2,149],21:[2,149],32:[2,149],45:[2,149],49:[2,149],54:[2,149],61:[2,149],80:[2,149],84:[2,149],98:[2,149],101:[2,149],102:[2,149],103:[2,149],104:[2,149],105:[2,149],106:[2,149],107:[2,149],108:[2,149],109:[2,149],110:[2,149],111:[2,149],114:[2,149],115:[2,149],116:[2,149],117:[2,149],127:[2,149],128:[2,149],129:[2,149],130:[2,149],131:[2,149],132:[2,149],133:[2,149],134:[2,149],135:[2,149],136:[2,149],137:[2,149],138:[2,149]},{9:[2,150],19:[2,150],21:[2,150],32:[2,150],45:[2,150],49:[2,150],54:[2,150],61:[2,150],80:[2,150],84:[2,150],98:[2,150],101:[2,150],102:[2,150],103:[2,150],104:[2,150],105:[2,150],106:[2,150],107:[2,150],108:[2,150],109:[2,150],110:[2,150],111:[2,150],114:[2,150],115:[2,150],116:[2,150],117:[2,150],127:[2,150],128:[2,150],129:[2,150],130:[2,150],131:[2,150],132:[2,150],133:[2,150],134:[2,150],135:[2,150],136:[2,150],137:[2,150],138:[2,150]},{9:[2,151],19:[2,151],21:[2,151],32:[2,151],45:[2,151],49:[2,151],54:[2,151],61:[2,151],80:[2,151],84:[2,151],98:[2,151],101:[2,151],102:[2,151],103:[2,151],104:[2,151],105:[2,151],106:[2,151],107:[2,151],108:[2,151],109:[2,151],110:[2,151],111:[2,151],114:[2,151],115:[2,151],116:[2,151],117:[2,151],127:[2,151],128:[2,151],129:[2,151],130:[2,151],131:[2,151],132:[2,151],133:[2,151],134:[2,151],135:[2,151],136:[2,151],137:[2,151],138:[2,151]},{9:[2,152],19:[2,152],21:[2,152],32:[2,152],45:[2,152],49:[2,152],54:[2,152],61:[2,152],80:[2,152],84:[2,152],98:[2,152],101:[2,152],102:[2,152],103:[2,152],104:[2,152],105:[2,152],106:[2,152],107:[2,152],108:[2,152],109:[2,152],110:[2,152],111:[2,152],114:[2,152],115:[2,152],116:[2,152],117:[2,152],127:[2,152],128:[2,152],129:[2,152],130:[2,152],131:[2,152],132:[2,152],133:[2,152],134:[2,152],135:[2,152],136:[2,152],137:[2,152],138:[2,152]},{9:[2,98],32:[2,98],45:[2,98],49:[2,98],54:[2,98],61:[2,98],84:[2,98],90:[2,98],91:[2,98],111:[2,98],114:[2,98],115:[2,98],116:[2,98],117:[2,98]},{27:95,29:31,30:[2,32],36:[2,32],38:[2,32],39:[2,32],87:178,93:[1,92],94:[1,93],95:[1,94]},{30:[2,94],36:[2,94],38:[2,94],39:[2,94],93:[2,94],94:[2,94],95:[2,94]},{30:[2,95],36:[2,95],38:[2,95],39:[2,95],93:[2,95],94:[2,95],95:[2,95]},{9:[2,125],32:[2,125],45:[2,125],49:[2,125],54:[2,125],61:[2,125],111:[2,125],114:[2,125],115:[2,125],116:[2,125],117:[2,125]},{19:[2,127],21:[2,127],61:[2,127],80:[2,127],98:[2,127],129:[2,127],130:[2,127],131:[2,127],132:[2,127],133:[2,127],134:[2,127],135:[2,127],136:[2,127],137:[2,127],138:[2,127]},{19:[2,128],21:[2,128],61:[2,128],80:[2,128],98:[2,128],129:[2,128],130:[2,128],131:[2,128],132:[2,128],133:[2,128],134:[2,128],135:[2,128],136:[2,128],137:[2,128],138:[2,128]},{19:[2,129],21:[2,129],61:[2,129],80:[2,129],98:[2,129],129:[2,129],130:[2,129],131:[2,129],132:[2,129],133:[2,129],134:[2,129],135:[2,129],136:[2,129],137:[2,129],138:[2,129]},{19:[2,135],21:[2,135],61:[2,135],80:[2,135],98:[2,135],101:[1,181],121:179,125:180,129:[2,135],130:[2,135],131:[2,135],132:[2,135],133:[2,135],134:[2,135],135:[2,135],136:[2,135],137:[2,135],138:[2,135]},{122:182,124:183,126:[1,184]},{9:[2,141],19:[2,141],21:[2,141],32:[2,141],45:[2,141],49:[2,141],54:[2,141],61:[2,141],80:[2,141],98:[2,141],111:[2,141],114:[2,141],115:[2,141],116:[2,141],117:[2,141],127:[1,185],128:[1,186],129:[2,141],130:[2,141],131:[2,141],132:[2,141],133:[2,141],134:[2,141],135:[2,141],136:[2,141],137:[2,141],138:[2,141]},{9:[2,144],19:[2,144],21:[2,144],32:[2,144],45:[2,144],49:[2,144],54:[2,144],61:[2,144],80:[2,144],98:[2,144],111:[2,144],114:[2,144],115:[2,144],116:[2,144],117:[2,144],129:[2,144],130:[2,144],131:[2,144],132:[2,144],133:[2,144],134:[2,144],135:[2,144],136:[2,144],137:[2,144],138:[2,144]},{9:[2,145],19:[2,145],21:[2,145],32:[2,145],45:[2,145],49:[2,145],54:[2,145],61:[2,145],80:[2,145],98:[2,145],111:[2,145],114:[2,145],115:[2,145],116:[2,145],117:[2,145],129:[2,145],130:[2,145],131:[2,145],132:[2,145],133:[2,145],134:[2,145],135:[2,145],136:[2,145],137:[2,145],138:[2,145]},{9:[2,146],19:[2,146],21:[2,146],32:[2,146],45:[2,146],49:[2,146],54:[2,146],61:[2,146],80:[2,146],98:[2,146],111:[2,146],114:[2,146],115:[2,146],116:[2,146],117:[2,146],129:[2,146],130:[2,146],131:[2,146],132:[2,146],133:[2,146],134:[2,146],135:[2,146],136:[2,146],137:[2,146],138:[2,146]},{9:[2,147],19:[2,147],21:[2,147],32:[2,147],45:[2,147],49:[2,147],54:[2,147],61:[2,147],80:[2,147],98:[2,147],111:[2,147],114:[2,147],115:[2,147],116:[2,147],117:[2,147],129:[2,147],130:[2,147],131:[2,147],132:[2,147],133:[2,147],134:[2,147],135:[2,147],136:[2,147],137:[2,147],138:[2,147]},{9:[2,148],19:[2,148],21:[2,148],32:[2,148],45:[2,148],49:[2,148],54:[2,148],61:[2,148],80:[2,148],98:[2,148],111:[2,148],114:[2,148],115:[2,148],116:[2,148],117:[2,148],129:[2,148],130:[2,148],131:[2,148],132:[2,148],133:[2,148],134:[2,148],135:[2,148],136:[2,148],137:[2,148],138:[2,148]},{9:[2,56],32:[2,56],45:[2,56],49:[2,56],54:[2,56],57:187,58:124,61:[2,56],68:130,111:[1,131],114:[1,125],115:[1,126],116:[1,127],117:[1,128]},{9:[1,51],32:[2,60],45:[2,60],49:[2,60],54:[2,60],61:[2,60]},{9:[1,51],32:[2,64],45:[2,64],49:[2,64],54:[2,64],61:[2,64]},{19:[1,20],21:[1,22],63:189,85:164,98:[1,165],112:188,113:190,129:[1,166],130:[1,167],131:[1,168],132:[1,169],133:[1,150],134:[1,151],135:[1,152],136:[1,153],137:[1,21],138:[1,23]},{9:[2,103],32:[2,103],45:[2,103],49:[2,103],54:[2,103],61:[2,103],84:[2,103],101:[2,103],102:[2,103],103:[2,103],104:[2,103],105:[2,103],106:[2,103],107:[2,103],108:[2,103],109:[2,103],110:[2,103],111:[2,103],114:[2,103],115:[2,103],116:[2,103],117:[2,103]},{9:[2,104],32:[2,104],45:[2,104],49:[2,104],54:[2,104],61:[2,104],84:[2,104],101:[2,104],102:[2,104],103:[2,104],104:[2,104],105:[2,104],106:[2,104],107:[2,104],108:[2,104],109:[2,104],110:[2,104],111:[2,104],114:[2,104],115:[2,104],116:[2,104],117:[2,104]},{9:[2,105],32:[2,105],45:[2,105],49:[2,105],54:[2,105],61:[2,105],84:[2,105],101:[2,105],102:[2,105],103:[2,105],104:[2,105],105:[2,105],106:[2,105],107:[2,105],108:[2,105],109:[2,105],110:[2,105],111:[2,105],114:[2,105],115:[2,105],116:[2,105],117:[2,105]},{9:[2,106],32:[2,106],45:[2,106],49:[2,106],54:[2,106],61:[2,106],84:[2,106],101:[2,106],102:[2,106],103:[2,106],104:[2,106],105:[2,106],106:[2,106],107:[2,106],108:[2,106],109:[2,106],110:[2,106],111:[2,106],114:[2,106],115:[2,106],116:[2,106],117:[2,106]},{9:[2,96],32:[2,96],45:[2,96],49:[2,96],54:[2,96],61:[2,96],84:[2,96],90:[2,96],91:[2,96],111:[2,96],114:[2,96],115:[2,96],116:[2,96],117:[2,96]},{19:[2,130],21:[2,130],61:[2,130],80:[2,130],98:[2,130],129:[2,130],130:[2,130],131:[2,130],132:[2,130],133:[2,130],134:[2,130],135:[2,130],136:[2,130],137:[2,130],138:[2,130]},{19:[2,136],21:[2,136],61:[2,136],80:[2,136],98:[2,136],129:[2,136],130:[2,136],131:[2,136],132:[2,136],133:[2,136],134:[2,136],135:[2,136],136:[2,136],137:[2,136],138:[2,136]},{19:[2,132],21:[2,132],61:[2,132],80:[2,132],98:[2,132],123:191,126:[2,132],129:[2,132],130:[2,132],131:[2,132],132:[2,132],133:[2,132],134:[2,132],135:[2,132],136:[2,132],137:[2,132],138:[2,132]},{19:[2,131],21:[2,131],61:[2,131],80:[2,131],98:[2,131],124:192,126:[1,184],129:[2,131],130:[2,131],131:[2,131],132:[2,131],133:[2,131],134:[2,131],135:[2,131],136:[2,131],137:[2,131],138:[2,131]},{19:[2,137],21:[2,137],61:[2,137],80:[2,137],98:[2,137],126:[2,137],129:[2,137],130:[2,137],131:[2,137],132:[2,137],133:[2,137],134:[2,137],135:[2,137],136:[2,137],137:[2,137],138:[2,137]},{19:[1,20],21:[1,22],63:193,137:[1,21],138:[1,23]},{9:[2,142],19:[2,142],21:[2,142],32:[2,142],45:[2,142],49:[2,142],54:[2,142],61:[2,142],80:[2,142],98:[2,142],111:[2,142],114:[2,142],115:[2,142],116:[2,142],117:[2,142],129:[2,142],130:[2,142],131:[2,142],132:[2,142],133:[2,142],134:[2,142],135:[2,142],136:[2,142],137:[2,142],138:[2,142]},{19:[1,20],21:[1,22],63:194,137:[1,21],138:[1,23]},{9:[2,22],25:195,32:[2,22],45:[2,22],49:[2,22],54:[2,22],61:[2,22]},{9:[2,118],32:[2,118],45:[2,118],49:[2,118],54:[2,118],61:[2,118],111:[2,118],114:[2,118],115:[2,118],116:[2,118],117:[2,118]},{9:[2,119],32:[2,119],45:[2,119],49:[2,119],54:[2,119],61:[2,119],111:[2,119],114:[2,119],115:[2,119],116:[2,119],117:[2,119]},{9:[2,120],32:[2,120],45:[2,120],49:[2,120],54:[2,120],61:[2,120],111:[2,120],114:[2,120],115:[2,120],116:[2,120],117:[2,120]},{19:[2,134],21:[2,134],61:[2,134],80:[2,134],98:[2,134],124:196,126:[1,184],129:[2,134],130:[2,134],131:[2,134],132:[2,134],133:[2,134],134:[2,134],135:[2,134],136:[2,134],137:[2,134],138:[2,134]},{19:[2,138],21:[2,138],61:[2,138],80:[2,138],98:[2,138],126:[2,138],129:[2,138],130:[2,138],131:[2,138],132:[2,138],133:[2,138],134:[2,138],135:[2,138],136:[2,138],137:[2,138],138:[2,138]},{19:[2,139],21:[2,139],61:[2,139],80:[2,139],98:[2,139],101:[1,197],126:[2,139],129:[2,139],130:[2,139],131:[2,139],132:[2,139],133:[2,139],134:[2,139],135:[2,139],136:[2,139],137:[2,139],138:[2,139]},{9:[2,143],19:[2,143],21:[2,143],32:[2,143],45:[2,143],49:[2,143],54:[2,143],61:[2,143],80:[2,143],98:[2,143],111:[2,143],114:[2,143],115:[2,143],116:[2,143],117:[2,143],129:[2,143],130:[2,143],131:[2,143],132:[2,143],133:[2,143],134:[2,143],135:[2,143],136:[2,143],137:[2,143],138:[2,143]},{9:[1,51],32:[2,65],45:[2,65],49:[2,65],54:[2,65],61:[2,65]},{19:[2,133],21:[2,133],61:[2,133],80:[2,133],98:[2,133],126:[2,133],129:[2,133],130:[2,133],131:[2,133],132:[2,133],133:[2,133],134:[2,133],135:[2,133],136:[2,133],137:[2,133],138:[2,133]},{19:[2,140],21:[2,140],61:[2,140],80:[2,140],98:[2,140],126:[2,140],129:[2,140],130:[2,140],131:[2,140],132:[2,140],133:[2,140],134:[2,140],135:[2,140],136:[2,140],137:[2,140],138:[2,140]}],
defaultActions: {5:[2,13],25:[2,1],53:[2,35],139:[2,109],140:[2,110],141:[2,111],142:[2,112],143:[2,113],144:[2,114],145:[2,115],146:[2,116],147:[2,117]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';


  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() { debugger;
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 93;
break;
case 2:return 94;
break;
case 3:return 127;
break;
case 4:return 95;
break;
case 5:return 137;
break;
case 6:return 18;
break;
case 7:return 20;
break;
case 8:return 22;
break;
case 9:return 28;
break;
case 10:return 117;
break;
case 11:return 36;
break;
case 12:return 39;
break;
case 13:return 73;
break;
case 14:return 78;
break;
case 15:return 82;
break;
case 16:return 83;
break;
case 17:return 84;
break;
case 18:return 90;
break;
case 19:return 91;
break;
case 20:return 102;
break;
case 21:return 103;
break;
case 22:return 104;
break;
case 23:return 105;
break;
case 24:return 106;
break;
case 25:return 107;
break;
case 26:return 108;
break;
case 27:return 109;
break;
case 28:return 110;
break;
case 29:return 23;
break;
case 30:return 30;
break;
case 31:return 32;
break;
case 32:return 38;
break;
case 33:return 49;
break;
case 34:return 45;
break;
case 35:return 54;
break;
case 36:return 60;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 69;
break;
case 40:return 128;
break;
case 41:return 71;
break;
case 42:return 80;
break;
case 43:return 101;
break;
case 44:return 111;
break;
case 45:return 114;
break;
case 46:return 115;
break;
case 47:return 116;
break;
case 48:return 126;
break;
case 49:return 131;
break;
case 50:return 132;
break;
case 51:return 9;
break;
case 52:return 130;
break;
case 53:return 129;
break;
case 54:return 98;
break;
case 55:return 'ANON';
break;
case 56:return 19;
break;
case 57:return 21;
break;
case 58:return 138;
break;
case 59:return 139;
break;
case 60:return 135;
break;
case 61:return 136;
break;
case 62:return 133;
break;
case 63:return 134;
break;
case 64:return 6
break;
case 65:return 'invalid character'
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:start\b)/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(%([#+A-Z_a-z][#+0-9A-Z_a-z]*)?\{([^%]|\\%)*%\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:(\\\[(((( )|((\\t)|((\\r)|(\\n))))))*\\\]))/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShexParser;
exports.Parser = ShexParser.Parser;
exports.parse = function () { return ShexParser.parse.apply(ShexParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}